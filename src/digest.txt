Directory structure:
└── src/
    ├── index.html
    ├── main.server.ts
    ├── main.ts
    ├── server.ts
    ├── styles.scss
    ├── app/
    │   ├── app.component.html
    │   ├── app.component.scss
    │   ├── app.component.ts
    │   ├── app.config.server.ts
    │   ├── app.config.ts
    │   ├── app.routes.server.ts
    │   ├── app.routes.ts
    │   └── features/
    │       ├── .DS_Store
    │       ├── auth/
    │       │   ├── auth-routing.module.ts
    │       │   ├── auth.module.ts
    │       │   ├── auth.service.ts
    │       │   └── pages/
    │       │       ├── forgot-password/
    │       │       │   ├── forgot-password.component.html
    │       │       │   ├── forgot-password.component.scss
    │       │       │   └── forgot-password.component.ts
    │       │       ├── login/
    │       │       │   ├── login.component.html
    │       │       │   ├── login.component.scss
    │       │       │   └── login.component.ts
    │       │       └── register/
    │       │           ├── register.component.html
    │       │           ├── register.component.scss
    │       │           └── register.component.ts
    │       └── welcome/
    │           ├── welcome-routing.module.ts
    │           ├── welcome.module.ts
    │           ├── .DS_Store
    │           └── welcome/
    │               ├── welcome.component.html
    │               ├── welcome.component.scss
    │               └── welcome.component.ts
    └── assets/
        ├── cristales/
        └── logo/

================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Arcana</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
</head>
<body>
  <app-root></app-root>
</body>
</html>



================================================
File: main.server.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;



================================================
File: main.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));



================================================
File: server.ts
================================================
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);



================================================
File: styles.scss
================================================
@import "tailwindcss";



================================================
File: app/app.component.html
================================================
<router-outlet></router-outlet>


================================================
File: app/app.component.scss
================================================



================================================
File: app/app.component.ts
================================================
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'Arcana';
}



================================================
File: app/app.config.server.ts
================================================
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRouting } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);



================================================
File: app/app.config.ts
================================================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [provideZoneChangeDetection({ eventCoalescing: true }), provideRouter(routes), provideClientHydration(withEventReplay())]
};



================================================
File: app/app.routes.server.ts
================================================
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];



================================================
File: app/app.routes.ts
================================================
import { Routes } from '@angular/router';

export const routes: Routes = [
  {
    path: '',
    loadChildren: () => import('./features/welcome/welcome.module').then(m => m.WelcomeModule)
  },
  {
    path: '**',
    redirectTo: ''
  }
];



================================================
File: app/features/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/auth/auth-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./pages/forgot-password/forgot-password.component').then(m => m.ForgotPasswordComponent)
  },
  {
    path: '',
    loadComponent: () => import('./pages/login/login.component').then(m => m.LoginComponent)
  },
  {
    path: '',
    loadComponent: () => import('./pages/register/register.component').then(m => m.RegisterComponent)
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AuthRoutingModule { }



================================================
File: app/features/auth/auth.module.ts
================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AuthRoutingModule } from './auth-routing.module';

import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';


@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    AuthRoutingModule,
    LoginComponent,
    RegisterComponent,
    ForgotPasswordComponent
  ]
})
export class AuthModule { }



================================================
File: app/features/auth/auth.service.ts
================================================
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  constructor() { }
}



================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.html
================================================
<p>forgot-password works!</p>



================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.scss
================================================



================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-forgot-password',
  imports: [],
  templateUrl: './forgot-password.component.html',
  styleUrl: './forgot-password.component.scss'
})
export class ForgotPasswordComponent {

}



================================================
File: app/features/auth/pages/login/login.component.html
================================================
<div class="min-h-screen w-full font-serif relative overflow-hidden" style="background-color: #100820; color: #b4a2fd;">
  <!-- Animated Stars Background -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <!-- Large Stars -->
    <div class="star large" style="top: 8%; left: 12%; animation-delay: 0s;"></div>
    <div class="star large" style="top: 15%; left: 88%; animation-delay: 1.2s;"></div>
    <div class="star large" style="top: 25%; left: 5%; animation-delay: 2.1s;"></div>
    <div class="star large" style="top: 35%; left: 85%; animation-delay: 1.8s;"></div>
    <div class="star large" style="top: 55%; left: 15%; animation-delay: 2.8s;"></div>
    <div class="star large" style="top: 75%; left: 90%; animation-delay: 1.5s;"></div>
    <div class="star large" style="top: 85%; left: 25%; animation-delay: 0.7s;"></div>
    <div class="star large" style="top: 95%; left: 78%; animation-delay: 2.3s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 12%; left: 45%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 18%; left: 65%; animation-delay: 2.2s;"></div>
    <div class="star medium" style="top: 28%; left: 32%; animation-delay: 1.1s;"></div>
    <div class="star medium" style="top: 38%; left: 72%; animation-delay: 3.0s;"></div>
    <div class="star medium" style="top: 48%; left: 28%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 58%; left: 68%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 68%; left: 35%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 78%; left: 82%; animation-delay: 2.7s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 6%; left: 25%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 22%; left: 78%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 42%; left: 8%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 52%; left: 92%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 72%; left: 18%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 82%; left: 95%; animation-delay: 0.9s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 55%; animation-delay: 0.6s;"></div>
    <div class="sparkle" style="top: 20%; left: 15%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 30%; left: 85%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 50%; left: 45%; animation-delay: 1.2s;"></div>
    <div class="sparkle" style="top: 70%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="sparkle" style="top: 90%; left: 35%; animation-delay: 0.4s;"></div>
    
    <!-- Floating sparkles -->
    <div class="floating-sparkle" style="top: 25%; left: 20%; animation-delay: 1.5s;"></div>
    <div class="floating-sparkle" style="top: 45%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="floating-sparkle" style="top: 65%; left: 60%; animation-delay: 0.8s;"></div>
    <div class="floating-sparkle" style="top: 85%; left: 40%; animation-delay: 2.6s;"></div>
  </div>

  <!-- Mystical Gradient Overlay -->
  <div class="fixed inset-0 pointer-events-none z-1">
    <div class="mystical-gradient"></div>
  </div>

  <!-- Content with higher z-index -->
  <div class="relative z-10 min-h-screen flex items-center justify-center p-4">
    
    <!-- Back to Home Button -->
    <div class="absolute top-6 left-6 z-20">
      <button 
        class="back-home-btn group"
        (click)="onBackToHome()"
      >
        <i class="fas fa-arrow-left mr-2 transition-transform group-hover:-translate-x-1"></i>
        <span class="hidden sm:inline">Volver al Inicio</span>
        <span class="sm:hidden">Inicio</span>
      </button>
    </div>

    <!-- Login Container -->
    <div class="login-container">
      
      <!-- Header Section -->
      <div class="login-header">
        <!-- Mystical Icon -->
        <div class="login-icon-container">
          <div class="login-icon">🔮</div>
          <div class="icon-sparkle">✨</div>
        </div>
        
        <!-- Title and Subtitle -->
        <h1 class="login-title">
          <span class="title-highlight">Bienvenido</span> de Vuelta
        </h1>
        <p class="login-subtitle">
          Accede a tu portal místico y continúa tu viaje espiritual
        </p>
      </div>

      <!-- Login Form -->
      <form class="login-form" (ngSubmit)="onSubmit()" #loginForm="ngForm">
        
        <!-- Email Field -->
        <div class="form-group">
          <label class="form-label" for="email">
            <i class="fas fa-envelope label-icon"></i>
            Correo Electrónico
          </label>
          <div class="input-container">
            <input
              id="email"
              name="email"
              type="email"
              class="form-input"
              [class.error]="emailError() && (emailTouched() || isSubmitted())"
              [class.loading]="isLoading()"
              placeholder="tu@email.com"
              [(ngModel)]="credentials().email"
              (blur)="onEmailBlur()"
              (input)="onEmailChange($event)"
              required
              email
              autocomplete="email"
            >
            <div class="input-border"></div>
            <div class="input-glow"></div>
          </div>
          <div class="error-message" *ngIf="emailError() && (emailTouched() || isSubmitted())">
            <i class="fas fa-exclamation-circle mr-2"></i>
            {{ emailError() }}
          </div>
        </div>

        <!-- Password Field -->
        <div class="form-group">
          <label class="form-label" for="password">
            <i class="fas fa-lock label-icon"></i>
            Contraseña
          </label>
          <div class="input-container">
            <input
              id="password"
              name="password"
              [type]="showPassword() ? 'text' : 'password'"
              class="form-input password-input"
              [class.error]="passwordError() && (passwordTouched() || isSubmitted())"
              [class.loading]="isLoading()"
              placeholder="••••••••"
              [(ngModel)]="credentials().password"
              (blur)="onPasswordBlur()"
              (input)="onPasswordChange($event)"
              required
              minlength="6"
              autocomplete="current-password"
            >
            <button
              type="button"
              class="password-toggle"
              (click)="togglePasswordVisibility()"
              [attr.aria-label]="showPassword() ? 'Ocultar contraseña' : 'Mostrar contraseña'"
            >
              <i [class]="showPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'"></i>
            </button>
            <div class="input-border"></div>
            <div class="input-glow"></div>
          </div>
          <div class="error-message" *ngIf="passwordError() && (passwordTouched() || isSubmitted())">
            <i class="fas fa-exclamation-circle mr-2"></i>
            {{ passwordError() }}
          </div>
        </div>

        <!-- Remember Me & Forgot Password -->
        <div class="form-options">
          <label class="remember-checkbox">
            <input
              type="checkbox"
              [(ngModel)]="credentials().rememberMe"
              name="rememberMe"
            >
            <span class="checkmark">
              <i class="fas fa-check"></i>
            </span>
            <span class="remember-text">Recordar sesión</span>
          </label>
          
          <button
            type="button"
            class="forgot-password-link"
            (click)="onForgotPassword()"
          >
            ¿Olvidaste tu contraseña?
          </button>
        </div>

        <!-- Submit Button -->
        <button
          type="submit"
          class="login-submit-btn"
          [disabled]="isLoading() || !isFormValid()"
          [class.loading]="isLoading()"
        >
          <span class="btn-content" *ngIf="!isLoading()">
            <i class="fas fa-sign-in-alt mr-2"></i>
            Iniciar Sesión
          </span>
          <span class="btn-loading" *ngIf="isLoading()">
            <div class="spinner"></div>
            Iniciando sesión...
          </span>
        </button>

        <!-- Error Alert -->
        <div class="error-alert" *ngIf="loginError()">
          <i class="fas fa-exclamation-triangle mr-2"></i>
          {{ loginError() }}
        </div>

      </form>

      <!-- Divider -->
      <div class="divider">
        <span class="divider-text">O continúa con</span>
      </div>

      <!-- Social Login -->
      <div class="social-login">
        <button 
          class="social-btn google-btn"
          (click)="onSocialLogin('google')"
          [disabled]="isLoading()"
        >
          <i class="fab fa-google mr-3"></i>
          <span class="hidden sm:inline">Continuar con Google</span>
          <span class="sm:hidden">Google</span>
        </button>
        
        <button 
          class="social-btn facebook-btn"
          (click)="onSocialLogin('facebook')"
          [disabled]="isLoading()"
        >
          <i class="fab fa-facebook-f mr-3"></i>
          <span class="hidden sm:inline">Continuar con Facebook</span>
          <span class="sm:hidden">Facebook</span>
        </button>
      </div>

      <!-- Register Link -->
      <div class="register-link">
        <span class="register-text">¿No tienes una cuenta?</span>
        <button 
          class="register-btn"
          (click)="onGoToRegister()"
        >
          Crear cuenta gratuita
          <i class="fas fa-arrow-right ml-2 transition-transform group-hover:translate-x-1"></i>
        </button>
      </div>

      <!-- Trust Indicators -->
      <div class="trust-indicators">
        <div class="trust-item">
          <i class="fas fa-shield-alt"></i>
          <span>Seguro</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-lock"></i>
          <span>Encriptado</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-user-shield"></i>
          <span>Privado</span>
        </div>
      </div>

    </div>
  </div>
</div>


================================================
File: app/features/auth/pages/login/login.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --accent-color: #8b4513;
  --success-color: #32cd32;
  --warning-color: #daa520;
  --error-color: #ff6b6b;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.2);
  --input-bg: rgba(16, 8, 32, 0.6);
  --input-border: rgba(180, 162, 253, 0.3);
  --shadow-primary: 0 0 20px rgba(180, 162, 253, 0.3);
  --shadow-glow: 0 0 30px rgba(180, 162, 253, 0.5);
}

/* ========== ANIMATIONS ========== */
@keyframes twinkle {
  0%, 100% { opacity: 0.4; transform: scale(1); }
  50% { opacity: 1; transform: scale(1.3); }
}

@keyframes sparkle {
  0%, 100% { opacity: 0; transform: scale(0) rotate(0deg); }
  25% { opacity: 0.6; transform: scale(0.5) rotate(90deg); }
  50% { opacity: 1; transform: scale(1) rotate(180deg); }
  75% { opacity: 0.6; transform: scale(0.5) rotate(270deg); }
}

@keyframes floating-sparkle {
  0%, 100% { opacity: 0.3; transform: translateY(0px) scale(0.8) rotate(0deg); }
  25% { opacity: 0.8; transform: translateY(-15px) scale(1.2) rotate(90deg); }
  50% { opacity: 1; transform: translateY(-25px) scale(1) rotate(180deg); }
  75% { opacity: 0.6; transform: translateY(-10px) scale(1.1) rotate(270deg); }
}

@keyframes pulse-glow {
  0%, 100% { text-shadow: 0 0 10px rgba(180, 162, 253, 0.3); }
  50% { text-shadow: 0 0 20px rgba(180, 162, 253, 0.8); }
}

@keyframes float-up {
  0% { opacity: 0; transform: translateY(30px); }
  100% { opacity: 1; transform: translateY(0); }
}

@keyframes spin {
  from { transform: rotate(0deg); }
  to { transform: rotate(360deg); }
}

@keyframes shimmer {
  0% { transform: translateX(-100%); }
  100% { transform: translateX(100%); }
}

/* ========== BACKGROUND ELEMENTS ========== */
.star {
  position: absolute;
  background: var(--primary-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);
}

.star.large {
  width: 3px; height: 3px;
  animation: twinkle 4s ease-in-out infinite;
}

.star.medium {
  width: 2px; height: 2px;
  animation: twinkle 3s ease-in-out infinite;
}

.star.small {
  width: 1px; height: 1px;
  animation: twinkle 5s ease-in-out infinite;
}

.sparkle {
  position: absolute;
  width: 2px; height: 2px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
}

.floating-sparkle {
  position: absolute;
  width: 1.5px; height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
}

.mystical-gradient {
  background: radial-gradient(
    ellipse at 20% 30%, 
    rgba(180, 162, 253, 0.05) 0%, 
    transparent 50%
  ),
  radial-gradient(
    ellipse at 80% 70%, 
    rgba(180, 162, 253, 0.03) 0%, 
    transparent 50%
  );
  width: 100%;
  height: 100%;
}

/* ========== MAIN COMPONENTS ========== */
.back-home-btn {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 0.5rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  cursor: pointer;
}

.back-home-btn:hover {
  background: rgba(180, 162, 253, 0.15);
  transform: translateY(-2px);
  box-shadow: var(--shadow-primary);
}

.login-container {
  width: 100%;
  max-width: 420px;
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  border-radius: 1.5rem;
  padding: 2.5rem 2rem;
  box-shadow: var(--shadow-primary);
  animation: float-up 0.8s ease-out;
  position: relative;
  overflow: hidden;
}

.login-container::before {
  content: '';
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  background: linear-gradient(135deg, 
    rgba(180, 162, 253, 0.1) 0%, 
    rgba(180, 162, 253, 0.05) 50%, 
    rgba(180, 162, 253, 0.1) 100%);
  pointer-events: none;
  z-index: -1;
}

/* ========== HEADER ========== */
.login-header {
  text-align: center;
  margin-bottom: 2rem;
}

.login-icon-container {
  position: relative;
  display: inline-block;
  margin-bottom: 1.5rem;
}

.login-icon {
  font-size: 3rem;
  animation: pulse-glow 4s ease-in-out infinite;
  display: block;
}

.icon-sparkle {
  position: absolute;
  top: -0.5rem; right: -0.5rem;
  font-size: 1.5rem;
  animation: floating-sparkle 3s ease-in-out infinite;
}

.login-title {
  font-size: 2rem;
  font-weight: 300;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.title-highlight {
  font-weight: 600;
  background: linear-gradient(135deg, var(--primary-color), #ffffff);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.login-subtitle {
  font-size: 1rem;
  opacity: 0.8;
  color: var(--primary-color);
  line-height: 1.5;
}

/* ========== FORM STYLES ========== */
.login-form {
  margin-bottom: 1.5rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--primary-color);
  margin-bottom: 0.5rem;
}

.label-icon {
  width: 1rem;
  margin-right: 0.5rem;
  opacity: 0.7;
}

.input-container {
  position: relative;
  width: 100%;
}

.form-input {
  width: 100%;
  padding: 1rem 1.25rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  color: var(--primary-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;
}

.form-input::placeholder {
  color: rgba(180, 162, 253, 0.5);
}

.form-input:focus {
  outline: none;
  border-color: var(--primary-color);
  background: rgba(16, 8, 32, 0.8);
  box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.1);
}

.form-input.error {
  border-color: var(--error-color);
  background: rgba(255, 107, 107, 0.1);
}

.input-border {
  position: absolute;
  top: 0; left: 0; right: 0; bottom: 0;
  border-radius: 0.75rem;
  padding: 1px;
  background: linear-gradient(135deg, 
    rgba(180, 162, 253, 0.3), 
    transparent, 
    rgba(180, 162, 253, 0.3));
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.form-input:focus + .input-border {
  opacity: 1;
}

.input-glow {
  position: absolute;
  top: 50%; left: 50%;
  transform: translate(-50%, -50%);
  width: 0; height: 0;
  background: radial-gradient(circle, rgba(180, 162, 253, 0.3) 0%, transparent 70%);
  border-radius: 50%;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.form-input:focus + .input-border + .input-glow {
  width: 200%; height: 200%;
}

.password-input {
  padding-right: 3rem;
}

.password-toggle {
  position: absolute;
  top: 50%; right: 1rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  font-size: 1rem;
  opacity: 0.7;
  transition: opacity 0.3s ease;
  z-index: 3;
}

.password-toggle:hover {
  opacity: 1;
}

.error-message {
  display: flex;
  align-items: center;
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 0.5rem;
  animation: float-up 0.3s ease-out;
}

/* ========== FORM OPTIONS ========== */
.form-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.remember-checkbox {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.875rem;
  color: var(--primary-color);
}

.remember-checkbox input[type="checkbox"] {
  display: none;
}

.checkmark {
  width: 1.25rem; height: 1.25rem;
  border: 1px solid var(--input-border);
  border-radius: 0.25rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 0.5rem;
  transition: all 0.3s ease;
}

.remember-checkbox input:checked + .checkmark {
  background: var(--primary-color);
  border-color: var(--primary-color);
  color: var(--secondary-color);
}

.remember-checkbox input:checked + .checkmark i {
  opacity: 1;
  transform: scale(1);
}

.checkmark i {
  font-size: 0.75rem;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s ease;
}

.forgot-password-link {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  text-decoration: underline;
  cursor: pointer;
  opacity: 0.8;
  transition: opacity 0.3s ease;
}

.forgot-password-link:hover {
  opacity: 1;
}

/* ========== BUTTONS ========== */
.login-submit-btn {
  width: 100%;
  padding: 1rem 1.5rem;
  background: linear-gradient(135deg, var(--primary-color), #9b87fd);
  border: none;
  border-radius: 0.75rem;
  color: var(--secondary-color);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  margin-bottom: 1rem;
}

.login-submit-btn:not(:disabled):hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-glow);
}

.login-submit-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.login-submit-btn::before {
  content: '';
  position: absolute;
  top: 0; left: -100%;
  width: 100%; height: 100%;
  background: linear-gradient(90deg, transparent, rgba(255,255,255,0.2), transparent);
  transition: left 0.5s ease;
}

.login-submit-btn:hover::before {
  left: 100%;
}

.btn-loading {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spinner {
  width: 1rem; height: 1rem;
  border: 2px solid rgba(16, 8, 32, 0.3);
  border-top: 2px solid var(--secondary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 0.5rem;
}

.error-alert {
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  animation: float-up 0.3s ease-out;
}

/* ========== SOCIAL LOGIN ========== */
.divider {
  position: relative;
  margin: 1.5rem 0;
  text-align: center;
}

.divider::before {
  content: '';
  position: absolute;
  top: 50%; left: 0; right: 0;
  height: 1px;
  background: var(--input-border);
}

.divider-text {
  background: var(--glass-bg);
  padding: 0 1rem;
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.7;
}

.social-login {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1rem;
  border: 1px solid var(--input-border);
  border-radius: 0.5rem;
  background: var(--input-bg);
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.social-btn:hover {
  background: rgba(180, 162, 253, 0.1);
  border-color: var(--primary-color);
  transform: translateY(-1px);
}

.google-btn:hover {
  background: rgba(234, 67, 53, 0.1);
  border-color: #ea4335;
  color: #ea4335;
}

.facebook-btn:hover {
  background: rgba(24, 119, 242, 0.1);
  border-color: #1877f2;
  color: #1877f2;
}

/* ========== REGISTER LINK ========== */
.register-link {
  text-align: center;
  margin-bottom: 1.5rem;
}

.register-text {
  color: var(--primary-color);
  opacity: 0.8;
  font-size: 0.875rem;
  margin-right: 0.5rem;
}

.register-btn {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  text-decoration: underline;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
}

.register-btn:hover {
  color: #ffffff;
  text-shadow: 0 0 10px rgba(180, 162, 253, 0.5);
}

/* ========== TRUST INDICATORS ========== */
.trust-indicators {
  display: flex;
  justify-content: center;
  gap: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--input-border);
}

.trust-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.75rem;
  color: var(--primary-color);
  opacity: 0.6;
}

.trust-item i {
  font-size: 1rem;
  margin-bottom: 0.25rem;
}

/* ========== RESPONSIVE DESIGN ========== */
@media (max-width: 768px) {
  .login-container {
    margin: 1rem;
    padding: 2rem 1.5rem;
    border-radius: 1rem;
  }
  
  .login-title {
    font-size: 1.75rem;
  }
  
  .social-login {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }
  
  .form-options {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }
  
  .trust-indicators {
    gap: 1rem;
  }
}

@media (max-width: 480px) {
  .login-container {
    padding: 1.5rem 1rem;
  }
  
  .login-icon {
    font-size: 2.5rem;
  }
  
  .login-title {
    font-size: 1.5rem;
  }
  
  .trust-indicators {
    flex-wrap: wrap;
    gap: 0.75rem;
  }
}

/* ========== ACCESSIBILITY ========== */
@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .floating-sparkle,
  .login-icon,
  .icon-sparkle {
    animation: none !important;
  }
  
  .login-container {
    animation: none;
  }
  
  .error-message {
    animation: none;
  }
}

/* ========== FOCUS STYLES ========== */
button:focus-visible,
input:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

/* ========== LOADING STATE ========== */
.form-input.loading {
  position: relative;
  overflow: hidden;
}

.form-input.loading::after {
  content: '';
  position: absolute;
  top: 0; left: 0;
  width: 100%; height: 100%;
  background: linear-gradient(90deg, transparent, rgba(180, 162, 253, 0.1), transparent);
  animation: shimmer 1.5s infinite;
}


================================================
File: app/features/auth/pages/login/login.component.ts
================================================
import { Component, signal, OnInit, OnDestroy, Inject, PLATFORM_ID } from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Subject, takeUntil } from 'rxjs';

// Interfaces
export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe: boolean;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: any;
  message?: string;
  errors?: ValidationError[];
}

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss']
})
export class LoginComponent implements OnInit, OnDestroy {
  // Control de SSR
  private isBrowser: boolean;
  private destroy$ = new Subject<void>();

  // Estado del formulario
  credentials = signal<LoginCredentials>({
    email: '',
    password: '',
    rememberMe: false
  });

  // Estados de UI
  isLoading = signal<boolean>(false);
  isSubmitted = signal<boolean>(false);
  showPassword = signal<boolean>(false);

  // Estados de validación
  emailTouched = signal<boolean>(false);
  passwordTouched = signal<boolean>(false);
  emailError = signal<string>('');
  passwordError = signal<string>('');
  loginError = signal<string>('');

  // Parámetros de retorno
  private returnUrl: string = '/dashboard';

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    @Inject(PLATFORM_ID) platformId: Object,
    // private authService: AuthService, // Inyectar cuando esté disponible
    // private analyticsService: AnalyticsService // Inyectar cuando esté disponible
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
    this.initializeComponent();
    this.setupRouteParams();
    this.trackPageView();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // ============ INICIALIZACIÓN ============

  private initializeComponent(): void {
    // Pre-llenar email si viene de query params
    const email = this.route.snapshot.queryParams['email'];
    if (email) {
      this.credentials.update(cred => ({ ...cred, email }));
    }

    // Limpiar errores anteriores
    this.clearErrors();
  }

  private setupRouteParams(): void {
    // Obtener URL de retorno
    this.returnUrl = this.route.snapshot.queryParams['returnUrl'] || '/dashboard';
    
    // Tracking de origen
    const source = this.route.snapshot.queryParams['source'];
    if (source) {
      this.trackUserInteraction('login_page_view', { source });
    }
  }

  private trackPageView(): void {
    this.trackUserInteraction('login_page_view', {
      returnUrl: this.returnUrl,
      timestamp: new Date().toISOString()
    });
  }

  // ============ VALIDACIONES ============

  private validateEmail(email: string): string {
    if (!email) {
      return 'El correo electrónico es requerido';
    }
    
    if (!this.isValidEmail(email)) {
      return 'Ingresa un correo electrónico válido';
    }
    
    return '';
  }

  private validatePassword(password: string): string {
    if (!password) {
      return 'La contraseña es requerida';
    }
    
    if (password.length < 6) {
      return 'La contraseña debe tener al menos 6 caracteres';
    }
    
    return '';
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private validateForm(): boolean {
    const creds = this.credentials();
    
    const emailErr = this.validateEmail(creds.email);
    const passwordErr = this.validatePassword(creds.password);
    
    this.emailError.set(emailErr);
    this.passwordError.set(passwordErr);
    
    return !emailErr && !passwordErr;
  }

  // ============ EVENT HANDLERS ============

  onEmailChange(event: any): void {
    const email = event.target.value;
    this.credentials.update(cred => ({ ...cred, email }));
    
    // Validación en tiempo real solo si ya fue tocado
    if (this.emailTouched()) {
      this.emailError.set(this.validateEmail(email));
    }
  }

  onEmailBlur(): void {
    this.emailTouched.set(true);
    const email = this.credentials().email;
    this.emailError.set(this.validateEmail(email));
    
    this.trackUserInteraction('email_field_blur', {
      hasValue: !!email,
      isValid: !this.emailError()
    });
  }

  onPasswordChange(event: any): void {
    const password = event.target.value;
    this.credentials.update(cred => ({ ...cred, password }));
    
    // Validación en tiempo real solo si ya fue tocado
    if (this.passwordTouched()) {
      this.passwordError.set(this.validatePassword(password));
    }
  }

  onPasswordBlur(): void {
    this.passwordTouched.set(true);
    const password = this.credentials().password;
    this.passwordError.set(this.validatePassword(password));
    
    this.trackUserInteraction('password_field_blur', {
      hasValue: !!password,
      isValid: !this.passwordError()
    });
  }

  togglePasswordVisibility(): void {
    this.showPassword.update(show => !show);
    this.trackUserInteraction('password_visibility_toggle', {
      isVisible: this.showPassword()
    });
  }

  // ============ FORM SUBMISSION ============

  async onSubmit(): Promise<void> {
    this.isSubmitted.set(true);
    this.clearErrors();

    // Validar formulario
    if (!this.validateForm()) {
      this.trackUserInteraction('login_validation_failed', {
        emailError: this.emailError(),
        passwordError: this.passwordError()
      });
      return;
    }

    // Iniciar loading
    this.isLoading.set(true);
    
    try {
      this.trackUserInteraction('login_attempt', {
        email: this.credentials().email,
        rememberMe: this.credentials().rememberMe
      });

      // Simular llamada al servicio de autenticación
      const result = await this.performLogin(this.credentials());
      
      if (result.success) {
        await this.handleLoginSuccess(result);
      } else {
        this.handleLoginError(result);
      }
      
    } catch (error) {
      this.handleLoginError({
        success: false,
        message: 'Error de conexión. Por favor, intenta de nuevo.'
      });
      
      this.trackUserInteraction('login_error', {
        error: error instanceof Error ? error.message : 'Unknown error'
      });
    } finally {
      this.isLoading.set(false);
    }
  }

  private async performLogin(credentials: LoginCredentials): Promise<LoginResponse> {
    // Aquí iría la llamada real al AuthService
    // return this.authService.login(credentials);
    
    // Simulación para demo
    return new Promise((resolve) => {
      setTimeout(() => {
        if (credentials.email === 'demo@arcana.com' && credentials.password === 'demo123') {
          resolve({
            success: true,
            token: 'demo_token_' + Date.now(),
            user: {
              id: '1',
              email: credentials.email,
              name: 'Usuario Demo'
            }
          });
        } else {
          resolve({
            success: false,
            message: 'Credenciales incorrectas. Usa demo@arcana.com / demo123 para la demo.'
          });
        }
      }, 1500);
    });
  }

  private async handleLoginSuccess(result: LoginResponse): Promise<void> {
    this.trackUserInteraction('login_success', {
      userId: result.user?.id,
      rememberMe: this.credentials().rememberMe
    });

    // Guardar token si remember me está activado
    if (this.credentials().rememberMe && this.isBrowser) {
      this.saveRememberMeData(result);
    }

    // Mostrar mensaje de éxito (opcional)
    this.showSuccessMessage();

    // Redirigir después de un breve delay
    setTimeout(() => {
      this.router.navigate([this.returnUrl]).catch(err => {
        console.error('Error en redirección:', err);
        this.router.navigate(['/dashboard']);
      });
    }, 1000);
  }

  private handleLoginError(result: LoginResponse): void {
    this.loginError.set(result.message || 'Error desconocido');
    
    // Manejar errores específicos de campos
    if (result.errors) {
      result.errors.forEach(error => {
        if (error.field === 'email') {
          this.emailError.set(error.message);
        } else if (error.field === 'password') {
          this.passwordError.set(error.message);
        }
      });
    }

    this.trackUserInteraction('login_failed', {
      error: result.message,
      fieldErrors: result.errors
    });
  }

  private saveRememberMeData(result: LoginResponse): void {
    if (!this.isBrowser) return;

    try {
      localStorage.setItem('arcana_remember_email', this.credentials().email);
      if (result.token) {
        localStorage.setItem('arcana_auth_token', result.token);
      }
    } catch (error) {
      console.warn('Error guardando datos de remember me:', error);
    }
  }

  private showSuccessMessage(): void {
    // Aquí podrías mostrar un toast o mensaje de éxito
    this.loginError.set('');
    console.log('¡Login exitoso! Redirigiendo...');
  }

  // ============ SOCIAL LOGIN ============

  onSocialLogin(provider: 'google' | 'facebook'): void {
    if (this.isLoading()) return;

    this.trackUserInteraction('social_login_attempt', { provider });

    // Implementar login social
    this.performSocialLogin(provider);
  }

  private performSocialLogin(provider: string): void {
    if (!this.isBrowser) return;

    try {
      // Aquí iría la implementación real del login social
      // this.authService.loginWithSocial(provider);
      
      // Para demo, simular redirección
      console.log(`Iniciando login con ${provider}...`);
      
      // Mostrar loading temporal
      this.isLoading.set(true);
      
      setTimeout(() => {
        this.isLoading.set(false);
        alert(`Login con ${provider} no implementado en demo`);
      }, 2000);
      
    } catch (error) {
      this.isLoading.set(false);
      this.loginError.set(`Error al conectar con ${provider}`);
      this.trackUserInteraction('social_login_error', { provider, error });
    }
  }

  // ============ NAVEGACIÓN ============

  onBackToHome(): void {
    this.trackUserInteraction('back_to_home_click');
    this.router.navigate(['/']).catch(err => {
      console.error('Error navegando al inicio:', err);
    });
  }

  onGoToRegister(): void {
    this.trackUserInteraction('go_to_register_click');
    
    // Preservar email si ya fue ingresado
    const email = this.credentials().email;
    const queryParams = email ? { email } : {};
    
    this.router.navigate(['/auth/register'], { queryParams }).catch(err => {
      console.error('Error navegando a registro:', err);
    });
  }

  onForgotPassword(): void {
    this.trackUserInteraction('forgot_password_click');
    
    // Preservar email si ya fue ingresado
    const email = this.credentials().email;
    const queryParams = email ? { email } : {};
    
    this.router.navigate(['/auth/forgot-password'], { queryParams }).catch(err => {
      console.error('Error navegando a recuperar contraseña:', err);
    });
  }

  // ============ UTILIDADES ============

  isFormValid(): boolean {
    const creds = this.credentials();
    return !!creds.email && 
           !!creds.password && 
           !this.emailError() && 
           !this.passwordError();
  }

  private clearErrors(): void {
    this.emailError.set('');
    this.passwordError.set('');
    this.loginError.set('');
  }

  // ============ ANALYTICS Y TRACKING ============

  private trackUserInteraction(action: string, details: any = {}): void {
    if (!this.isBrowser) return;

    const eventData = {
      action,
      page: 'login',
      timestamp: new Date().toISOString(),
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'SSR',
      viewport: this.getViewportSize(),
      ...details
    };

    console.log('📊 Login Analytics Event:', eventData);

    // Integración con servicio de analytics
    // this.analyticsService?.track(action, eventData);
  }

  private getViewportSize(): string {
    if (!this.isBrowser) return 'SSR';
    
    try {
      return `${window.innerWidth}x${window.innerHeight}`;
    } catch {
      return 'unknown';
    }
  }

  // ============ ACCESIBILIDAD ============

  onKeyDown(event: KeyboardEvent): void {
    // Enter en cualquier campo submite el formulario
    if (event.key === 'Enter' && this.isFormValid() && !this.isLoading()) {
      event.preventDefault();
      this.onSubmit();
    }

    // Escape limpia errores
    if (event.key === 'Escape') {
      this.clearErrors();
    }
  }

  // ============ PERFORMANCE ============

  // Método para precargar recursos críticos
  preloadCriticalResources(): void {
    if (!this.isBrowser) return;

    // Precargar rutas importantes
    const criticalRoutes = ['/dashboard', '/auth/register', '/auth/forgot-password'];
    
    criticalRoutes.forEach(route => {
      // Implementar precarga si es necesario
      console.log(`Precargando ruta: ${route}`);
    });
  }

  // ============ GESTIÓN DE ESTADO AVANZADA ============

  // Autocompletar email si existe en localStorage
  private loadRememberedEmail(): void {
    if (!this.isBrowser) return;

    try {
      const rememberedEmail = localStorage.getItem('arcana_remember_email');
      if (rememberedEmail) {
        this.credentials.update(cred => ({ 
          ...cred, 
          email: rememberedEmail,
          rememberMe: true 
        }));
      }
    } catch (error) {
      console.warn('Error cargando email recordado:', error);
    }
  }

  // Limpiar datos recordados
  private clearRememberedData(): void {
    if (!this.isBrowser) return;

    try {
      localStorage.removeItem('arcana_remember_email');
      localStorage.removeItem('arcana_auth_token');
    } catch (error) {
      console.warn('Error limpiando datos recordados:', error);
    }
  }

  // ============ VALIDACIONES AVANZADAS ============

  // Validación de email en tiempo real con debounce
  private emailValidationTimeout?: ReturnType<typeof setTimeout>;

  onEmailInput(event: any): void {
    const email = event.target.value;
    this.credentials.update(cred => ({ ...cred, email }));

    // Limpiar timeout anterior
    if (this.emailValidationTimeout) {
      clearTimeout(this.emailValidationTimeout);
    }

    // Validar después de 500ms de inactividad
    this.emailValidationTimeout = setTimeout(() => {
      if (this.emailTouched()) {
        this.emailError.set(this.validateEmail(email));
      }
    }, 500);
  }

  // ============ GETTERS COMPUTADOS ============

  get formClasses(): string {
    const classes = ['login-form'];
    
    if (this.isLoading()) {
      classes.push('loading');
    }
    
    if (this.isSubmitted()) {
      classes.push('submitted');
    }

    return classes.join(' ');
  }

  get submitButtonText(): string {
    if (this.isLoading()) {
      return 'Iniciando sesión...';
    }
    return 'Iniciar Sesión';
  }

  // ============ ERROR HANDLING ============

  private handleUnexpectedError(error: any): void {
    console.error('Error inesperado en LoginComponent:', error);
    
    this.loginError.set('Ha ocurrido un error inesperado. Por favor, recarga la página e intenta de nuevo.');
    
    this.trackUserInteraction('unexpected_error', {
      error: error.message || error.toString(),
      stack: error.stack
    });
  }

  // ============ CLEANUP ============

  private cleanup(): void {
    // Limpiar timeouts
    if (this.emailValidationTimeout) {
      clearTimeout(this.emailValidationTimeout);
    }

    // Limpiar estados
    this.isLoading.set(false);
    this.clearErrors();
  }
}


================================================
File: app/features/auth/pages/register/register.component.html
================================================
<p>register works!</p>



================================================
File: app/features/auth/pages/register/register.component.scss
================================================



================================================
File: app/features/auth/pages/register/register.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-register',
  imports: [],
  templateUrl: './register.component.html',
  styleUrl: './register.component.scss'
})
export class RegisterComponent {

}



================================================
File: app/features/welcome/welcome-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';
import { WelcomeComponent } from './welcome/welcome.component';

import { LoginComponent } from '../auth/pages/login/login.component';
import { RegisterComponent } from '../auth/pages/register/register.component';

const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./welcome/welcome.component').then(m => m.WelcomeComponent)
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class WelcomeRoutingModule { }



================================================
File: app/features/welcome/welcome.module.ts
================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';

import { WelcomeRoutingModule } from './welcome-routing.module';import { WelcomeComponent } from './welcome/welcome.component';

@NgModule({
  declarations: [
    
  ],
  imports: [
    CommonModule,
    WelcomeRoutingModule
  ]
})
export class WelcomeModule { }



================================================
File: app/features/welcome/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/welcome/welcome/welcome.component.html
================================================
<div class="min-h-screen w-full font-serif relative" style="background-color: #100820; color: #b4a2fd;">
  <!-- Animated Stars Background -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <!-- Large Stars -->
    <div class="star large" style="top: 5%; left: 15%; animation-delay: 0s;"></div>
    <div class="star large" style="top: 12%; left: 85%; animation-delay: 1s;"></div>
    <div class="star large" style="top: 25%; left: 8%; animation-delay: 2s;"></div>
    <div class="star large" style="top: 35%; left: 92%; animation-delay: 1.5s;"></div>
    <div class="star large" style="top: 55%; left: 12%; animation-delay: 3s;"></div>
    <div class="star large" style="top: 70%; left: 88%; animation-delay: 2.5s;"></div>
    <div class="star large" style="top: 85%; left: 20%; animation-delay: 1.8s;"></div>
    <div class="star large" style="top: 95%; left: 75%; animation-delay: 0.7s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Medium Stars -->
    <div class="star medium" style="top: 8%; left: 45%; animation-delay: 0.5s;"></div>
    <div class="star medium" style="top: 15%; left: 60%; animation-delay: 2.5s;"></div>
    <div class="star medium" style="top: 22%; left: 25%; animation-delay: 1.3s;"></div>
    <div class="star medium" style="top: 30%; left: 70%; animation-delay: 3.2s;"></div>
    <div class="star medium" style="top: 40%; left: 35%; animation-delay: 0.8s;"></div>
    <div class="star medium" style="top: 48%; left: 80%; animation-delay: 2.1s;"></div>
    <div class="star medium" style="top: 58%; left: 25%; animation-delay: 1.6s;"></div>
    <div class="star medium" style="top: 65%; left: 65%; animation-delay: 2.8s;"></div>
    <div class="star medium" style="top: 75%; left: 45%; animation-delay: 0.4s;"></div>
    <div class="star medium" style="top: 82%; left: 55%; animation-delay: 2.3s;"></div>
    <div class="star medium" style="top: 90%; left: 40%; animation-delay: 1.9s;"></div>
    <div class="star medium" style="top: 97%; left: 85%; animation-delay: 3.1s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Small Stars -->
    <div class="star small" style="top: 3%; left: 30%; animation-delay: 1.2s;"></div>
    <div class="star small" style="top: 7%; left: 75%; animation-delay: 2.8s;"></div>
    <div class="star small" style="top: 13%; left: 50%; animation-delay: 0.3s;"></div>
    <div class="star small" style="top: 18%; left: 90%; animation-delay: 1.7s;"></div>
    <div class="star small" style="top: 28%; left: 5%; animation-delay: 2.4s;"></div>
    <div class="star small" style="top: 33%; left: 55%; animation-delay: 0.9s;"></div>
    <div class="star small" style="top: 38%; left: 20%; animation-delay: 2.6s;"></div>
    <div class="star small" style="top: 43%; left: 85%; animation-delay: 1.1s;"></div>
    <div class="star small" style="top: 52%; left: 40%; animation-delay: 2.9s;"></div>
    <div class="star small" style="top: 62%; left: 75%; animation-delay: 0.6s;"></div>
    <div class="star small" style="top: 68%; left: 10%; animation-delay: 2.2s;"></div>
    <div class="star small" style="top: 78%; left: 85%; animation-delay: 1.4s;"></div>
    <div class="star small" style="top: 88%; left: 15%; animation-delay: 2.7s;"></div>
    <div class="star small" style="top: 93%; left: 65%; animation-delay: 0.8s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 35%; animation-delay: 0.7s;"></div>
    <div class="sparkle" style="top: 16%; left: 80%; animation-delay: 1.9s;"></div>
    <div class="sparkle" style="top: 24%; left: 15%; animation-delay: 2.6s;"></div>
    <div class="sparkle" style="top: 32%; left: 75%; animation-delay: 0.4s;"></div>
    <div class="sparkle" style="top: 45%; left: 30%; animation-delay: 1.6s;"></div>
    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 60%; left: 50%; animation-delay: 1.1s;"></div>
    <div class="sparkle" style="top: 72%; left: 25%; animation-delay: 2.9s;"></div>
    <div class="sparkle" style="top: 80%; left: 70%; animation-delay: 0.5s;"></div>
    <div class="sparkle" style="top: 87%; left: 35%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 94%; left: 60%; animation-delay: 2.3s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 35%; animation-delay: 0.7s;"></div>
    <div class="sparkle" style="top: 16%; left: 80%; animation-delay: 1.9s;"></div>
    <div class="sparkle" style="top: 24%; left: 15%; animation-delay: 2.6s;"></div>
    <div class="sparkle" style="top: 32%; left: 75%; animation-delay: 0.4s;"></div>
    <div class="sparkle" style="top: 45%; left: 30%; animation-delay: 1.6s;"></div>
    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 60%; left: 50%; animation-delay: 1.1s;"></div>
    <div class="sparkle" style="top: 72%; left: 25%; animation-delay: 2.9s;"></div>
    <div class="sparkle" style="top: 80%; left: 70%; animation-delay: 0.5s;"></div>
    <div class="sparkle" style="top: 87%; left: 35%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 94%; left: 60%; animation-delay: 2.3s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 35%; animation-delay: 0.7s;"></div>
    <div class="sparkle" style="top: 16%; left: 80%; animation-delay: 1.9s;"></div>
    <div class="sparkle" style="top: 24%; left: 15%; animation-delay: 2.6s;"></div>
    <div class="sparkle" style="top: 32%; left: 75%; animation-delay: 0.4s;"></div>
    <div class="sparkle" style="top: 45%; left: 30%; animation-delay: 1.6s;"></div>
    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 60%; left: 50%; animation-delay: 1.1s;"></div>
    <div class="sparkle" style="top: 72%; left: 25%; animation-delay: 2.9s;"></div>
    <div class="sparkle" style="top: 80%; left: 70%; animation-delay: 0.5s;"></div>
    <div class="sparkle" style="top: 87%; left: 35%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 94%; left: 60%; animation-delay: 2.3s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 35%; animation-delay: 0.7s;"></div>
    <div class="sparkle" style="top: 16%; left: 80%; animation-delay: 1.9s;"></div>
    <div class="sparkle" style="top: 24%; left: 15%; animation-delay: 2.6s;"></div>
    <div class="sparkle" style="top: 32%; left: 75%; animation-delay: 0.4s;"></div>
    <div class="sparkle" style="top: 45%; left: 30%; animation-delay: 1.6s;"></div>
    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 60%; left: 50%; animation-delay: 1.1s;"></div>
    <div class="sparkle" style="top: 72%; left: 25%; animation-delay: 2.9s;"></div>
    <div class="sparkle" style="top: 80%; left: 70%; animation-delay: 0.5s;"></div>
    <div class="sparkle" style="top: 87%; left: 35%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 94%; left: 60%; animation-delay: 2.3s;"></div>
    
    <!-- Sparkles -->
    <div class="sparkle" style="top: 10%; left: 35%; animation-delay: 0.7s;"></div>
    <div class="sparkle" style="top: 16%; left: 80%; animation-delay: 1.9s;"></div>
    <div class="sparkle" style="top: 24%; left: 15%; animation-delay: 2.6s;"></div>
    <div class="sparkle" style="top: 32%; left: 75%; animation-delay: 0.4s;"></div>
    <div class="sparkle" style="top: 45%; left: 30%; animation-delay: 1.6s;"></div>
    <div class="sparkle" style="top: 50%; left: 90%; animation-delay: 2.4s;"></div>
    <div class="sparkle" style="top: 60%; left: 50%; animation-delay: 1.1s;"></div>
    <div class="sparkle" style="top: 72%; left: 25%; animation-delay: 2.9s;"></div>
    <div class="sparkle" style="top: 80%; left: 70%; animation-delay: 0.5s;"></div>
    <div class="sparkle" style="top: 87%; left: 35%; animation-delay: 1.8s;"></div>
    <div class="sparkle" style="top: 94%; left: 60%; animation-delay: 2.3s;"></div>
    
    <!-- Floating sparkles -->
    <div class="floating-sparkle" style="top: 20%; left: 65%; animation-delay: 1.3s;"></div>
    <div class="floating-sparkle" style="top: 35%; left: 40%; animation-delay: 2.7s;"></div>
    <div class="floating-sparkle" style="top: 55%; left: 80%; animation-delay: 0.9s;"></div>
    <div class="floating-sparkle" style="top: 75%; left: 15%; animation-delay: 2.1s;"></div>
    <div class="floating-sparkle" style="top: 85%; left: 90%; animation-delay: 1.5s;"></div>
    <div class="floating-sparkle" style="top: 20%; left: 65%; animation-delay: 1.3s;"></div>
    <div class="floating-sparkle" style="top: 35%; left: 40%; animation-delay: 2.7s;"></div>
    <div class="floating-sparkle" style="top: 55%; left: 80%; animation-delay: 0.9s;"></div>
    <div class="floating-sparkle" style="top: 75%; left: 15%; animation-delay: 2.1s;"></div>
    <div class="floating-sparkle" style="top: 85%; left: 90%; animation-delay: 1.5s;"></div>
    <div class="floating-sparkle" style="top: 20%; left: 65%; animation-delay: 1.3s;"></div>
    <div class="floating-sparkle" style="top: 35%; left: 40%; animation-delay: 2.7s;"></div>
    <div class="floating-sparkle" style="top: 55%; left: 80%; animation-delay: 0.9s;"></div>
    <div class="floating-sparkle" style="top: 75%; left: 15%; animation-delay: 2.1s;"></div>
    <div class="floating-sparkle" style="top: 85%; left: 90%; animation-delay: 1.5s;"></div>
    <div class="floating-sparkle" style="top: 20%; left: 65%; animation-delay: 1.3s;"></div>
    <div class="floating-sparkle" style="top: 35%; left: 40%; animation-delay: 2.7s;"></div>
    <div class="floating-sparkle" style="top: 55%; left: 80%; animation-delay: 0.9s;"></div>
    <div class="floating-sparkle" style="top: 75%; left: 15%; animation-delay: 2.1s;"></div>
    <div class="floating-sparkle" style="top: 85%; left: 90%; animation-delay: 1.5s;"></div>
  </div>

<!-- Content with higher z-index -->
  <div class="relative z-10">
    <!-- Navbar Mejorado con Autenticación -->
    <nav class="navbar-container px-4 lg:px-8 py-4 lg:py-6 border-b" style="border-color: #3a3a5a;">
  
  <!-- Enlaces de navegación (izquierda) -->
  <div class="navbar-left">
    <div class="flex flex-wrap justify-start space-x-4 lg:space-x-8">
      <a 
        class="hover:text-white hover:underline transition-all duration-300 cursor-pointer text-sm lg:text-base"
        style="color: #b4a2fd;"
        (click)="onNavigate('/daily-guidance')"
      >
        Guía Diaria
      </a>
      <a 
        class="hover:text-white hover:underline transition-all duration-300 cursor-pointer text-sm lg:text-base"
        style="color: #b4a2fd;"
        (click)="onNavigate('/community')"
      >
        Comunidad
      </a>
      <a 
        class="hover:text-white hover:underline transition-all duration-300 cursor-pointer flex items-center text-sm lg:text-base"
        style="color: #b4a2fd;"
        (click)="onNavigate('/courses')"
      >
        Cursos
      </a>
    </div>
  </div>
  
  <!-- Logo central (perfectamente centrado) -->
  <div class="navbar-center">
    <div class="logo-container">
      <img 
        src="../../../../assets/logo/logo-arcana.png" 
        alt="Arcana Logo" 
        class="logo-image"
      >
    </div>
  </div>
  
  <!-- Botones de autenticación y membresías (derecha) -->
  <div class="navbar-right">
    <div class="flex flex-wrap justify-end items-center space-x-2 lg:space-x-4">
      <!-- Botón Ver Membresías (discreto) -->
      <a 
        class="text-sm lg:text-base px-3 py-2 hover:text-white hover:bg-opacity-20 hover:bg-purple-500 rounded-md transition-all duration-300 cursor-pointer flex items-center"
        style="color: #b4a2fd;"
        (click)="onNavigate('/membership')"
      >
        <i class="fas fa-crown mr-1 text-xs"></i>
        Membresías
      </a>
      
      <!-- Separador -->
      <div class="hidden lg:block w-px h-6 bg-purple-400 opacity-30"></div>
      
      <!-- Botón Iniciar Sesión (estilo minimalista) -->
      <button 
        class="text-sm lg:text-base px-4 py-2 hover:text-white transition-all duration-300 cursor-pointer auth-button-secondary"
        style="color: #b4a2fd;"
        (click)="onLogin()"
      >
        Iniciar Sesión
      </button>
      
      <!-- Botón Crear Cuenta (destacado pero sutil) -->
      <button 
        class="text-sm lg:text-base px-4 py-2 border border-purple-400 hover:bg-purple-500 hover:bg-opacity-20 rounded-md transition-all duration-300 cursor-pointer auth-button-primary"
        style="color: #b4a2fd; border-color: #b4a2fd;"
        (click)="onRegister()"
      >
        Crear Cuenta
      </button>
    </div>
  </div>
  
</nav>

    <!-- Hero Section con CTAs Mejorados -->
    <section class="flex flex-col items-center text-center px-4 lg:px-8 py-8 lg:py-16 max-w-6xl mx-auto">
      <div class="mb-6 lg:mb-10 relative crystal-container">
        <div class="text-6xl lg:text-8xl crystal-float main-crystal">🔮</div>
        <div class="absolute -top-2 -right-2 text-2xl floating-sparkle-hero">✨</div>
      </div>
      
      <h1 class="text-4xl lg:text-6xl xl:text-7xl leading-tight font-normal max-w-4xl mb-6 lg:mb-8 text-glow" style="color: #b4a2fd;">
        <span class="inline-block align-middle mr-2 text-5xl lg:text-7xl moon-glow">☽</span>
        Despierta tu
        <em class="italic font-normal"> sabiduría interior</em>
        con la plataforma más completa de
        <br class="hidden sm:block"/>
        <em class="italic font-normal">esoterismo</em>
        y crecimiento espiritual
        <span class="inline-block align-middle ml-2 text-5xl lg:text-7xl star-glow">✦</span>
      </h1>
      
      <p class="text-sm lg:text-lg xl:text-xl leading-relaxed max-w-3xl font-light mb-8" style="color: #b4a2fd;">
        {{ welcomeData().description }}
      </p>

      <!-- CTAs Principales con opciones de registro -->
      <div class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6">
        <button 
          class="px-8 py-4 font-semibold text-lg transition-all duration-300 hover:scale-105 primary-cta cursor-pointer"
          (click)="onStartFreeTrial()"
        >
          ✨ Comenzar Prueba Gratuita
        </button>
        
        <button 
          class="px-8 py-4 border-2 font-medium text-lg hover:bg-opacity-20 transition-all duration-300 secondary-cta cursor-pointer"
          (click)="onViewPlans()"
        >
          Ver Planes Premium
        </button>
      </div>

      <!-- Accesos rápidos para usuarios nuevos -->
      <div class="flex flex-col sm:flex-row items-center gap-4 text-sm mb-8 quick-access" style="color: #b4a2fd;">
        <span class="opacity-70">¿Ya tienes cuenta?</span>
        <button 
          class="underline hover:text-white transition-all duration-300 cursor-pointer"
          (click)="onLogin()"
        >
          Ingresa aquí →
        </button>
        <span class="hidden sm:inline opacity-40">|</span>
        <span class="opacity-70">¿Necesitas más información?</span>
        <button 
          class="underline hover:text-white transition-all duration-300 cursor-pointer"
          (click)="onViewPlans()"
        >
          Ver todas las membresías
        </button>
      </div>

      <!-- Trust Indicators -->
      <div class="flex flex-wrap justify-center items-center gap-8 text-sm trust-indicators" style="color: #b4a2fd;">
        <div class="flex items-center opacity-80">
          <i class="fas fa-users w-4 h-4 mr-2"></i>
          <span>+{{ trustIndicators().members }} miembros activos</span>
        </div>
        <div class="flex items-center opacity-80">
          <i class="fas fa-star w-4 h-4 mr-2"></i>
          <span>{{ trustIndicators().rating }}/5 estrellas</span>
        </div>
        <div class="flex items-center opacity-80">
          <i class="fas fa-shield-alt w-4 h-4 mr-2"></i>
          <span>Certificado por maestros</span>
        </div>
      </div>
    </section>

    <!-- Services Tabs -->
    <div class="grid grid-cols-2 lg:grid-cols-4 text-sm lg:text-base border-t border-b" style="border-color: #3a3a5a; color: #b4a2fd;">
      <button 
        *ngFor="let service of services(); let i = index"
        class="border-r py-4 lg:py-6 px-3 lg:px-6 flex flex-col justify-center items-center hover:text-white transition-all duration-300 font-medium cursor-pointer service-tab"
        [class.active]="activeService() === service.id"
        [class.last]="i === services().length - 1"
        [style.backgroundColor]="activeService() === service.id ? '#1a1760' : 'transparent'"
        [style.border-color]="'#3a3a5a'"
        [style.color]="activeService() === service.id ? 'white' : '#b4a2fd'"
        (click)="setActiveService(service.id)"
      >
        <span class="text-2xl mb-2 service-icon">{{ service.icon }}</span>
        <span class="text-center">{{ service.name }}</span>
      </button>
    </div>

    <!-- Services Content -->
    <section class="grid grid-cols-1 lg:grid-cols-2 p-6 lg:p-12 gap-6 lg:gap-12 min-h-[50vh]" style="background-color: #b4a2fd; color: #100820;">
      <!-- Left Column - Service Details -->
      <div class="lg:border-r lg:pr-8 xl:pr-12" style="border-color: rgba(16, 8, 32, 0.2);">
        <h2 class="text-3xl lg:text-4xl xl:text-5xl font-normal mb-6 lg:mb-8" style="color: #100820;">
          {{ getActiveService().name }}
        </h2>
        
        <ul class="list-disc list-inside text-base lg:text-lg xl:text-xl space-y-2 lg:space-y-3 mb-8 lg:mb-12 leading-relaxed" style="color: #100820;">
          <li *ngFor="let feature of getActiveService().features">{{ feature }}</li>
        </ul>
        
        <div class="flex justify-center">
          <div class="text-8xl opacity-50 service-display-icon">
            {{ getActiveService().icon }}
          </div>
        </div>
      </div>

      <!-- Right Column - Premium Benefits con CTA de Registro -->
      <div class="lg:pl-8 xl:pl-12">
        <h2 class="text-3xl lg:text-4xl xl:text-5xl font-normal mb-6 lg:mb-8" style="color: #100820;">
          Membresía Premium
        </h2>
        
        <div class="flex justify-center mb-6 lg:mb-8">
          <i class="fas fa-crown text-6xl lg:text-8xl opacity-60" style="color: #100820;"></i>
        </div>
        
        <ul class="list-disc list-inside text-base lg:text-lg xl:text-xl space-y-2 lg:space-y-3 mb-6 lg:mb-8 leading-relaxed" style="color: #100820;">
          <li *ngFor="let benefit of premiumBenefits()">{{ benefit }}</li>
        </ul>
        
        <div class="space-y-4 premium-cta-section">
          <div class="text-center">
            <div class="text-4xl font-bold mb-2">{{ pricing().amount }}<span class="text-lg opacity-70">{{ pricing().period }}</span></div>
            
          </div>
          
          <button 
            class="w-full text-base lg:text-lg xl:text-xl font-normal bg-transparent border-2 py-3 cursor-pointer transition-all duration-300 hover:translate-y-1 premium-cta-button"
            style="color: #100820; border-color: #100820;"
            type="button"
            (click)="onStartPremium()"
          >
            <strong class="font-bold">Comenzar Premium</strong> ———&gt;
          </button>

          <!-- Opción para usuarios sin cuenta -->
          <div class="text-center">
            <p class="text-sm opacity-70 mb-2">¿No tienes cuenta aún?</p>
            <button 
              class="text-sm underline hover:no-underline transition-all duration-300"
              (click)="onRegister()"
            >
              Regístrate gratis primero
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Testimonials -->
    <section class="py-20 px-6">
      <div class="max-w-4xl mx-auto text-center">
        <h2 class="text-4xl md:text-5xl font-normal mb-16" style="color: #b4a2fd;">
          Lo Que Dicen Nuestros Miembros
        </h2>
        
        <div class="relative overflow-hidden rounded-2xl p-8 border testimonials-container" style="background-color: rgba(180, 162, 253, 0.1); border-color: #3a3a5a;">
          <div 
            class="flex transition-transform duration-500 ease-in-out testimonials-slider"
            [style.transform]="'translateX(-' + (currentTestimonial() * 100) + '%)'"
          >
            <div 
              *ngFor="let testimonial of testimonials(); let i = index; trackBy: trackByTestimonialIndex" 
              class="w-full flex-shrink-0 px-4 testimonial-slide"
            >
              <div class="flex justify-center mb-4">
                <i 
                  *ngFor="let star of getStarArray(testimonial.stars)" 
                  class="fas fa-star w-6 h-6" 
                  style="color: #b4a2fd;"
                ></i>
              </div>
              <p class="text-xl mb-6 leading-relaxed italic" style="color: #b4a2fd;">
                "{{ testimonial.text }}"
              </p>
              <div>
                <p class="font-semibold text-lg" style="color: #b4a2fd;">{{ testimonial.name }}</p>
                <p class="opacity-70" style="color: #b4a2fd;">{{ testimonial.specialty }}</p>
              </div>
            </div>
          </div>
          
          <div class="flex justify-center mt-8 space-x-2 testimonial-indicators">
            <button
              *ngFor="let testimonial of testimonials(); let i = index"
              class="w-3 h-3 rounded-full transition-all duration-300 testimonial-dot"
              [style.backgroundColor]="i === currentTestimonial() ? '#b4a2fd' : '#3a3a5a'"
              (click)="setCurrentTestimonial(i)"
            ></button>
          </div>
        </div>
      </div>
    </section>

    <!-- Final CTA Mejorado con Múltiples Opciones -->
    <section class="py-20 px-6 border-t final-cta-section" style="border-color: #3a3a5a;">
      <div class="max-w-4xl mx-auto text-center">
        <i class="fas fa-moon text-6xl mb-8 final-moon-icon" style="color: #b4a2fd;"></i>
        <h2 class="text-4xl md:text-5xl font-normal mb-6" style="color: #b4a2fd;">
          Tu Despertar Espiritual Te Espera
        </h2>
        <p class="text-xl leading-relaxed mb-8 opacity-80" style="color: #b4a2fd;">
          {{ finalCTA().description }}
        </p>
        
        <!-- CTAs principales -->
        <div class="flex flex-col sm:flex-row gap-6 justify-center items-center mb-8">
          <button 
            class="px-8 py-4 text-lg font-semibold transition-all duration-300 hover:scale-105 final-cta-button "
            style="background-color: #b4a2fd; color: #100820; cursor: pointer;"
            (click)="onStartTransformation()"
          >
            {{ finalCTA().buttonText }}
          </button>
          
          <!-- Botón alternativo para usuarios existentes -->
          <button 
            class="px-8 py-4 border-2 text-lg font-medium hover:bg-opacity-20 transition-all duration-300"
            style="color: #b4a2fd; border-color: #b4a2fd; cursor: pointer;"
            (click)="onLogin()"
          >
            Ya soy miembro
          </button>
        </div>

        <!-- Opciones adicionales -->
        <div class="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm" style="color: #b4a2fd;">
          <div class="text-center">
            <p class="opacity-70 mb-2">¿Quieres explorar primero?</p>
            <button 
              class="underline hover:text-white transition-all duration-300"
              (click)="onViewDemo()"
            >
              Ver contenido gratuito
            </button>
          </div>
          
          <div class="text-center">
            <p class="opacity-70 mb-2">¿Tienes preguntas?</p>
            <button 
              class="underline hover:text-white transition-all duration-300"
              (click)="onContactSupport()"
            >
              Hablar con un experto
            </button>
          </div>
          
          <div class="text-center">
            <p class="opacity-70 mb-2">¿Necesitas comparar?</p>
            <button 
              class="underline hover:text-white transition-all duration-300"
              (click)="onViewPlans()"
            >
              Ver todos los planes
            </button>
          </div>
        </div>
      </div>
    </section>
  </div>
</div>


================================================
File: app/features/welcome/welcome/welcome.component.scss
================================================
// Variables complementarias
:root {
  --font-serif: "Playfair Display", serif;
  --star-color: #b4a2fd;
  --sparkle-color: rgba(180, 162, 253, 0.8);
  --background-color: #100820;
  --border-color: #3a3a5a;
  --text-color: #b4a2fd;
  --inverted-bg: #b4a2fd;
  --inverted-text: #100820;
}

// Estilos base globales para el componente
.welcome-container {
  font-family: var(--font-serif);
}

// ========== ANIMACIONES DE ESTRELLAS ==========

// Keyframes para las animaciones
@keyframes twinkle {
  0%, 100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes twinkle-slow {
  0%, 100% {
    opacity: 0.2;
    transform: scale(0.8);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.1);
  }
}

@keyframes sparkle {
  0%, 100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%, 100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%, 100% {
    text-shadow: 0 0 5px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.6), 0 0 30px rgba(180, 162, 253, 0.4);
  }
}

@keyframes crystal-float {
  0%, 100% {
    transform: translateY(0px) rotate(0deg);
  }
  25% {
    transform: translateY(-8px) rotate(1deg);
  }
  75% {
    transform: translateY(4px) rotate(-1deg);
  }
}

@keyframes subtle-drift {
  0% {
    transform: translateX(0px) translateY(0px);
  }
  25% {
    transform: translateX(3px) translateY(-4px);
  }
  50% {
    transform: translateX(-2px) translateY(-6px);
  }
  75% {
    transform: translateX(-4px) translateY(-2px);
  }
  100% {
    transform: translateX(0px) translateY(0px);
  }
}

@keyframes gentle-float {
  0%, 100% {
    transform: translateY(0px) translateX(0px);
  }
  33% {
    transform: translateY(-5px) translateX(2px);
  }
  66% {
    transform: translateY(3px) translateX(-1px);
  }
}

@keyframes mystical-pulse {
  0%, 100% {
    opacity: 0.7;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.1);
  }
}

@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

// ========== ESTILOS DE ESTRELLAS ==========

.star {
  position: absolute;
  background: var(--star-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);
  
  &::before {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--star-color);
    border-radius: 50%;
    opacity: 0.7;
  }
  
  &::after {
    content: '';
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(45deg, transparent 30%, var(--star-color) 50%, transparent 70%);
    opacity: 0.5;
  }
}

.star.large {
  width: 3px;
  height: 3px;
  animation: twinkle 4s ease-in-out infinite, subtle-drift 12s ease-in-out infinite;
  
  &::before {
    width: 12px;
    height: 1px;
  }
  
  &::after {
    width: 1px;
    height: 12px;
  }
}

.star.medium {
  width: 2px;
  height: 2px;
  animation: twinkle 3s ease-in-out infinite, gentle-float 10s ease-in-out infinite;
  
  &::before {
    width: 8px;
    height: 1px;
  }
  
  &::after {
    width: 1px;
    height: 8px;
  }
}

.star.small {
  width: 1px;
  height: 1px;
  animation: twinkle-slow 5s ease-in-out infinite, subtle-drift 15s ease-in-out infinite;
  
  &::before {
    width: 6px;
    height: 0.5px;
  }
  
  &::after {
    width: 0.5px;
    height: 6px;
  }
}

// ========== SPARKLES ==========

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: var(--sparkle-color);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
  box-shadow: 0 0 4px rgba(180, 162, 253, 0.8);
  
  &::before,
  &::after {
    content: '';
    position: absolute;
    background: var(--sparkle-color);
  }
  
  &::before {
    top: -2px;
    left: 50%;
    transform: translateX(-50%);
    width: 0.5px;
    height: 6px;
  }
  
  &::after {
    left: -2px;
    top: 50%;
    transform: translateY(-50%);
    width: 6px;
    height: 0.5px;
  }
}

.floating-sparkle {
  position: absolute;
  width: 1.5px;
  height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
  box-shadow: 0 0 3px rgba(180, 162, 253, 0.6);
  
  &::before,
  &::after {
    content: '';
    position: absolute;
    background: rgba(180, 162, 253, 0.7);
  }
  
  &::before {
    top: -1.5px;
    left: 50%;
    transform: translateX(-50%);
    width: 0.3px;
    height: 4.5px;
  }
  
  &::after {
    left: -1.5px;
    top: 50%;
    transform: translateY(-50%);
    width: 4.5px;
    height: 0.3px;
  }
}

// ========== EFECTOS DE GLOW ==========

.text-glow {
  animation: pulse-glow 4s ease-in-out infinite;
}

.moon-glow {
  animation: pulse-glow 6s ease-in-out infinite;
  filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.5));
}

.star-glow {
  animation: pulse-glow 5s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.4));
}

.crystal-float {
  animation: crystal-float 6s ease-in-out infinite;
  filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.3));
}

.mystical-symbol {
  animation: mystical-pulse 5s ease-in-out infinite;
}

// ========== COMPONENTES ESPECÍFICOS ==========

// Hero Section
.crystal-container {
  position: relative;
  z-index: 1;
}

.main-crystal {
  color: var(--star-color);
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.4));
}

.floating-sparkle-hero {
  color: var(--star-color);
  animation: floating-sparkle 4s ease-in-out infinite;
}

// Buttons
.primary-cta {
  background-color: var(--star-color);
  color: var(--background-color);
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(180, 162, 253, 0.3);
  
  &:hover {
    box-shadow: 0 6px 20px rgba(180, 162, 253, 0.4);
    transform: translateY(-2px);
  }
}

.secondary-cta {
  border-color: var(--star-color);
  color: var(--star-color);
  border-radius: 0.5rem;
  
  &:hover {
    background-color: rgba(180, 162, 253, 0.1);
  }
}

.premium-cta-button {
  border-radius: 0.5rem;
  
  &:hover {
    background-color: rgba(16, 8, 32, 0.1);
  }
}

.final-cta-button {
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(180, 162, 253, 0.3);
  
  &:hover {
    box-shadow: 0 6px 20px rgba(180, 162, 253, 0.4);
  }
}

// Trust Indicators
.trust-indicators {
  animation: fade-in-up 1s ease-out 0.5s both;
}

// Services
.service-tab {
  position: relative;
  transition: all 0.3s ease;
  
  &:hover {
    background-color: rgba(180, 162, 253, 0.1) !important;
  }
  
  &.active {
    position: relative;
    
    &::before {
      content: '';
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(90deg, transparent, var(--star-color), transparent);
    }
  }
  
  &.last {
    @media (min-width: 1024px) {
      border-right: none !important;
    }
  }
}

.service-icon {
  transition: transform 0.3s ease;
  
  .service-tab:hover & {
    transform: scale(1.2);
  }
}

.service-display-icon {
  transition: transform 0.3s ease;
  
  &:hover {
    transform: scale(1.1);
  }
}

// Premium Section
.premium-cta-section {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(90deg, transparent, var(--inverted-text), transparent);
  }
}

// Testimonials
.testimonials-container {
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
}

.testimonials-slider {
  will-change: transform;
}

.testimonial-slide {
  animation: fade-in-up 0.6s ease-out;
}

.testimonial-dot {
  cursor: pointer;
  
  &:hover {
    transform: scale(1.2);
  }
}

.testimonial-indicators {
  z-index: 10;
  position: relative;
}

// Final CTA
.final-cta-section {
  position: relative;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 1px;
    background: linear-gradient(90deg, transparent, var(--star-color), transparent);
  }
}

.final-moon-icon {
  animation: mystical-pulse 4s ease-in-out infinite;
}

// ========== RESPONSIVE Y PERFORMANCE ==========

// Optimizaciones de performance
* {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

// GPU acceleration para animaciones
.star,
.sparkle,
.floating-sparkle,
.crystal-float,
.text-glow,
.moon-glow,
.star-glow,
.mystical-symbol,
.main-crystal,
.floating-sparkle-hero,
.final-moon-icon {
  will-change: transform, opacity;
  transform: translateZ(0);
}

// Reducir densidad de estrellas en móviles para mejor performance
@media (max-width: 768px) {
  .star {
    animation-duration: 5s;
  }
  
  .sparkle {
    animation-duration: 7s;
  }
  
  .floating-sparkle {
    animation-duration: 9s;
  }
  
  .crystal-float {
    animation-duration: 8s;
  }
  
  // Ocultar algunas estrellas en móvil para mejor performance
  .star:nth-child(3n),
  .sparkle:nth-child(2n) {
    display: none;
  }
  
  // Ajustar tamaños en móvil
  .main-crystal {
    font-size: 4rem;
  }
  
  .service-tab {
    padding: 1rem 0.5rem;
  }
  
  .premium-cta-section {
    margin-top: 2rem;
  }
}

// Accesibilidad mejorada
@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .floating-sparkle,
  .crystal-float,
  .text-glow,
  .moon-glow,
  .star-glow,
  .mystical-symbol,
  .main-crystal,
  .floating-sparkle-hero,
  .final-moon-icon {
    animation: none !important;
  }
  
  .star {
    opacity: 0.6;
  }
  
  .sparkle,
  .floating-sparkle {
    opacity: 0.4;
  }
  
  // Mantener transiciones suaves para interacciones
  .primary-cta,
  .secondary-cta,
  .service-tab,
  .testimonial-dot {
    transition: all 0.3s ease;
  }
}

// Estados de focus mejorados
button:focus-visible,
a:focus-visible {
  outline: 2px solid var(--star-color);
  outline-offset: 2px;
  border-radius: 4px;
  box-shadow: 0 0 0 4px rgba(180, 162, 253, 0.2);
}

// ========== MEJORAS VISUALES PARA TODO EL FONDO ==========

// Efecto de profundidad sutil para el fondo principal
.welcome-container {
  background: 
    radial-gradient(ellipse at 10% 20%, rgba(180, 162, 253, 0.03) 0%, transparent 50%),
    radial-gradient(ellipse at 80% 80%, rgba(180, 162, 253, 0.02) 0%, transparent 50%),
    radial-gradient(ellipse at 40% 40%, rgba(180, 162, 253, 0.04) 0%, transparent 50%);
}

// Variaciones en las animaciones para mayor naturalidad
.star:nth-child(odd) {
  animation-direction: reverse;
}

.sparkle:nth-child(3n) {
  animation-delay: 1.5s;
}

.floating-sparkle:nth-child(even) {
  animation-direction: alternate;
}

// Estilos para pantallas muy grandes
@media (min-width: 1536px) {
  .star.large {
    width: 4px;
    height: 4px;
    
    &::before {
      width: 14px;
      height: 1.2px;
    }
    
    &::after {
      width: 1.2px;
      height: 14px;
    }
  }
  
  .star.medium {
    width: 3px;
    height: 3px;
    
    &::before {
      width: 10px;
      height: 1px;
    }
    
    &::after {
      width: 1px;
      height: 10px;
    }
  }
  
  .sparkle {
    width: 3px;
    height: 3px;
  }
  
  .floating-sparkle {
    width: 2px;
    height: 2px;
  }
  
  .main-crystal {
    font-size: 6rem;
  }
}

// ========== GLASS EFFECT Y UTILIDADES ==========

.glass-effect {
  background: rgba(180, 162, 253, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(180, 162, 253, 0.2);
}

.magical-border {
  position: relative;
  overflow: hidden;
  
  &::before {
    content: '';
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(90deg, transparent, rgba(180, 162, 253, 0.4), transparent);
    transition: left 0.5s;
  }
  
  &:hover::before {
    left: 100%;
  }
}

// ========== LOADING Y ESTADOS ==========

.loading-shimmer {
  background: linear-gradient(90deg, 
    rgba(180, 162, 253, 0.1) 0%, 
    rgba(180, 162, 253, 0.3) 50%, 
    rgba(180, 162, 253, 0.1) 100%);
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

.navbar-container {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  align-items: center;
  gap: 1rem;
  position: relative;
  width: 100%;
}

.navbar-left {
  justify-self: start;
  display: flex;
  align-items: center;
}

.navbar-center {
  justify-self: center;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  z-index: 10;
}

.navbar-right {
  justify-self: end;
  display: flex;
  align-items: center;
}

.logo-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem;
  transition: all 0.3s ease;
}

.logo-image {
  height: 80px;
  width: auto;
  max-width: 120px;
  object-fit: contain;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.3));
}

.logo-image:hover {
  transform: scale(1.05);
  filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.5));
}

/* ========== RESPONSIVE DESIGN ========== */

/* Tablet y móvil grande */
@media (max-width: 1024px) {
  .navbar-container {
    grid-template-columns: 1fr auto 1fr;
    gap: 0.5rem;
  }
  
  .navbar-left,
  .navbar-right {
    font-size: 0.875rem;
  }
  
  .logo-image {
    height: 35px;
    max-width: 100px;
  }
}

/* Móvil */
@media (max-width: 768px) {
  .navbar-container {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto;
    gap: 1rem;
    text-align: center;
  }
  
  .navbar-left,
  .navbar-center,
  .navbar-right {
    justify-self: center;
    grid-column: 1;
  }
  
  .navbar-center {
    order: 1;
    margin-bottom: 0.5rem;
  }
  
  .navbar-left {
    order: 2;
  }
  
  .navbar-right {
    order: 3;
    margin-top: 0.5rem;
  }
  
  .navbar-left > div {
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .navbar-right > div {
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }
  
  .logo-image {
    height: 32px;
    max-width: 90px;
  }
}

/* Móvil pequeño */
@media (max-width: 480px) {
  .navbar-container {
    padding: 1rem 0.5rem;
    gap: 0.75rem;
  }
  
  .navbar-left > div,
  .navbar-right > div {
    gap: 0.25rem;
  }
  
  .navbar-left a,
  .navbar-right a,
  .navbar-right button {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
  }
  
  .logo-image {
    height: 28px;
    max-width: 80px;
  }
}

/* ========== VARIANTE ALTERNATIVA (Opción 2) ========== */

/* Si prefieres una versión más tradicional con flexbox: */
.navbar-container-alt {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  width: 100%;
}

.navbar-center-alt {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
}

.navbar-left-alt,
.navbar-right-alt {
  flex: 1;
  display: flex;
  align-items: center;
}

.navbar-left-alt {
  justify-content: flex-start;
}

.navbar-right-alt {
  justify-content: flex-end;
}

/* ========== EFECTOS ADICIONALES ========== */

/* Efecto de glow en el logo */
@keyframes logo-glow {
  0%, 100% {
    filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.3));
  }
  50% {
    filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.6));
  }
}

.logo-image.animate-glow {
  animation: logo-glow 4s ease-in-out infinite;
}

/* Efecto de aparición suave */
.navbar-container {
  animation: fadeInDown 0.8s ease-out;
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

/* Estado de scroll (opcional) */
.navbar-container.scrolled {
  backdrop-filter: blur(10px);
  background-color: rgba(16, 8, 32, 0.9);
  border-bottom: 1px solid rgba(180, 162, 253, 0.2);
}

/* Indicador activo para enlaces */
.nav-link-active {
  color: #ffffff !important;
  position: relative;
}

.nav-link-active::after {
  content: '';
  position: absolute;
  bottom: -4px;
  left: 0;
  right: 0;
  height: 2px;
  background: linear-gradient(90deg, transparent, #b4a2fd, transparent);
  border-radius: 1px;
}


================================================
File: app/features/welcome/welcome/welcome.component.ts
================================================
import {
  Component,
  signal,
  OnInit,
  OnDestroy,
  Inject,
  PLATFORM_ID,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { Router } from '@angular/router';

export interface Service {
  id: string;
  name: string;
  icon: string;
  description: string;
  features: string[];
}

export interface Testimonial {
  name: string;
  text: string;
  stars: number;
  specialty: string;
}

export interface TrustIndicators {
  members: string;
  rating: string;
}

export interface PricingInfo {
  amount: string;
  period: string;
  trial: string;
  cancellation: string;
}

export interface WelcomeData {
  title: string;
  description: string;
}

export interface FinalCTA {
  description: string;
  buttonText: string;
  disclaimer: string;
}

@Component({
  selector: 'app-welcome',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './welcome.component.html',
  styleUrls: ['./welcome.component.scss'],
})
export class WelcomeComponent implements OnInit, OnDestroy {
  // Señales reactivas para el estado del componente
  activeService = signal<string>('tarot');
  currentTestimonial = signal<number>(0);

  // Control de SSR
  private isBrowser: boolean;

  // Datos de los servicios
  services = signal<Service[]>([
    {
      id: 'tarot',
      name: 'Tarot y Arcanos',
      icon: '🔮',
      description: 'Lecturas personalizadas que revelan tu destino',
      features: [
        'Lecturas personalizadas diarias',
        'Interpretación de arcanos mayores y menores',
        'Spreads especializados para diferentes temas',
        'Consultas en vivo con tarotistas certificados',
        'Curso completo de lectura de tarot',
      ],
    },
    {
      id: 'astrology',
      name: 'Astrología Avanzada',
      icon: '✨',
      description: 'Cartas astrales y predicciones cósmicas',
      features: [
        'Carta astral personalizada completa',
        'Predicciones basadas en tránsitos planetarios',
        'Compatibilidad astrológica',
        'Análisis de retorno solar anual',
        'Astrología predictiva y evolutiva',
      ],
    },
    {
      id: 'holistic',
      name: 'Terapias Holísticas',
      icon: '🧘‍♀️',
      description: 'Chakras, frecuencias y sanación energética',
      features: [
        'Equilibrio y sanación de chakras',
        'Terapias con frecuencias sonoras',
        'Meditaciones guiadas especializadas',
        'Trabajo con cristales y gemas',
        'Técnicas de reiki y sanación energética',
      ],
    },
    {
      id: 'lunar',
      name: 'Ciclos Lunares',
      icon: '🌙',
      description: 'Rituales y ceremonias según las fases lunares',
      features: [
        'Calendario lunar personalizado',
        'Rituales para cada fase lunar',
        'Ceremonias de luna llena y nueva',
        'Manifestación lunar guiada',
        'Conexión con ciclos naturales',
      ],
    },
  ]);

  // Testimoniales
  testimonials = signal<Testimonial[]>([
    {
      name: 'María Elena',
      text: 'Arcana cambió mi vida. Las lecturas son increíblemente precisas y el contenido premium vale cada centavo.',
      stars: 5,
      specialty: 'Tarot y Numerología',
    },
    {
      name: 'Carlos Mendoza',
      text: 'La comunidad es increíble y los cursos en vivo me han ayudado a desarrollar mis habilidades intuitivas.',
      stars: 5,
      specialty: 'Astrología y Chakras',
    },
    {
      name: 'Ana Sofía',
      text: 'Los rituales lunares y las meditaciones guiadas son exactamente lo que necesitaba para mi crecimiento espiritual.',
      stars: 5,
      specialty: 'Ceremonias Lunares',
    },
  ]);

  // Indicadores de confianza
  trustIndicators = signal<TrustIndicators>({
    members: '10,000',
    rating: '4.9',
  });

  // Beneficios premium
  premiumBenefits = signal<string[]>([
    'Acceso completo a todos los cursos y talleres',
    'Sesiones en vivo exclusivas con maestros',
    'Comunidad privada de practicantes avanzados',
    'Lecturas personalizadas ilimitadas',
    'Calendario lunar y rituales personalizados',
    'Soporte prioritario y consultas 1:1',
  ]);

  // Información de precios
  pricing = signal<PricingInfo>({
    amount: '$19.99',
    period: '/mes',
    trial: '7 días gratis',
    cancellation: 'Cancela cuando quieras',
  });

  // Datos de bienvenida
  welcomeData = signal<WelcomeData>({
    title: 'Despierta tu sabiduría interior',
    description:
      'Únete a miles de personas que han transformado sus vidas a través del tarot, astrología, terapias holísticas y rituales lunares. Tu despertar espiritual comienza aquí.',
  });

  // CTA final
  finalCTA = signal<FinalCTA>({
    description:
      'Únete a miles de personas que ya han transformado sus vidas con Arcana. Comienza tu viaje místico hoy mismo.',
    buttonText: 'Comenzar Mi Transformación',
    disclaimer: '✨ 7 días gratis • Sin compromiso • Cancela cuando quieras',
  });

  // Intervalos para la gestión de testimoniales
  private testimonialInterval?: ReturnType<typeof setInterval>;

  constructor(private router: Router, @Inject(PLATFORM_ID) platformId: Object) {
    // Verificar si estamos en el browser
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
    // Solo inicializar elementos del browser si estamos en el browser
    if (this.isBrowser) {
      this.startTestimonialRotation();
    }
  }

  ngOnDestroy(): void {
    this.stopTestimonialRotation();
  }

  // ============ MÉTODOS DE SERVICIOS ============

  setActiveService(serviceId: string): void {
    const service = this.services().find((s) => s.id === serviceId);
    if (service) {
      this.activeService.set(serviceId);
      this.trackUserInteraction('service_tab_click', { service: serviceId });
    }
  }

  getActiveService(): Service {
    return (
      this.services().find((s) => s.id === this.activeService()) ||
      this.services()[0]
    );
  }

  // ============ MÉTODOS DE TESTIMONIALES ============

  private startTestimonialRotation(): void {
    // Solo ejecutar en el browser
    if (!this.isBrowser) return;

    this.testimonialInterval = setInterval(() => {
      const nextIndex =
        (this.currentTestimonial() + 1) % this.testimonials().length;
      this.currentTestimonial.set(nextIndex);
    }, 5000); // Cambiar cada 5 segundos
  }

  private stopTestimonialRotation(): void {
    if (this.testimonialInterval) {
      clearInterval(this.testimonialInterval);
      this.testimonialInterval = undefined;
    }
  }

  setCurrentTestimonial(index: number): void {
    if (index >= 0 && index < this.testimonials().length) {
      this.currentTestimonial.set(index);
      this.trackUserInteraction('testimonial_manual_change', { index });

      // Reiniciar el intervalo solo en el browser
      if (this.isBrowser) {
        this.stopTestimonialRotation();
        this.startTestimonialRotation();
      }
    }
  }

  getStarArray(stars: number): number[] {
    return Array(stars).fill(0);
  }

  // ============ MÉTODOS DE NAVEGACIÓN ============

  onNavigate(route: string): void {
    // Prevenir navegación por defecto y usar router
    this.trackUserInteraction('navigation_click', { route });
    this.router.navigate([route]).catch((err) => {
      console.error('Error en navegación:', err);
      this.handleNavigationError(err, route);
    });
  }

  // ============ MÉTODOS DE AUTENTICACIÓN ============

  onLogin(): void {
    console.log('🔐 Navegando a login...');
    this.trackUserInteraction('login_click', { location: 'navbar' });
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error al navegar a login:', err);
      this.handleNavigationError(err, 'login');
    });
  }

  onRegister(): void {
    console.log('📝 Navegando a registro...');
  }

  // ============ MÉTODOS DE CONVERSIÓN ============

  onStartFreeTrial(): void {
    console.log('🎁 Iniciando prueba gratuita...');
  }

  onViewPlans(): void {
    console.log('💎 Viendo planes premium...');
  }

  onStartPremium(): void {
    console.log('👑 Iniciando suscripción premium...');
  }

  onStartTransformation(): void {
    console.log('🦋 Comenzando transformación...');
  }

  // ============ MÉTODOS INFORMATIVOS ============

  onViewDemo(): void {
    console.log('👁️ Viendo contenido gratuito...');
  }

  onContactSupport(): void {
    console.log('💬 Contactando soporte...');
  }

  // ============ TRACKING Y ANALYTICS ============

  trackUserInteraction(action: string, details: any = {}): void {
    // Solo ejecutar analytics en el browser
    if (!this.isBrowser) return;

    const eventData = {
      action,
      page: 'welcome',
      timestamp: new Date().toISOString(),
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'SSR',
      viewport: this.getViewportSize(),
      ...details,
    };

    console.log('📊 Analytics Event:', eventData);

    // Aquí puedes integrar con Google Analytics, etc.
    // if (typeof gtag !== 'undefined') {
    //   gtag('event', action, eventData);
    // }
  }

  private getViewportSize(): string {
    if (!this.isBrowser) return 'SSR';

    try {
      return `${window.innerWidth}x${window.innerHeight}`;
    } catch {
      return 'unknown';
    }
  }

  private handleNavigationError(error: any, context: string): void {
    console.error(`Error de navegación en ${context}:`, error);
    this.trackUserInteraction('navigation_error', {
      context,
      error: error.message || 'Unknown error',
    });
  }

  // ============ MÉTODOS DE UTILIDADES ============

  trackByServiceId(index: number, service: Service): string {
    return service.id;
  }

  trackByTestimonialIndex(index: number, testimonial: Testimonial): string {
    return `${testimonial.name}-${index}`;
  }

  // ============ GETTERS COMPUTADOS ============

  get isServiceActive(): boolean {
    return !!this.activeService();
  }

  get hasTestimonials(): boolean {
    return this.testimonials().length > 0;
  }

  get currentTestimonialData(): Testimonial | null {
    const testimonials = this.testimonials();
    const currentIndex = this.currentTestimonial();
    return testimonials[currentIndex] || null;
  }

  // ============ MÉTODOS DE VALIDACIÓN ============

  private isValidServiceId(serviceId: string): boolean {
    return this.services().some((service) => service.id === serviceId);
  }

  // ============ MÉTODOS DE ESTADO ============

  isFirstTestimonial(): boolean {
    return this.currentTestimonial() === 0;
  }

  isLastTestimonial(): boolean {
    return this.currentTestimonial() === this.testimonials().length - 1;
  }

  // ============ MÉTODOS PARA FUTURAS INTEGRACIONES ============

  async loadDynamicContent(): Promise<void> {
    try {
      console.log('Cargando contenido dinámico...');
      this.trackUserInteraction('dynamic_content_load_start');

      // Aquí irían las llamadas a API
      // const content = await this.contentService.getWelcomeContent();
      // this.welcomeData.set(content);

      this.trackUserInteraction('dynamic_content_load_success');
    } catch (error) {
      console.error('Error cargando contenido dinámico:', error);
      this.trackUserInteraction('dynamic_content_load_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    }
  }

  personalizeContent(userPreferences?: any): void {
    console.log('Personalizando contenido...', userPreferences);
    this.trackUserInteraction('content_personalized', {
      hasPreferences: !!userPreferences,
    });
  }

  // ============ MÉTODOS DE PERFORMANCE ============

  preloadCriticalRoutes(): void {
    if (!this.isBrowser) return;

    const criticalRoutes = [
      '/auth/login',
      '/auth/register',
      '/membership/plans',
    ];

    // Solo precargar si estamos en el browser
    criticalRoutes.forEach((route) => {
      // Implementar precarga si es necesario
      console.log(`Preparando precarga para: ${route}`);
    });
  }

  // ============ MÉTODOS DE ACCESIBILIDAD ============

  announceServiceChange(serviceName: string): void {
    if (!this.isBrowser) return;

    const announcement = `Servicio activo cambiado a ${serviceName}`;
    this.announceToScreenReader(announcement);
  }

  private announceToScreenReader(message: string): void {
    if (!this.isBrowser) return;

    try {
      const announcement = document.createElement('div');
      announcement.setAttribute('aria-live', 'polite');
      announcement.setAttribute('aria-atomic', 'true');
      announcement.className = 'sr-only';
      announcement.textContent = message;

      document.body.appendChild(announcement);

      setTimeout(() => {
        if (document.body.contains(announcement)) {
          document.body.removeChild(announcement);
        }
      }, 1000);
    } catch (error) {
      console.warn('Error en anuncio de accesibilidad:', error);
    }
  }
}




