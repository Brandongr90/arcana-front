Directory structure:
└── src/
    ├── database.sql
    ├── index.html
    ├── main.server.ts
    ├── main.ts
    ├── server.ts
    ├── styles.scss
    ├── app/
    │   ├── app.component.html
    │   ├── app.component.scss
    │   ├── app.component.ts
    │   ├── app.config.server.ts
    │   ├── app.config.ts
    │   ├── app.routes.server.ts
    │   ├── app.routes.ts
    │   ├── .DS_Store
    │   ├── core/
    │   │   ├── guards/
    │   │   │   ├── auth.guard.ts
    │   │   │   └── subscription.guard.ts
    │   │   ├── models/
    │   │   │   ├── api-response.interface.ts
    │   │   │   └── userInterface.ts
    │   │   └── services/
    │   │       ├── api.service.ts
    │   │       ├── auth.service.ts
    │   │       ├── device-detection.service.ts
    │   │       └── storage.service.ts
    │   ├── features/
    │   │   ├── .DS_Store
    │   │   ├── auth/
    │   │   │   ├── auth-routing.module.ts
    │   │   │   ├── auth.module.ts
    │   │   │   ├── auth.service.ts
    │   │   │   ├── .DS_Store
    │   │   │   └── pages/
    │   │   │       ├── .DS_Store
    │   │   │       ├── forgot-password/
    │   │   │       │   ├── forgot-password.component.html
    │   │   │       │   ├── forgot-password.component.scss
    │   │   │       │   └── forgot-password.component.ts
    │   │   │       ├── login/
    │   │   │       │   ├── login.component.html
    │   │   │       │   ├── login.component.scss
    │   │   │       │   └── login.component.ts
    │   │   │       └── register/
    │   │   │           ├── register.component.html
    │   │   │           ├── register.component.scss
    │   │   │           └── register.component.ts
    │   │   ├── camino-magico/
    │   │   │   ├── camino-magico.component.html
    │   │   │   ├── camino-magico.component.scss
    │   │   │   └── camino-magico.component.ts
    │   │   ├── cursos-talleres/
    │   │   │   ├── cursos-talleres.component.html
    │   │   │   ├── cursos-talleres.component.scss
    │   │   │   └── cursos-talleres.component.ts
    │   │   ├── dashboard/
    │   │   │   ├── dashboard.component.html
    │   │   │   ├── dashboard.component.scss
    │   │   │   ├── dashboard.component.ts
    │   │   │   └── dashboard.service.ts
    │   │   ├── en-vivo/
    │   │   │   ├── en-vivo.component.html
    │   │   │   ├── en-vivo.component.scss
    │   │   │   └── en-vivo.component.ts
    │   │   ├── fases-lunares/
    │   │   │   ├── fases-lunares.component.html
    │   │   │   ├── fases-lunares.component.scss
    │   │   │   └── fases-lunares.component.ts
    │   │   ├── holistico-espiritualidad/
    │   │   │   ├── holistico-espiritualidad.component.html
    │   │   │   ├── holistico-espiritualidad.component.scss
    │   │   │   └── holistico-espiritualidad.component.ts
    │   │   ├── home/
    │   │   │   ├── home-interfaces.ts
    │   │   │   ├── home.component.html
    │   │   │   ├── home.component.scss
    │   │   │   ├── home.component.ts
    │   │   │   └── modales/
    │   │   ├── magia-esoterismo/
    │   │   │   ├── magia-esoterismo.component.html
    │   │   │   ├── magia-esoterismo.component.scss
    │   │   │   └── magia-esoterismo.component.ts
    │   │   ├── tarot/
    │   │   │   ├── tarot.component.html
    │   │   │   ├── tarot.component.scss
    │   │   │   └── tarot.component.ts
    │   │   ├── tienda/
    │   │   │   ├── tienda.component.html
    │   │   │   ├── tienda.component.scss
    │   │   │   └── tienda.component.ts
    │   │   └── welcome/
    │   │       ├── welcome-interfaces.ts
    │   │       ├── welcome-routing.module.ts
    │   │       ├── .DS_Store
    │   │       └── welcome/
    │   │           ├── welcome.component.html
    │   │           ├── welcome.component.scss
    │   │           └── welcome.component.ts
    │   └── shared/
    │       ├── .DS_Store
    │       ├── directive/
    │       │   └── click-outside.directive.ts
    │       ├── header/
    │       │   ├── header.component.html
    │       │   ├── header.component.scss
    │       │   └── header.component.ts
    │       ├── mobile-navigation/
    │       │   ├── mobile-navigation.component.html
    │       │   ├── mobile-navigation.component.scss
    │       │   └── mobile-navigation.component.ts
    │       └── sidebar/
    │           ├── sidebar-interfaces.ts
    │           ├── sidebar.component.html
    │           ├── sidebar.component.scss
    │           └── sidebar.component.ts
    └── assets/
        ├── cristales/
        ├── logo/
        └── welcomeImages/

================================================
File: database.sql
================================================
-- ========================================
-- BASE DE DATOS ESOTERISMO - SCRIPT CORREGIDO
-- ========================================

\set ON_ERROR_STOP on

BEGIN;

-- Limpiar si existe PERO sin eliminar extensiones
DROP SCHEMA IF EXISTS public CASCADE;
CREATE SCHEMA public;

-- Crear extensiones DESPUÉS de recrear el schema
CREATE EXTENSION IF NOT EXISTS "uuid-ossp";
CREATE EXTENSION IF NOT EXISTS "pgcrypto";

-- Tipos ENUM
CREATE TYPE tipo_perfil_enum AS ENUM ('esoterico', 'espiritual');
CREATE TYPE signo_zodiacal_enum AS ENUM ('aries', 'tauro', 'geminis', 'cancer', 'leo', 'virgo', 'libra', 'escorpio', 'sagitario', 'capricornio', 'acuario', 'piscis');
CREATE TYPE disciplina_enum AS ENUM ('tarot', 'astrologia', 'numerologia', 'runas', 'cristales', 'meditacion', 'chakras', 'reiki', 'adivinacion', 'brujeria');
CREATE TYPE nivel_enum AS ENUM ('principiante', 'intermedio', 'avanzado');
CREATE TYPE tipo_contenido_enum AS ENUM ('video', 'texto', 'documento', 'audio');
CREATE TYPE estado_progreso_enum AS ENUM ('pendiente', 'en_progreso', 'completada');
CREATE TYPE estado_suscripcion_enum AS ENUM ('activa', 'expirada', 'cancelada', 'pendiente');
CREATE TYPE estado_articulo_enum AS ENUM ('borrador', 'publicado', 'archivado');
CREATE TYPE estado_cita_enum AS ENUM ('pendiente', 'confirmada', 'cancelada', 'completada');
CREATE TYPE metodo_reunion_enum AS ENUM ('zoom', 'jitsi', 'phone', 'presencial');
CREATE TYPE tipo_evento_enum AS ENUM ('webinar', 'reunion', 'retiro', 'taller', 'conferencia');
CREATE TYPE tipo_notificacion_enum AS ENUM ('sistema', 'mensaje', 'evento', 'suscripcion', 'cita');
CREATE TYPE fase_lunar_enum AS ENUM ('nueva', 'creciente', 'llena', 'menguante');
CREATE TYPE categoria_frase_enum AS ENUM ('amor', 'salud', 'dinero', 'espiritual', 'general');
CREATE TYPE tipo_producto_enum AS ENUM ('curso_individual', 'articulo_premium', 'consulta_privada', 'material_extra');
CREATE TYPE dia_semana_enum AS ENUM ('lunes', 'martes', 'miercoles', 'jueves', 'viernes', 'sabado', 'domingo');

-- Roles
CREATE TABLE roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre VARCHAR(50) NOT NULL UNIQUE,
    descripcion TEXT,
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Permisos
CREATE TABLE permisos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre VARCHAR(100) NOT NULL UNIQUE,
    descripcion TEXT,
    modulo VARCHAR(50) NOT NULL,
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Rol-Permisos
CREATE TABLE rol_permisos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    rol_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    permiso_id UUID NOT NULL REFERENCES permisos(id) ON DELETE CASCADE,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(rol_id, permiso_id)
);

-- Usuarios
CREATE TABLE usuarios (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre VARCHAR(100) NOT NULL,
    apellido VARCHAR(100) NOT NULL,
    email VARCHAR(255) NOT NULL UNIQUE,
    password_hash VARCHAR(255) NOT NULL,
    fecha_nacimiento DATE,
    tipo_perfil tipo_perfil_enum NOT NULL,
    signo_zodiacal signo_zodiacal_enum,
    avatar_url VARCHAR(500),
    activo BOOLEAN NOT NULL DEFAULT true,
    email_verificado BOOLEAN NOT NULL DEFAULT false,
    fecha_ultimo_acceso TIMESTAMP WITH TIME ZONE,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Usuario-Roles
CREATE TABLE usuario_roles (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    rol_id UUID NOT NULL REFERENCES roles(id) ON DELETE CASCADE,
    fecha_asignacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    asignado_por UUID REFERENCES usuarios(id),
    UNIQUE(usuario_id, rol_id)
);

-- Disciplinas
CREATE TABLE disciplinas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre disciplina_enum NOT NULL UNIQUE,
    descripcion TEXT,
    icono_url VARCHAR(500),
    color_hex VARCHAR(7),
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Cursos
CREATE TABLE cursos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    disciplina_id UUID NOT NULL REFERENCES disciplinas(id),
    nivel nivel_enum NOT NULL DEFAULT 'principiante',
    tipo_contenido tipo_contenido_enum NOT NULL DEFAULT 'video',
    imagen_portada VARCHAR(500),
    duracion_total_minutos INTEGER DEFAULT 0,
    solo_suscripcion BOOLEAN NOT NULL DEFAULT false,
    precio_individual DECIMAL(10,2) DEFAULT 0.00,
    activo BOOLEAN NOT NULL DEFAULT true,
    orden_visualizacion INTEGER DEFAULT 0,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_precio_positivo CHECK (precio_individual >= 0),
    CONSTRAINT chk_duracion_positiva CHECK (duracion_total_minutos >= 0)
);

-- Lecciones
CREATE TABLE lecciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    curso_id UUID NOT NULL REFERENCES cursos(id) ON DELETE CASCADE,
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    orden INTEGER NOT NULL,
    url_video VARCHAR(500),
    url_documento VARCHAR(500),
    contenido_texto TEXT,
    duracion_minutos INTEGER DEFAULT 0,
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(curso_id, orden),
    CONSTRAINT chk_duracion_leccion_positiva CHECK (duracion_minutos >= 0)
);

-- Progreso Lecciones
CREATE TABLE progreso_lecciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    leccion_id UUID NOT NULL REFERENCES lecciones(id) ON DELETE CASCADE,
    estado estado_progreso_enum NOT NULL DEFAULT 'pendiente',
    porcentaje_completado INTEGER DEFAULT 0,
    tiempo_visto_minutos INTEGER DEFAULT 0,
    fecha_inicio TIMESTAMP WITH TIME ZONE,
    fecha_ultimo_acceso TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_completado TIMESTAMP WITH TIME ZONE,
    UNIQUE(usuario_id, leccion_id),
    CONSTRAINT chk_porcentaje_valido CHECK (porcentaje_completado >= 0 AND porcentaje_completado <= 100)
);

-- Recursos
CREATE TABLE recursos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    tipo tipo_contenido_enum NOT NULL,
    url_recurso VARCHAR(500),
    disciplina_id UUID REFERENCES disciplinas(id),
    etiquetas TEXT[],
    acceso_requerido VARCHAR(50) DEFAULT 'publico',
    tamano_mb DECIMAL(8,2),
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Planes de Suscripción
CREATE TABLE planes_suscripcion (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre_plan VARCHAR(100) NOT NULL,
    descripcion TEXT,
    duracion_meses INTEGER NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    caracteristicas TEXT[],
    activo BOOLEAN NOT NULL DEFAULT true,
    orden_visualizacion INTEGER DEFAULT 0,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_duracion_positiva CHECK (duracion_meses > 0),
    CONSTRAINT chk_precio_plan_positivo CHECK (precio >= 0)
);

-- Usuario Suscripciones
CREATE TABLE usuario_suscripciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    plan_id UUID NOT NULL REFERENCES planes_suscripcion(id),
    fecha_inicio DATE NOT NULL,
    fecha_fin DATE NOT NULL,
    estado estado_suscripcion_enum NOT NULL DEFAULT 'activa',
    precio_pagado DECIMAL(10,2) NOT NULL,
    metodo_pago VARCHAR(50),
    id_transaccion VARCHAR(100),
    renovacion_automatica BOOLEAN DEFAULT false,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_fechas_suscripcion CHECK (fecha_fin > fecha_inicio)
);

-- Productos
CREATE TABLE productos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    nombre VARCHAR(200) NOT NULL,
    descripcion TEXT,
    tipo_producto tipo_producto_enum NOT NULL,
    precio DECIMAL(10,2) NOT NULL,
    disciplina_id UUID REFERENCES disciplinas(id),
    contenido_id UUID,
    imagen_url VARCHAR(500),
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_disponible_desde DATE,
    fecha_disponible_hasta DATE,
    stock INTEGER DEFAULT -1,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_precio_producto_positivo CHECK (precio >= 0)
);

-- Compras
CREATE TABLE compras (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    producto_id UUID NOT NULL REFERENCES productos(id),
    cantidad INTEGER NOT NULL DEFAULT 1,
    precio_unitario DECIMAL(10,2) NOT NULL,
    precio_total DECIMAL(10,2) NOT NULL,
    metodo_pago VARCHAR(50),
    id_transaccion VARCHAR(100),
    estado VARCHAR(20) DEFAULT 'completada',
    fecha_compra TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_cantidad_positiva CHECK (cantidad > 0)
);

-- Brujas
CREATE TABLE brujas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE UNIQUE,
    biografia TEXT,
    especialidades disciplina_enum[],
    tarifa_por_hora DECIMAL(8,2),
    anos_experiencia INTEGER DEFAULT 0,
    certificaciones TEXT[],
    calificacion_promedio DECIMAL(3,2) DEFAULT 0.00,
    total_consultas INTEGER DEFAULT 0,
    disponible_consultas BOOLEAN DEFAULT true,
    fecha_certificacion DATE,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_tarifa_positiva CHECK (tarifa_por_hora >= 0),
    CONSTRAINT chk_calificacion_valida CHECK (calificacion_promedio >= 0 AND calificacion_promedio <= 5)
);

-- Artículos
CREATE TABLE articulos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    bruja_id UUID NOT NULL REFERENCES brujas(id) ON DELETE CASCADE,
    titulo VARCHAR(250) NOT NULL,
    resumen TEXT,
    contenido TEXT NOT NULL,
    disciplina_id UUID REFERENCES disciplinas(id),
    imagen_destacada VARCHAR(500),
    slug VARCHAR(250) UNIQUE,
    estado estado_articulo_enum NOT NULL DEFAULT 'borrador',
    fecha_publicacion TIMESTAMP WITH TIME ZONE,
    visualizaciones INTEGER DEFAULT 0,
    me_gusta INTEGER DEFAULT 0,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Disponibilidad Brujas
CREATE TABLE disponibilidad_brujas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    bruja_id UUID NOT NULL REFERENCES brujas(id) ON DELETE CASCADE,
    dia_semana dia_semana_enum NOT NULL,
    hora_inicio TIME NOT NULL,
    hora_fin TIME NOT NULL,
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_horas_disponibilidad CHECK (hora_fin > hora_inicio)
);

-- Citas
CREATE TABLE citas (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    bruja_id UUID NOT NULL REFERENCES brujas(id) ON DELETE CASCADE,
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    fecha_hora_inicio TIMESTAMP WITH TIME ZONE NOT NULL,
    fecha_hora_fin TIMESTAMP WITH TIME ZONE NOT NULL,
    estado estado_cita_enum NOT NULL DEFAULT 'pendiente',
    metodo metodo_reunion_enum NOT NULL DEFAULT 'zoom',
    url_reunion VARCHAR(500),
    precio_acordado DECIMAL(8,2),
    notas_bruja TEXT,
    notas_usuario TEXT,
    calificacion_bruja INTEGER,
    comentario_calificacion TEXT,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_fechas_cita CHECK (fecha_hora_fin > fecha_hora_inicio),
    CONSTRAINT chk_calificacion_cita CHECK (calificacion_bruja IS NULL OR (calificacion_bruja >= 1 AND calificacion_bruja <= 5))
);

-- Conversaciones
CREATE TABLE conversaciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    bruja_id UUID NOT NULL REFERENCES brujas(id) ON DELETE CASCADE,
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    activa BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_ultimo_mensaje TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    UNIQUE(bruja_id, usuario_id)
);

-- Mensajes
CREATE TABLE mensajes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    conversacion_id UUID NOT NULL REFERENCES conversaciones(id) ON DELETE CASCADE,
    remitente_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    texto TEXT NOT NULL,
    archivo_url VARCHAR(500),
    leido BOOLEAN NOT NULL DEFAULT false,
    fecha_envio TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_lectura TIMESTAMP WITH TIME ZONE
);

-- Eventos
CREATE TABLE eventos (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    titulo VARCHAR(200) NOT NULL,
    descripcion TEXT,
    fecha_inicio TIMESTAMP WITH TIME ZONE NOT NULL,
    fecha_fin TIMESTAMP WITH TIME ZONE NOT NULL,
    ubicacion VARCHAR(300),
    url_evento VARCHAR(500),
    organizador_id UUID NOT NULL REFERENCES usuarios(id),
    tipo_evento tipo_evento_enum NOT NULL,
    disciplina_id UUID REFERENCES disciplinas(id),
    precio DECIMAL(10,2) DEFAULT 0.00,
    cupo_maximo INTEGER,
    imagen_evento VARCHAR(500),
    publico BOOLEAN NOT NULL DEFAULT true,
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_modificacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    CONSTRAINT chk_fechas_evento CHECK (fecha_fin > fecha_inicio),
    CONSTRAINT chk_precio_evento CHECK (precio >= 0)
);

-- Evento Participantes
CREATE TABLE evento_participantes (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    evento_id UUID NOT NULL REFERENCES eventos(id) ON DELETE CASCADE,
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    fecha_inscripcion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    precio_pagado DECIMAL(10,2) DEFAULT 0.00,
    estado VARCHAR(20) DEFAULT 'confirmado',
    UNIQUE(evento_id, usuario_id)
);

-- Frases Galleta
CREATE TABLE frases_galleta (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    texto TEXT NOT NULL,
    categoria categoria_frase_enum NOT NULL DEFAULT 'general',
    disciplina_id UUID REFERENCES disciplinas(id),
    activo BOOLEAN NOT NULL DEFAULT true,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Fases Lunares
CREATE TABLE fases_lunares (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    fecha DATE NOT NULL UNIQUE,
    fase fase_lunar_enum NOT NULL,
    porcentaje_iluminacion DECIMAL(5,2),
    imagen_icono VARCHAR(500),
    descripcion TEXT,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Notificaciones
CREATE TABLE notificaciones (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID NOT NULL REFERENCES usuarios(id) ON DELETE CASCADE,
    titulo VARCHAR(200) NOT NULL,
    mensaje TEXT NOT NULL,
    tipo_notificacion tipo_notificacion_enum NOT NULL DEFAULT 'sistema',
    url_accion VARCHAR(500),
    leido BOOLEAN NOT NULL DEFAULT false,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW(),
    fecha_lectura TIMESTAMP WITH TIME ZONE
);

-- Logs Auditoría
CREATE TABLE logs_auditoria (
    id UUID PRIMARY KEY DEFAULT uuid_generate_v4(),
    usuario_id UUID REFERENCES usuarios(id),
    tabla_afectada VARCHAR(100) NOT NULL,
    accion VARCHAR(20) NOT NULL,
    registro_id UUID,
    datos_anteriores JSONB,
    datos_nuevos JSONB,
    ip_address INET,
    user_agent TEXT,
    fecha_creacion TIMESTAMP WITH TIME ZONE DEFAULT NOW()
);

-- Índices básicos
CREATE INDEX idx_usuarios_email ON usuarios(email);
CREATE INDEX idx_cursos_disciplina ON cursos(disciplina_id);
CREATE INDEX idx_lecciones_curso ON lecciones(curso_id);
CREATE INDEX idx_progreso_usuario ON progreso_lecciones(usuario_id);
CREATE INDEX idx_articulos_bruja ON articulos(bruja_id);
CREATE INDEX idx_citas_bruja ON citas(bruja_id);
CREATE INDEX idx_mensajes_conversacion ON mensajes(conversacion_id);
CREATE INDEX idx_eventos_fecha_inicio ON eventos(fecha_inicio);
CREATE INDEX idx_notificaciones_usuario ON notificaciones(usuario_id);
CREATE INDEX idx_suscripciones_usuario ON usuario_suscripciones(usuario_id);

-- Función para calcular signo zodiacal
CREATE OR REPLACE FUNCTION calcular_signo_zodiacal(fecha_nac DATE)
RETURNS signo_zodiacal_enum AS $$
DECLARE
    mes INTEGER;
    dia INTEGER;
BEGIN
    IF fecha_nac IS NULL THEN RETURN NULL; END IF;
    mes := EXTRACT(MONTH FROM fecha_nac);
    dia := EXTRACT(DAY FROM fecha_nac);
    
    IF (mes = 3 AND dia >= 21) OR (mes = 4 AND dia <= 19) THEN RETURN 'aries';
    ELSIF (mes = 4 AND dia >= 20) OR (mes = 5 AND dia <= 20) THEN RETURN 'tauro';
    ELSIF (mes = 5 AND dia >= 21) OR (mes = 6 AND dia <= 20) THEN RETURN 'geminis';
    ELSIF (mes = 6 AND dia >= 21) OR (mes = 7 AND dia <= 22) THEN RETURN 'cancer';
    ELSIF (mes = 7 AND dia >= 23) OR (mes = 8 AND dia <= 22) THEN RETURN 'leo';
    ELSIF (mes = 8 AND dia >= 23) OR (mes = 9 AND dia <= 22) THEN RETURN 'virgo';
    ELSIF (mes = 9 AND dia >= 23) OR (mes = 10 AND dia <= 22) THEN RETURN 'libra';
    ELSIF (mes = 10 AND dia >= 23) OR (mes = 11 AND dia <= 21) THEN RETURN 'escorpio';
    ELSIF (mes = 11 AND dia >= 22) OR (mes = 12 AND dia <= 21) THEN RETURN 'sagitario';
    ELSIF (mes = 12 AND dia >= 22) OR (mes = 1 AND dia <= 19) THEN RETURN 'capricornio';
    ELSIF (mes = 1 AND dia >= 20) OR (mes = 2 AND dia <= 18) THEN RETURN 'acuario';
    ELSE RETURN 'piscis';
    END IF;
END;
$$ LANGUAGE plpgsql;

-- Trigger para signo zodiacal
CREATE OR REPLACE FUNCTION trigger_calcular_signo()
RETURNS TRIGGER AS $$
BEGIN
    NEW.signo_zodiacal = calcular_signo_zodiacal(NEW.fecha_nacimiento);
    RETURN NEW;
END;
$$ LANGUAGE plpgsql;

CREATE TRIGGER trg_usuarios_signo
    BEFORE INSERT OR UPDATE OF fecha_nacimiento ON usuarios
    FOR EACH ROW EXECUTE FUNCTION trigger_calcular_signo();

-- Datos iniciales
INSERT INTO disciplinas (nombre, descripcion, color_hex) VALUES
('tarot', 'Lectura e interpretación de cartas del tarot', '#8B4513'),
('astrologia', 'Estudio de la influencia de los astros', '#4B0082'),
('numerologia', 'Estudio del significado de los números', '#FF6347'),
('runas', 'Símbolos antiguos para adivinación', '#2F4F4F'),
('cristales', 'Propiedades energéticas de minerales', '#9370DB'),
('meditacion', 'Prácticas de meditación y mindfulness', '#20B2AA'),
('chakras', 'Sistema energético del cuerpo humano', '#FF69B4'),
('reiki', 'Técnica de sanación energética', '#32CD32'),
('adivinacion', 'Técnicas diversas de predicción', '#DAA520'),
('brujeria', 'Prácticas mágicas y rituales', '#800080');

INSERT INTO roles (nombre, descripcion) VALUES
('admin', 'Administrador del sistema con todos los permisos'),
('bruja', 'Usuario especializado que puede ofrecer consultas'),
('usuario', 'Usuario regular de la plataforma'),
('moderador', 'Usuario con permisos de moderación de contenido');

INSERT INTO permisos (nombre, descripcion, modulo) VALUES
('gestionar_usuarios', 'Crear, editar y eliminar usuarios', 'usuarios'),
('gestionar_cursos', 'Crear, editar y eliminar cursos', 'cursos'),
('publicar_articulos', 'Publicar artículos y contenido', 'contenido'),
('ofrecer_consultas', 'Ofrecer consultas privadas', 'consultas'),
('moderar_contenido', 'Moderar comentarios y contenido', 'moderacion'),
('acceder_premium', 'Acceder a contenido premium', 'suscripciones'),
('gestionar_eventos', 'Crear y gestionar eventos', 'eventos');

INSERT INTO planes_suscripcion (nombre_plan, descripcion, duracion_meses, precio, caracteristicas) VALUES
('Básico', 'Acceso básico a contenido introductorio', 1, 0.00, ARRAY['Acceso a cursos básicos', 'Frases del día', 'Calendario lunar']),
('Premium', 'Acceso completo a todo el contenido', 1, 19.99, ARRAY['Todos los cursos', 'Consultas con brujas', 'Contenido exclusivo', 'Eventos especiales']),
('Anual Premium', 'Plan anual con descuento', 12, 199.99, ARRAY['Todos los cursos', 'Consultas ilimitadas', 'Contenido exclusivo', 'Eventos especiales', '2 meses gratis']);

INSERT INTO frases_galleta (texto, categoria) VALUES
('Los astros se alinean para traerte abundancia en los próximos días', 'general'),
('Tu intuición será tu mejor guía en las decisiones amorosas', 'amor'),
('Las energías cósmicas favorecen tu crecimiento espiritual', 'espiritual'),
('La luna llena potenciará tus intenciones de prosperidad', 'dinero'),
('Escucha a tu cuerpo, tiene mensajes importantes para ti', 'salud');

COMMIT;

SELECT 'Base de datos creada exitosamente' AS resultado;


================================================
File: index.html
================================================
<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8">
  <title>Arcana</title>
  <base href="/">
  <meta name="viewport" content="width=device-width, initial-scale=1">
  <link rel="icon" type="image/x-icon" href="favicon.ico">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.5.1/css/all.min.css">
  <link rel="stylesheet" href="https://cdn.hugeicons.com/font/hgi-stroke-rounded.css" />
</head>
<body>
  <app-root></app-root>
</body>
</html>



================================================
File: main.server.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { AppComponent } from './app/app.component';
import { config } from './app/app.config.server';

const bootstrap = () => bootstrapApplication(AppComponent, config);

export default bootstrap;



================================================
File: main.ts
================================================
import { bootstrapApplication } from '@angular/platform-browser';
import { appConfig } from './app/app.config';
import { AppComponent } from './app/app.component';

bootstrapApplication(AppComponent, appConfig)
  .catch((err) => console.error(err));



================================================
File: server.ts
================================================
import {
  AngularNodeAppEngine,
  createNodeRequestHandler,
  isMainModule,
  writeResponseToNodeResponse,
} from '@angular/ssr/node';
import express from 'express';
import { dirname, resolve } from 'node:path';
import { fileURLToPath } from 'node:url';

const serverDistFolder = dirname(fileURLToPath(import.meta.url));
const browserDistFolder = resolve(serverDistFolder, '../browser');

const app = express();
const angularApp = new AngularNodeAppEngine();

/**
 * Example Express Rest API endpoints can be defined here.
 * Uncomment and define endpoints as necessary.
 *
 * Example:
 * ```ts
 * app.get('/api/**', (req, res) => {
 *   // Handle API request
 * });
 * ```
 */

/**
 * Serve static files from /browser
 */
app.use(
  express.static(browserDistFolder, {
    maxAge: '1y',
    index: false,
    redirect: false,
  }),
);

/**
 * Handle all other requests by rendering the Angular application.
 */
app.use('/**', (req, res, next) => {
  angularApp
    .handle(req)
    .then((response) =>
      response ? writeResponseToNodeResponse(response, res) : next(),
    )
    .catch(next);
});

/**
 * Start the server if this module is the main entry point.
 * The server listens on the port defined by the `PORT` environment variable, or defaults to 4000.
 */
if (isMainModule(import.meta.url)) {
  const port = process.env['PORT'] || 4000;
  app.listen(port, () => {
    console.log(`Node Express server listening on http://localhost:${port}`);
  });
}

/**
 * Request handler used by the Angular CLI (for dev-server and during build) or Firebase Cloud Functions.
 */
export const reqHandler = createNodeRequestHandler(app);



================================================
File: styles.scss
================================================
@use "tailwindcss" as *;

* {
    scrollbar-width: none; /* Firefox */
    -ms-overflow-style: none; /* IE 10+ */
  }

html {
  background-color: #100820 !important;
  min-height: 100%;
  height: 100%;
}



================================================
File: app/app.component.html
================================================
<router-outlet></router-outlet>


================================================
File: app/app.component.scss
================================================
:host {
  display: block;
  width: 100%;
  font-family: serif;
  position: relative;
  z-index: 1;
}

.profile-dropdown-mystical {
  position: fixed !important;
  top: auto !important;
  transform-origin: top right;
}

.user-mystical-profile:hover .profile-dropdown-mystical {
  position: fixed;
  top: calc(var(--header-bottom, 120px));
  right: 2rem;
  z-index: 999999;
}



================================================
File: app/app.component.ts
================================================
import { Component } from '@angular/core';
import { RouterOutlet } from '@angular/router';

@Component({
  selector: 'app-root',
  imports: [RouterOutlet],
  templateUrl: './app.component.html',
  styleUrl: './app.component.scss'
})
export class AppComponent {
  title = 'Arcana';
}



================================================
File: app/app.config.server.ts
================================================
import { mergeApplicationConfig, ApplicationConfig } from '@angular/core';
import { provideServerRendering } from '@angular/platform-server';
import { provideServerRouting } from '@angular/ssr';
import { appConfig } from './app.config';
import { serverRoutes } from './app.routes.server';

const serverConfig: ApplicationConfig = {
  providers: [
    provideServerRendering(),
    provideServerRouting(serverRoutes)
  ]
};

export const config = mergeApplicationConfig(appConfig, serverConfig);



================================================
File: app/app.config.ts
================================================
import { ApplicationConfig, provideZoneChangeDetection } from '@angular/core';
import { provideRouter } from '@angular/router';

import { routes } from './app.routes';
import { provideClientHydration, withEventReplay } from '@angular/platform-browser';

export const appConfig: ApplicationConfig = {
  providers: [
    provideZoneChangeDetection({ eventCoalescing: true }),
    provideRouter(routes),
    provideClientHydration(withEventReplay()),
  ],
};



================================================
File: app/app.routes.server.ts
================================================
import { RenderMode, ServerRoute } from '@angular/ssr';

export const serverRoutes: ServerRoute[] = [
  {
    path: '**',
    renderMode: RenderMode.Prerender
  }
];



================================================
File: app/app.routes.ts
================================================
import { Routes } from '@angular/router';
import { AuthGuard } from './core/guards/auth.guard';

export const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./features/welcome/welcome/welcome.component').then(m => m.WelcomeComponent)
  },

  // Rutas de autenticación (sin guard)
  {
    path: 'auth',
    children: [
      {
        path: 'login',
        loadComponent: () => import('./features/auth/pages/login/login.component').then(m => m.LoginComponent)
      },
      {
        path: 'register',
        loadComponent: () => import('./features/auth/pages/register/register.component').then(m => m.RegisterComponent)
      },
      {
        path: 'forgot-password',
        loadComponent: () => import('./features/auth/pages/forgot-password/forgot-password.component').then(m => m.ForgotPasswordComponent)
      },
      {
        path: '',
        redirectTo: 'login',
        pathMatch: 'full'
      }
    ]
  },

  // Rutas del dashboard (protegidas con guard)
  {
    path: 'dashboard',
    loadComponent: () => import('./features/dashboard/dashboard.component').then(m => m.DashboardComponent),
    canActivate: [AuthGuard],
    children: [
      {
        path: '',
        redirectTo: 'home',
        pathMatch: 'full'
      },
      {
        path: 'camino-magico',
        loadComponent: () => import('./features/camino-magico/camino-magico.component').then(m => m.CaminoMagicoComponent)
      },
      {
        path: 'magia-esoterismo',
        loadComponent: () => import('./features/magia-esoterismo/magia-esoterismo.component').then(m => m.MagiaEsoterismoComponent)
      },
      {
        path: 'holistico-espiritualidad',
        loadComponent: () => import('./features/holistico-espiritualidad/holistico-espiritualidad.component').then(m => m.HolisticoEspiritualidadComponent)
      },
      {
        path: 'tarot',
        loadComponent: () => import('./features/tarot/tarot.component').then(m => m.TarotComponent)
      },
      // Rutas de SERVICIOS
      {
        path: 'fases-lunares',
        loadComponent: () => import('./features/fases-lunares/fases-lunares.component').then(m => m.FasesLunaresComponent)
      },
      {
        path: 'en-vivo',
        loadComponent: () => import('./features/en-vivo/en-vivo.component').then(m => m.EnVivoComponent)
      },
      {
        path: 'tienda',
        loadComponent: () => import('./features/tienda/tienda.component').then(m => m.TiendaComponent)
      },
      {
        path: 'home',
        loadComponent: () => import('./features/home/home.component').then(m => m.HomeComponent)
      },
      {
        path: 'cursos-talleres',
        loadComponent: () => import('./features/cursos-talleres/cursos-talleres.component').then(m => m.CursosTalleresComponent)
      }
    ]
  },

  // Fallback para rutas no encontradas
  {
    path: '**',
    redirectTo: ''
  }
];


================================================
File: app/.DS_Store
================================================
[Non-text file]


================================================
File: app/core/guards/auth.guard.ts
================================================
import { Injectable, inject } from '@angular/core';
import {
  CanActivate,
  Router,
  ActivatedRouteSnapshot,
  RouterStateSnapshot,
} from '@angular/router';
import { Observable, of } from 'rxjs';
import { StorageService } from '../services/storage.service'; // Asegúrate de que la ruta sea correcta
import { AuthModule } from '../../features/auth/auth.module';

@Injectable({
  providedIn: 'root',
})
export class AuthGuard implements CanActivate {
  private router = inject(Router);
  private storageService = inject(StorageService);

  canActivate(
    route: ActivatedRouteSnapshot,
    state: RouterStateSnapshot
  ): Observable<boolean> | Promise<boolean> | boolean {
    // Verificar si el usuario está autenticado
    if (this.isAuthenticated()) {
      return true;
    }

    // Si no está autenticado, redirigir al login con la URL de retorno
    this.router.navigate(['/auth/login'], {
      // 👈 CORREGIR RUTA
      queryParams: { returnUrl: state.url },
    });

    return false;
  }

  private isAuthenticated(): boolean {
    // En una aplicación real, verificarías el token con el backend
    // Para la demo, verificamos si existe un token válido

    try {
      const token = this.storageService.getItem('arcana_auth_token');
      const user = this.storageService.getItem('arcana_user');

      // Verificación simple para demo
      if (token && user) {
        // Verificar si el token no ha expirado (para demo, siempre válido)
        return true;
      }

      return false;
    } catch (error) {
      console.error('Error verificando autenticación:', error);
      return false;
    }
  }

  // Método auxiliar para verificar roles específicos (opcional)
  hasRole(requiredRole: string): boolean {
    try {
      const user = this.storageService.getItem('arcana_user');
      if (user && user.roles) {
        return user.roles.includes(requiredRole);
      }
      return false;
    } catch (error) {
      console.error('Error verificando rol:', error);
      return false;
    }
  }

  // Método para verificar suscripción activa (opcional)
  hasActiveSubscription(): boolean {
    try {
      const user = this.storageService.getItem('arcana_user');
      if (user && user.subscription) {
        const now = new Date();
        const subscriptionEnd = new Date(user.subscription.endDate);
        return subscriptionEnd > now && user.subscription.status === 'active';
      }
      return false;
    } catch (error) {
      console.error('Error verificando suscripción:', error);
      return false;
    }
  }
}



================================================
File: app/core/guards/subscription.guard.ts
================================================



================================================
File: app/core/models/api-response.interface.ts
================================================



================================================
File: app/core/models/userInterface.ts
================================================
//! REGISTER COMPONENT INTERFACES

import { Component } from "@angular/core";

export interface RegisterCredentials {
  nombre: string;
  apellido: string;
  email: string;
  password: string;
  confirmPassword: string;
  tipoPerfil: 'espiritual' | 'esoterico' | 'ambos' | '';
  disciplinasInteres: string[];
  fechaNacimiento: string;
  signoZodiacal?: string;
  acceptTerms: boolean;
  acceptMarketing: boolean;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface RegisterResponse {
  success: boolean;
  user?: any;
  message?: string;
  errors?: ValidationError[];
}

export interface Disciplina {
  id: string;
  name: string;
  icon: string;
  description: string;
}

export interface SignoZodiacal {
  name: string;
  icon: string;
  dates: [[number, number], [number, number]];
}

//! DASHBOARD COMPONENT INTERFACES

export interface DashboardStats {
  completedCourses: number;
  totalCourses: number;
  upcomingAppointments: number;
  favoriteArticles: number;
}

export interface QuickAction {
  title: string;
  description: string;
  icon: string;
  route: string;
  color: string;
}

export interface RecentActivity {
  id: string;
  type: 'course' | 'article' | 'consultation' | 'tool';
  title: string;
  description: string;
  date: Date;
  icon: string;
}

//! FORGOT PASSWORD COMPONENT INTERFACES

export interface ForgotPasswordState {
  step: 'email' | 'code' | 'password';
  email: string;
  code: string;
  newPassword: string;
  confirmPassword: string;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface ForgotPasswordResponse {
  success: boolean;
  message?: string;
  errors?: ValidationError[];
}

//! REGISTER COMPONENT INTERFACES

export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe: boolean;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: any;
  message?: string;
  errors?: ValidationError[];
}


================================================
File: app/core/services/api.service.ts
================================================



================================================
File: app/core/services/auth.service.ts
================================================



================================================
File: app/core/services/device-detection.service.ts
================================================
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';
import { BehaviorSubject, fromEvent, EMPTY } from 'rxjs';
import { debounceTime, distinctUntilChanged } from 'rxjs/operators';

@Injectable({
  providedIn: 'root',
})
export class DeviceDetectionService {
  private isMobileSubject = new BehaviorSubject<boolean>(this.checkIsMobile());
  public isMobile$ = this.isMobileSubject.asObservable();

  private readonly MOBILE_BREAKPOINT = 768; // px

  constructor(@Inject(PLATFORM_ID) private platformId: Object) {
    // CRÍTICO: Solo ejecutar en el browser
    if (isPlatformBrowser(this.platformId)) {
      // Verificación adicional de window para máxima seguridad
      if (typeof window !== 'undefined') {
        // Escuchar cambios de tamaño de ventana
        fromEvent(window, 'resize')
          .pipe(debounceTime(100), distinctUntilChanged())
          .subscribe(() => {
            this.updateMobileStatus();
          });

        // Verificación inicial después de un frame para asegurar que todo esté cargado
        setTimeout(() => {
          this.updateMobileStatus();
        }, 0);
      }
    }
  }

  private checkIsMobile(): boolean {
    // Verificar si estamos en el browser
    if (!isPlatformBrowser(this.platformId) || typeof window === 'undefined') {
      return false; // Default para SSR - siempre devolver false en servidor
    }

    try {
      // Verificar ancho de pantalla
      const screenWidth = window.innerWidth;
      const isSmallScreen = screenWidth < this.MOBILE_BREAKPOINT;

      // Verificar user agent para dispositivos móviles
      const userAgent = navigator.userAgent.toLowerCase();
      const isMobileUserAgent =
        /android|webos|iphone|ipad|ipod|blackberry|iemobile|opera mini/i.test(
          userAgent
        );

      // Verificar si es touch device
      const isTouchDevice =
        'ontouchstart' in window || navigator.maxTouchPoints > 0;

      const result = isSmallScreen || (isMobileUserAgent && isTouchDevice);

      return result;
    } catch (error) {
      console.error('Error en checkIsMobile:', error);
      return false; // Default seguro en caso de error
    }
  }

  private updateMobileStatus(): void {
    if (!isPlatformBrowser(this.platformId)) return;

    try {
      const newStatus = this.checkIsMobile();
      const currentStatus = this.isMobileSubject.value;

      if (currentStatus !== newStatus) {
        this.isMobileSubject.next(newStatus);
      }
    } catch (error) {}
  }

  get isMobile(): boolean {
    return this.isMobileSubject.value;
  }

  get isDesktop(): boolean {
    return !this.isMobile;
  }

  // Método para verificar orientación en móviles
  get isPortrait(): boolean {
    if (!isPlatformBrowser(this.platformId) || typeof window === 'undefined') {
      return true; // Default para SSR
    }

    try {
      return window.innerHeight > window.innerWidth;
    } catch (error) {
      console.error('Error en isPortrait:', error);
      return true;
    }
  }

  get isLandscape(): boolean {
    return !this.isPortrait;
  }

  // Método para verificar si es tablet
  get isTablet(): boolean {
    if (!isPlatformBrowser(this.platformId) || typeof window === 'undefined') {
      return false; // Default para SSR
    }

    try {
      const width = window.innerWidth;
      return width >= 768 && width <= 1024;
    } catch (error) {
      console.error('Error en isTablet:', error);
      return false;
    }
  }

  // Método para verificar el tipo de dispositivo
  getDeviceType(): 'mobile' | 'tablet' | 'desktop' {
    if (this.isMobile && !this.isTablet) return 'mobile';
    if (this.isTablet) return 'tablet';
    return 'desktop';
  }

  // Método público para forzar re-detección (útil para debugging)
  forceDetection(): void {
    if (isPlatformBrowser(this.platformId)) {
      this.updateMobileStatus();
    }
  }
}



================================================
File: app/core/services/storage.service.ts
================================================
import { Injectable, Inject, PLATFORM_ID } from '@angular/core';
import { isPlatformBrowser } from '@angular/common';

@Injectable({
  providedIn: 'root'
})
export class StorageService {
  private isBrowser: boolean;

  constructor(@Inject(PLATFORM_ID) platformId: Object) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  // Métodos para localStorage
  setItem(key: string, value: any): void {
    if (!this.isBrowser) return;

    try {
      const serializedValue = JSON.stringify(value);
      localStorage.setItem(key, serializedValue);
    } catch (error) {
      console.error(`Error guardando en localStorage (${key}):`, error);
    }
  }

  getItem<T = any>(key: string): T | null {
    if (!this.isBrowser) return null;

    try {
      const item = localStorage.getItem(key);
      if (item === null) return null;
      return JSON.parse(item) as T;
    } catch (error) {
      console.error(`Error leyendo de localStorage (${key}):`, error);
      return null;
    }
  }

  removeItem(key: string): void {
    if (!this.isBrowser) return;

    try {
      localStorage.removeItem(key);
    } catch (error) {
      console.error(`Error removiendo de localStorage (${key}):`, error);
    }
  }

  clear(): void {
    if (!this.isBrowser) return;

    try {
      localStorage.clear();
    } catch (error) {
      console.error('Error limpiando localStorage:', error);
    }
  }

  // Métodos para sessionStorage
  setSessionItem(key: string, value: any): void {
    if (!this.isBrowser) return;

    try {
      const serializedValue = JSON.stringify(value);
      sessionStorage.setItem(key, serializedValue);
    } catch (error) {
      console.error(`Error guardando en sessionStorage (${key}):`, error);
    }
  }

  getSessionItem<T = any>(key: string): T | null {
    if (!this.isBrowser) return null;

    try {
      const item = sessionStorage.getItem(key);
      if (item === null) return null;
      return JSON.parse(item) as T;
    } catch (error) {
      console.error(`Error leyendo de sessionStorage (${key}):`, error);
      return null;
    }
  }

  removeSessionItem(key: string): void {
    if (!this.isBrowser) return;

    try {
      sessionStorage.removeItem(key);
    } catch (error) {
      console.error(`Error removiendo de sessionStorage (${key}):`, error);
    }
  }

  // Métodos específicos para la aplicación
  saveAuthData(token: string, user: any): void {
    this.setItem('arcana_auth_token', token);
    this.setItem('arcana_user', user);
  }

  getAuthToken(): string | null {
    return this.getItem<string>('arcana_auth_token');
  }

  getUser(): any {
    return this.getItem('arcana_user');
  }

  clearAuthData(): void {
    this.removeItem('arcana_auth_token');
    this.removeItem('arcana_user');
    this.removeItem('arcana_remember_email');
  }

  saveRememberEmail(email: string): void {
    this.setItem('arcana_remember_email', email);
  }

  getRememberEmail(): string | null {
    return this.getItem<string>('arcana_remember_email');
  }

  // Verificar si hay datos de sesión válidos
  hasValidSession(): boolean {
    const token = this.getAuthToken();
    const user = this.getUser();
    return !!(token && user);
  }

  // Guardar configuraciones de usuario
  saveUserPreferences(preferences: any): void {
    this.setItem('arcana_user_preferences', preferences);
  }

  getUserPreferences(): any {
    return this.getItem('arcana_user_preferences') || {};
  }

  // Gestión de carrito (para la tienda)
  saveCart(items: any[]): void {
    this.setItem('arcana_cart', items);
  }

  getCart(): any[] {
    return this.getItem('arcana_cart') || [];
  }

  clearCart(): void {
    this.removeItem('arcana_cart');
  }

  // Gestión de favoritos
  saveFavorites(favorites: any[]): void {
    this.setItem('arcana_favorites', favorites);
  }

  getFavorites(): any[] {
    return this.getItem('arcana_favorites') || [];
  }

  addToFavorites(item: any): void {
    const favorites = this.getFavorites();
    if (!favorites.find(fav => fav.id === item.id)) {
      favorites.push(item);
      this.saveFavorites(favorites);
    }
  }

  removeFromFavorites(itemId: string): void {
    const favorites = this.getFavorites();
    const filtered = favorites.filter(fav => fav.id !== itemId);
    this.saveFavorites(filtered);
  }

  // Progreso de cursos
  saveCourseProgress(courseId: string, progress: any): void {
    const allProgress = this.getItem('arcana_course_progress') || {};
    allProgress[courseId] = progress;
    this.setItem('arcana_course_progress', allProgress);
  }

  getCourseProgress(courseId: string): any {
    const allProgress = this.getItem('arcana_course_progress') || {};
    return allProgress[courseId] || null;
  }

  // Utilidades
  getStorageSize(): { localStorage: number; sessionStorage: number } {
    if (!this.isBrowser) return { localStorage: 0, sessionStorage: 0 };

    let localStorageSize = 0;
    let sessionStorageSize = 0;

    try {
      for (let key in localStorage) {
        if (localStorage.hasOwnProperty(key)) {
          localStorageSize += localStorage[key].length + key.length;
        }
      }

      for (let key in sessionStorage) {
        if (sessionStorage.hasOwnProperty(key)) {
          sessionStorageSize += sessionStorage[key].length + key.length;
        }
      }
    } catch (error) {
      console.error('Error calculando tamaño de storage:', error);
    }

    return {
      localStorage: localStorageSize,
      sessionStorage: sessionStorageSize
    };
  }

  // Limpiar datos antiguos (llamar en inicialización de app)
  cleanupOldData(): void {
    if (!this.isBrowser) return;

    const keysToCheck = [
      'arcana_auth_token',
      'arcana_user',
      'arcana_course_progress'
    ];

    keysToCheck.forEach(key => {
      const data = this.getItem(key);
      if (data && data.timestamp) {
        const now = Date.now();
        const dataAge = now - data.timestamp;
        const maxAge = 30 * 24 * 60 * 60 * 1000; // 30 días

        if (dataAge > maxAge) {
          this.removeItem(key);
          console.log(`Datos antiguos removidos: ${key}`);
        }
      }
    });
  }
}


================================================
File: app/features/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/auth/auth-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: 'login',
    loadComponent: () => import('./pages/login/login.component').then(m => m.LoginComponent)
  },
  {
    path: 'register', 
    loadComponent: () => import('./pages/register/register.component').then(m => m.RegisterComponent)
  },
  {
    path: 'forgot-password',
    loadComponent: () => import('./pages/forgot-password/forgot-password.component').then(m => m.ForgotPasswordComponent)
  },
  {
    path: '',
    redirectTo: 'login',
    pathMatch: 'full'
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class AuthRoutingModule { }


================================================
File: app/features/auth/auth.module.ts
================================================
import { NgModule } from '@angular/core';
import { CommonModule } from '@angular/common';
import { AuthRoutingModule } from './auth-routing.module';

import { LoginComponent } from './pages/login/login.component';
import { RegisterComponent } from './pages/register/register.component';
import { ForgotPasswordComponent } from './pages/forgot-password/forgot-password.component';


@NgModule({
  declarations: [],
  imports: [
    CommonModule,
    AuthRoutingModule,
    LoginComponent,
    RegisterComponent,
    ForgotPasswordComponent
  ]
})
export class AuthModule { }



================================================
File: app/features/auth/auth.service.ts
================================================
import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class AuthService {

  constructor() { }
}



================================================
File: app/features/auth/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/auth/pages/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.html
================================================
<div
  class="min-h-screen w-full font-serif relative overflow-hidden"
  style="background-color: #100820; color: #b4a2fd"
>
  <div class="fixed inset-0 pointer-events-none z-0">
    <div
      class="star large"
      style="top: 8%; left: 12%; animation-delay: 0s"
    ></div>
    <div
      class="star large"
      style="top: 15%; left: 88%; animation-delay: 1.2s"
    ></div>
    <div
      class="star large"
      style="top: 25%; left: 5%; animation-delay: 2.1s"
    ></div>
    <div
      class="star large"
      style="top: 35%; left: 85%; animation-delay: 1.8s"
    ></div>
    <div
      class="star large"
      style="top: 55%; left: 15%; animation-delay: 2.8s"
    ></div>
    <div
      class="star large"
      style="top: 75%; left: 90%; animation-delay: 1.5s"
    ></div>
    <div
      class="star large"
      style="top: 85%; left: 25%; animation-delay: 0.7s"
    ></div>
    <div
      class="star large"
      style="top: 95%; left: 78%; animation-delay: 2.3s"
    ></div>

    <div
      class="star medium"
      style="top: 12%; left: 45%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 18%; left: 65%; animation-delay: 2.2s"
    ></div>
    <div
      class="star medium"
      style="top: 28%; left: 32%; animation-delay: 1.1s"
    ></div>
    <div
      class="star medium"
      style="top: 38%; left: 72%; animation-delay: 3s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 28%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 68%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 68%; left: 35%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 78%; left: 82%; animation-delay: 2.7s"
    ></div>

    <div
      class="star small"
      style="top: 6%; left: 25%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 22%; left: 78%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 42%; left: 8%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 92%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 72%; left: 18%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 82%; left: 95%; animation-delay: 0.9s"
    ></div>

    <div
      class="sparkle"
      style="top: 10%; left: 55%; animation-delay: 0.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 20%; left: 15%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 30%; left: 85%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 45%; animation-delay: 1.2s"
    ></div>
    <div
      class="sparkle"
      style="top: 70%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 90%; left: 35%; animation-delay: 0.4s"
    ></div>

    <div
      class="floating-sparkle"
      style="top: 25%; left: 20%; animation-delay: 1.5s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 45%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 65%; left: 60%; animation-delay: 0.8s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 40%; animation-delay: 2.6s"
    ></div>
  </div>

  <div
    class="min-h-screen w-full font-serif relative overflow-hidden"
    style="background-color: #100820; color: #b4a2fd"
  >
    <div class="fixed inset-0 pointer-events-none z-0">
      <div
        class="star large"
        style="top: 8%; left: 12%; animation-delay: 0s"
      ></div>
      <div
        class="star large"
        style="top: 15%; left: 88%; animation-delay: 1.2s"
      ></div>
      <div
        class="star large"
        style="top: 25%; left: 5%; animation-delay: 2.1s"
      ></div>
      <div
        class="star large"
        style="top: 35%; left: 85%; animation-delay: 1.8s"
      ></div>
      <div
        class="star large"
        style="top: 55%; left: 15%; animation-delay: 2.8s"
      ></div>
      <div
        class="star large"
        style="top: 75%; left: 90%; animation-delay: 1.5s"
      ></div>
      <div
        class="star large"
        style="top: 85%; left: 25%; animation-delay: 0.7s"
      ></div>
      <div
        class="star large"
        style="top: 95%; left: 78%; animation-delay: 2.3s"
      ></div>

      <div
        class="star medium"
        style="top: 12%; left: 45%; animation-delay: 0.8s"
      ></div>
      <div
        class="star medium"
        style="top: 18%; left: 65%; animation-delay: 2.2s"
      ></div>
      <div
        class="star medium"
        style="top: 28%; left: 32%; animation-delay: 1.1s"
      ></div>
      <div
        class="star medium"
        style="top: 38%; left: 72%; animation-delay: 3s"
      ></div>
      <div
        class="star medium"
        style="top: 48%; left: 28%; animation-delay: 0.5s"
      ></div>
      <div
        class="star medium"
        style="top: 58%; left: 68%; animation-delay: 2.5s"
      ></div>
      <div
        class="star medium"
        style="top: 68%; left: 35%; animation-delay: 1.9s"
      ></div>
      <div
        class="star medium"
        style="top: 78%; left: 82%; animation-delay: 2.7s"
      ></div>

      <div
        class="star small"
        style="top: 6%; left: 25%; animation-delay: 1.4s"
      ></div>
      <div
        class="star small"
        style="top: 22%; left: 78%; animation-delay: 2.9s"
      ></div>
      <div
        class="star small"
        style="top: 42%; left: 8%; animation-delay: 0.3s"
      ></div>
      <div
        class="star small"
        style="top: 52%; left: 92%; animation-delay: 1.7s"
      ></div>
      <div
        class="star small"
        style="top: 72%; left: 18%; animation-delay: 2.4s"
      ></div>
      <div
        class="star small"
        style="top: 82%; left: 95%; animation-delay: 0.9s"
      ></div>

      <div
        class="sparkle"
        style="top: 10%; left: 55%; animation-delay: 0.6s"
      ></div>
      <div
        class="sparkle"
        style="top: 20%; left: 15%; animation-delay: 1.8s"
      ></div>
      <div
        class="sparkle"
        style="top: 30%; left: 85%; animation-delay: 2.4s"
      ></div>
      <div
        class="sparkle"
        style="top: 50%; left: 45%; animation-delay: 1.2s"
      ></div>
      <div
        class="sparkle"
        style="top: 70%; left: 75%; animation-delay: 2.8s"
      ></div>
      <div
        class="sparkle"
        style="top: 90%; left: 35%; animation-delay: 0.4s"
      ></div>

      <div
        class="floating-sparkle"
        style="top: 25%; left: 20%; animation-delay: 1.5s"
      ></div>
      <div
        class="floating-sparkle"
        style="top: 45%; left: 80%; animation-delay: 2.1s"
      ></div>
      <div
        class="floating-sparkle"
        style="top: 65%; left: 60%; animation-delay: 0.8s"
      ></div>
      <div
        class="floating-sparkle"
        style="top: 85%; left: 40%; animation-delay: 2.6s"
      ></div>
    </div>

    <div class="fixed inset-0 pointer-events-none z-1">
      <div class="mystical-gradient"></div>
    </div>

    <div
      class="relative z-10 min-h-screen flex items-center justify-center p-4"
    >
      <div class="absolute top-6 left-6 z-20">
        <button class="back-home-btn group" (click)="onBackToHome()">
          <i
            class="fas fa-arrow-left mr-2 transition-transform group-hover:-translate-x-1"
          ></i>
          <span class="hidden sm:inline">Volver al Inicio</span>
          <span class="sm:hidden">Inicio</span>
        </button>
      </div>

      <div class="login-container">
        <div class="login-header">
          <div class="login-icon-container">
            <div class="step-icon-wrapper">
              <div
                class="mystical-envelope-wrapper-recovery"
                [class.active]="currentStep() === 1"
                [class.hidden]="currentStep() !== 1"
              >
                <div class="envelope-inner-glow-recovery"></div>
                <div class="envelope-outer-glow-recovery"></div>
                <div class="envelope-energy-waves-recovery">
                  <div class="energy-wave-recovery wave-1"></div>
                  <div class="energy-wave-recovery wave-2"></div>
                  <div class="energy-wave-recovery wave-3"></div>
                </div>
                <div class="envelope-particles-recovery">
                  <div class="env-particle-recovery env-p-1"></div>
                  <div class="env-particle-recovery env-p-2"></div>
                  <div class="env-particle-recovery env-p-3"></div>
                  <div class="env-particle-recovery env-p-4"></div>
                </div>
              </div>

              <div
                class="mystical-shield-wrapper-recovery"
                [class.active]="currentStep() === 2"
                [class.hidden]="currentStep() !== 2"
              >
                <div class="shield-inner-glow-recovery"></div>
                <div class="shield-outer-glow-recovery"></div>
                <div class="shield-protection-rings">
                  <div class="protection-ring p-ring-1"></div>
                  <div class="protection-ring p-ring-2"></div>
                  <div class="protection-ring p-ring-3"></div>
                </div>
                <div class="shield-particles-recovery">
                  <div class="shield-particle-recovery s-p-1"></div>
                  <div class="shield-particle-recovery s-p-2"></div>
                  <div class="shield-particle-recovery s-p-3"></div>
                  <div class="shield-particle-recovery s-p-4"></div>
                </div>
              </div>

              <div
                class="mystical-key-wrapper-recovery"
                [class.active]="currentStep() === 3"
                [class.hidden]="currentStep() !== 3"
              >
                <div class="key-inner-glow-recovery"></div>
                <div class="key-outer-glow-recovery"></div>
                <div class="key-transformation-waves">
                  <div class="transformation-wave t-wave-1"></div>
                  <div class="transformation-wave t-wave-2"></div>
                  <div class="transformation-wave t-wave-3"></div>
                </div>
                <div class="key-particles-recovery">
                  <div class="key-particle-recovery k-p-1"></div>
                  <div class="key-particle-recovery k-p-2"></div>
                  <div class="key-particle-recovery k-p-3"></div>
                  <div class="key-particle-recovery k-p-4"></div>
                </div>
              </div>

              <div class="secondary-sparkle-wrapper">
                <div
                  class="email-sparkle-professional"
                  [class.active]="currentStep() === 1"
                  [class.hidden]="currentStep() !== 1"
                >
                  <i class="fas fa-sparkles email-sparkle-icon"></i>
                  <div class="email-sparkle-trail e-trail-1"></div>
                  <div class="email-sparkle-trail e-trail-2"></div>
                </div>

                <div
                  class="verification-sparkle-professional"
                  [class.active]="currentStep() === 2"
                  [class.hidden]="currentStep() !== 2"
                >
                  <i class="fas fa-sparkles verification-sparkle-icon"></i>
                  <div class="verification-sparkle-trail v-trail-1"></div>
                  <div class="verification-sparkle-trail v-trail-2"></div>
                </div>

                <div
                  class="password-sparkle-professional"
                  [class.active]="currentStep() === 3"
                  [class.hidden]="currentStep() !== 3"
                >
                  <i class="fas fa-sparkles password-sparkle-icon"></i>
                  <div class="password-sparkle-trail p-trail-1"></div>
                  <div class="password-sparkle-trail p-trail-2"></div>
                </div>
              </div>
            </div>

            <div class="icon-secondary-professional-recovery">
              <div class="mystical-gem-mini-recovery">
                <i class="fas fa-gem gem-mini-icon-recovery"></i>
                <div class="gem-mini-glow-recovery"></div>
              </div>
            </div>
          </div>

          <h1 class="login-title">
            <span class="title-highlight">{{ getStepTitle() }}</span>
          </h1>
          <p class="login-subtitle">
            {{ getStepSubtitle() }}
          </p>

          <div class="progress-indicator-professional">
            <div class="progress-steps">
              <div
                class="progress-step"
                [class.active]="currentStep() >= 1"
                [class.completed]="currentStep() > 1"
              >
                <div class="step-circle">
                  <i class="fas fa-envelope"></i>
                </div>
                <div
                  class="step-connector"
                  [class.active]="currentStep() > 1"
                ></div>
              </div>
              <div
                class="progress-step"
                [class.active]="currentStep() >= 2"
                [class.completed]="currentStep() > 2"
              >
                <div class="step-circle">
                  <i class="fas fa-shield-check"></i>
                </div>
                <div
                  class="step-connector"
                  [class.active]="currentStep() > 2"
                ></div>
              </div>
              <div
                class="progress-step"
                [class.active]="currentStep() >= 3"
                [class.completed]="currentStep() > 3"
              >
                <div class="step-circle">
                  <i class="fas fa-key"></i>
                </div>
              </div>
            </div>
          </div>

          <!-- <div
            class="debug-info-development"
            style="
              margin: 1rem 0;
              padding: 0.5rem;
              background: rgba(0, 255, 0, 0.1);
              border: 1px solid rgba(0, 255, 0, 0.3);
              border-radius: 0.5rem;
              font-size: 0.8rem;
              text-align: center;
            "
          >
            <strong>DEBUG:</strong> Paso actual: {{ currentStep() }} | Título:
            {{ getStepTitle() }} | Form válido: {{ isFormValid() }}
            <br />
            <strong>Iconos:</strong>
            <span [style.color]="currentStep() === 1 ? '#32cd32' : '#ff6b6b'"
              >📧 Envelope{{ currentStep() === 1 ? " ✅" : " ❌" }}</span
            >
            |
            <span [style.color]="currentStep() === 2 ? '#32cd32' : '#ff6b6b'"
              >🛡️ Shield{{ currentStep() === 2 ? " ✅" : " ❌" }}</span
            >
            |
            <span [style.color]="currentStep() === 3 ? '#32cd32' : '#ff6b6b'"
              >🔑 Key{{ currentStep() === 3 ? " ✅" : " ❌" }}</span
            >
            <br />
            <button
              type="button"
              (click)="debugCurrentStep()"
              style="
                margin: 0.25rem;
                padding: 0.25rem 0.5rem;
                background: rgba(0, 255, 0, 0.2);
                border: 1px solid rgba(0, 255, 0, 0.5);
                border-radius: 0.25rem;
                color: #b4a2fd;
                cursor: pointer;
              "
            >
              Debug Console
            </button>
            <button
              type="button"
              (click)="testStepChange(1)"
              style="
                margin: 0.25rem;
                padding: 0.25rem 0.5rem;
                background: rgba(65, 105, 225, 0.2);
                border: 1px solid rgba(65, 105, 225, 0.5);
                border-radius: 0.25rem;
                color: #b4a2fd;
                cursor: pointer;
              "
            >
              Ir a Paso 1
            </button>
            <button
              type="button"
              (click)="testStepChange(2)"
              style="
                margin: 0.25rem;
                padding: 0.25rem 0.5rem;
                background: rgba(50, 205, 50, 0.2);
                border: 1px solid rgba(50, 205, 50, 0.5);
                border-radius: 0.25rem;
                color: #b4a2fd;
                cursor: pointer;
              "
            >
              Ir a Paso 2
            </button>
            <button
              type="button"
              (click)="testStepChange(3)"
              style="
                margin: 0.25rem;
                padding: 0.25rem 0.5rem;
                background: rgba(218, 165, 32, 0.2);
                border: 1px solid rgba(218, 165, 32, 0.5);
                border-radius: 0.25rem;
                color: #b4a2fd;
                cursor: pointer;
              "
            >
              Ir a Paso 3
            </button>
          </div>
        </div> -->

        <form class="login-form" (ngSubmit)="onSubmit()" #recoveryForm="ngForm">
          <div *ngIf="currentStep() === 1">
            <div class="form-group">
              <label class="form-label" for="email">
                <i class="fas fa-envelope label-icon-professional"></i>
                Correo Electrónico
              </label>
              <div class="input-container">
                <input
                  id="email"
                  name="email"
                  type="email"
                  class="form-input"
                  [class.error]="
                    emailError() && (emailTouched() || isSubmitted())
                  "
                  [class.loading]="isLoading()"
                  placeholder="tu@email.com"
                  [(ngModel)]="credentials().email"
                  (blur)="onEmailBlur()"
                  (input)="onEmailChange($event)"
                  required
                  email
                  autocomplete="email"
                />
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
              <div
                class="error-message"
                *ngIf="emailError() && (emailTouched() || isSubmitted())"
              >
                <i class="fas fa-exclamation-circle mr-2"></i>
                {{ emailError() }}
              </div>

              <div class="field-hint-professional">
                <div class="hint-lightbulb-wrapper-recovery">
                  <i class="fas fa-lightbulb hint-bulb-icon-recovery"></i>
                  <div class="bulb-glow-hint-recovery"></div>
                  <div class="bulb-spark-hint-recovery"></div>
                </div>
                <strong>Consejo:</strong> Asegúrate de tener acceso a este email
                para recibir el código
              </div>
            </div>
          </div>

          <div *ngIf="currentStep() === 2">
            <div class="form-group">
              <label class="form-label">
                <i class="fas fa-check-double label-icon-professional"></i>
                Código de Verificación
              </label>
              <div class="code-input-container-professional">
                <div class="code-inputs-grid">
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 0)"
                    (keydown)="onCodeKeyDown($event, 0)"
                    (paste)="onCodePaste($event, 0)"
                    [attr.data-index]="0"
                    autocomplete="off"
                  />
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 1)"
                    (keydown)="onCodeKeyDown($event, 1)"
                    (paste)="onCodePaste($event, 1)"
                    [attr.data-index]="1"
                    autocomplete="off"
                  />
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 2)"
                    (keydown)="onCodeKeyDown($event, 2)"
                    (paste)="onCodePaste($event, 2)"
                    [attr.data-index]="2"
                    autocomplete="off"
                  />
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 3)"
                    (keydown)="onCodeKeyDown($event, 3)"
                    (paste)="onCodePaste($event, 3)"
                    [attr.data-index]="3"
                    autocomplete="off"
                  />
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 4)"
                    (keydown)="onCodeKeyDown($event, 4)"
                    (paste)="onCodePaste($event, 4)"
                    [attr.data-index]="4"
                    autocomplete="off"
                  />
                  <input
                    type="text"
                    maxlength="1"
                    class="code-input"
                    (input)="onCodeInput($event, 5)"
                    (keydown)="onCodeKeyDown($event, 5)"
                    (paste)="onCodePaste($event, 5)"
                    [attr.data-index]="5"
                    autocomplete="off"
                  />
                </div>
              </div>

              <div class="code-hint-professional">
                <div class="hint-envelope-wrapper">
                  <i class="fas fa-envelope hint-envelope-icon"></i>
                  <div class="hint-envelope-glow"></div>
                </div>
                Hemos enviado un código de 6 dígitos a
                <span class="email-highlight-professional">
                  <i class="fas fa-at"></i>
                  {{ credentials().email }}
                </span>
              </div>

              <div class="field-hint-professional">
                <div class="hint-lightbulb-wrapper-recovery">
                  <i class="fas fa-lightbulb hint-bulb-icon-recovery"></i>
                  <div class="bulb-glow-hint-recovery"></div>
                  <div class="bulb-spark-hint-recovery"></div>
                </div>
                <strong>Tip:</strong>&nbsp; Revisa tu bandeja de spam si no
                encuentras el email
              </div>
            </div>

            <button
              type="button"
              class="back-step-btn-professional"
              (click)="goToPreviousStep()"
            >
              <div class="back-icon-wrapper">
                <i class="fas fa-arrow-left back-arrow-icon"></i>
                <div class="back-arrow-trail"></div>
              </div>
              Cambiar Email
            </button>
          </div>

          <div *ngIf="currentStep() === 3">
            <div class="form-group">
              <label class="form-label" for="newPassword">
                <i class="fas fa-key label-icon-professional"></i>
                Nueva Contraseña
              </label>
              <div class="input-container">
                <input
                  id="newPassword"
                  name="newPassword"
                  [type]="showPassword() ? 'text' : 'password'"
                  class="form-input password-input"
                  [class.loading]="isLoading()"
                  placeholder="Ingresa tu nueva contraseña"
                  [ngModel]="newPassword()"
                  (input)="onNewPasswordChange($event)"
                  required
                  autocomplete="new-password"
                />
                <button
                  type="button"
                  class="password-toggle"
                  (click)="togglePasswordVisibility()"
                  [attr.aria-label]="
                    showPassword() ? 'Ocultar contraseña' : 'Mostrar contraseña'
                  "
                  tabindex="-1"
                >
                  <i
                    [class]="showPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'"
                  ></i>
                </button>
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
            </div>

            <div class="form-group">
              <label class="form-label" for="confirmPassword">
                <i class="fas fa-lock label-icon-professional"></i>
                Confirmar Contraseña
              </label>
              <div class="input-container">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  [type]="showConfirmPassword() ? 'text' : 'password'"
                  class="form-input password-input"
                  [class.loading]="isLoading()"
                  placeholder="Confirma tu nueva contraseña"
                  [ngModel]="confirmPassword()"
                  (input)="onConfirmPasswordChange($event)"
                  required
                  autocomplete="new-password"
                />
                <button
                  type="button"
                  class="password-toggle"
                  (click)="toggleConfirmPasswordVisibility()"
                  [attr.aria-label]="
                    showConfirmPassword()
                      ? 'Ocultar contraseña'
                      : 'Mostrar contraseña'
                  "
                  tabindex="-1"
                >
                  <i
                    [class]="
                      showConfirmPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'
                    "
                  ></i>
                </button>
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
            </div>

            <div class="field-hint-professional">
              <div class="hint-lightbulb-wrapper-recovery">
                <i class="fas fa-lightbulb hint-bulb-icon-recovery"></i>
                <div class="bulb-glow-hint-recovery"></div>
                <div class="bulb-spark-hint-recovery"></div>
              </div>
              <strong>Recomendación:</strong><br />&nbsp;&nbsp;Usa al menos 8
              caracteres con mayúsculas, números y símbolos
            </div>
          </div> <br>

          <button
            type="submit"
            class="login-submit-btn mystical-submit-enhanced-recovery"
            [disabled]="isLoading() || !isFormValid()"
            [class.loading]="isLoading()"
          >
            <span class="btn-content" *ngIf="!isLoading()">
              <div class="btn-icon-wrapper-recovery">
                <i
                  class="fas fa-paper-plane btn-icon-recovery"
                  *ngIf="currentStep() === 1"
                ></i>
                <i
                  class="fas fa-check-double btn-icon-recovery"
                  *ngIf="currentStep() === 2"
                ></i>
                <i
                  class="fas fa-key btn-icon-recovery"
                  *ngIf="currentStep() === 3"
                ></i>
                <div class="btn-icon-glow"></div>
              </div>
              <span class="btn-text">{{ getSubmitButtonText() }}</span>
              <div class="btn-arrow-wrapper-recovery">
                <i class="fas fa-arrow-right btn-arrow-icon-recovery"></i>
                <div class="arrow-trail-recovery"></div>
              </div>
            </span>
            <span class="btn-loading" *ngIf="isLoading()">
              <div class="spinner mystical-spinner-recovery">
                <div class="spinner-inner-recovery"></div>
                <div class="spinner-particles-recovery">
                  <div class="spinner-particle-recovery sp-1"></div>
                  <div class="spinner-particle-recovery sp-2"></div>
                  <div class="spinner-particle-recovery sp-3"></div>
                </div>
              </div>
              <span>{{ getSubmitButtonText() }}</span>
            </span>
          </button>

          <div class="error-alert-professional" *ngIf="loginError()">
            <div class="error-icon-wrapper">
              <i
                class="fas fa-exclamation-triangle error-icon-professional"
              ></i>
              <div class="error-icon-glow"></div>
            </div>
            {{ loginError() }}
          </div>
        </form>

        <div class="trust-indicators-professional">
          <div class="trust-item-professional">
            <div class="trust-icon-wrapper">
              <i class="fas fa-shield-alt trust-icon"></i>
              <div class="trust-icon-glow"></div>
            </div>
            <span>100% Seguro</span>
          </div>
          <div class="trust-item-professional">
            <div class="trust-icon-wrapper">
              <i class="fas fa-lock trust-icon"></i>
              <div class="trust-icon-glow"></div>
            </div>
            <span>Encriptado</span>
          </div>
          <div class="trust-item-professional">
            <div class="trust-icon-wrapper">
              <i class="fas fa-user-shield trust-icon"></i>
              <div class="trust-icon-glow"></div>
            </div>
            <span>Privado</span>
          </div>
          <div class="trust-item-professional">
            <div class="trust-icon-wrapper">
              <i class="fa-solid fa-wand-magic-sparkles trust-icon"></i>
              <div class="trust-icon-glow"></div>
            </div>
            <span>Arcana</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</div>



================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --accent-color: #8b4513;
  --success-color: #32cd32;
  --warning-color: #daa520;
  --error-color: #ff6b6b;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.2);
  --input-bg: rgba(16, 8, 32, 0.6);
  --input-border: rgba(180, 162, 253, 0.3);
  --shadow-primary: 0 0 20px rgba(180, 162, 253, 0.3);
  --shadow-glow: 0 0 30px rgba(180, 162, 253, 0.5);
  --backdrop-blur: blur(20px);

  --mystical-envelope-color: linear-gradient(
    135deg,
    #4169e1 0%,
    #b4a2fd 50%,
    #87ceeb 100%
  );
  --mystical-shield-color: linear-gradient(
    135deg,
    #32cd32 0%,
    #98fb98 50%,
    #b4a2fd 100%
  );
  --mystical-key-color: linear-gradient(
    135deg,
    #daa520 0%,
    #ffd700 50%,
    #b4a2fd 100%
  );
  --mystical-gem-color: linear-gradient(
    135deg,
    #9370db 0%,
    #b4a2fd 50%,
    #dda0dd 100%
  );
  --mystical-bulb-color: linear-gradient(
    135deg,
    #daa520 0%,
    #ffd700 50%,
    #ffffe0 100%
  );
}

.form-input {
  background: rgba(16, 8, 32, 0.6) !important;
  color: #b4a2fd !important;
  opacity: 1 !important;
  visibility: visible !important;

  &::placeholder {
    color: rgba(180, 162, 253, 0.5) !important;
    opacity: 1 !important;
  }
}

.code-input {
  background: rgba(16, 8, 32, 0.6) !important;
  border: 2px solid rgba(180, 162, 253, 0.3) !important;
  color: #ffffff !important;
  opacity: 1 !important;
  visibility: visible !important;
}

@keyframes mystical-envelope-pulse {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    filter: drop-shadow(0 0 20px rgba(65, 105, 225, 0.6));
  }
  25% {
    transform: scale(1.05) rotate(5deg);
    filter: drop-shadow(0 0 30px rgba(65, 105, 225, 0.8));
  }
  50% {
    transform: scale(1.1) rotate(0deg);
    filter: drop-shadow(0 0 40px rgba(65, 105, 225, 1));
  }
  75% {
    transform: scale(1.05) rotate(-5deg);
    filter: drop-shadow(0 0 30px rgba(65, 105, 225, 0.8));
  }
}

@keyframes mystical-shield-protection {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    filter: drop-shadow(0 0 20px rgba(50, 205, 50, 0.6));
  }
  20% {
    transform: scale(1.03) rotate(10deg);
    filter: drop-shadow(0 0 25px rgba(50, 205, 50, 0.7));
  }
  40% {
    transform: scale(1.08) rotate(-5deg);
    filter: drop-shadow(0 0 35px rgba(50, 205, 50, 0.9));
  }
  60% {
    transform: scale(1.05) rotate(15deg);
    filter: drop-shadow(0 0 30px rgba(50, 205, 50, 0.8));
  }
  80% {
    transform: scale(1.02) rotate(-10deg);
    filter: drop-shadow(0 0 25px rgba(50, 205, 50, 0.7));
  }
}

@keyframes mystical-key-transformation {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    filter: drop-shadow(0 0 20px rgba(218, 165, 32, 0.6));
  }
  16% {
    transform: scale(1.02) rotate(45deg);
    filter: drop-shadow(0 0 25px rgba(218, 165, 32, 0.7));
  }
  33% {
    transform: scale(1.05) rotate(90deg);
    filter: drop-shadow(0 0 30px rgba(218, 165, 32, 0.8));
  }
  50% {
    transform: scale(1.08) rotate(135deg);
    filter: drop-shadow(0 0 35px rgba(218, 165, 32, 0.9));
  }
  66% {
    transform: scale(1.05) rotate(180deg);
    filter: drop-shadow(0 0 30px rgba(218, 165, 32, 0.8));
  }
  83% {
    transform: scale(1.02) rotate(270deg);
    filter: drop-shadow(0 0 25px rgba(218, 165, 32, 0.7));
  }
}

@keyframes professional-sparkle-trail-recovery {
  0% {
    opacity: 0;
    transform: translateX(-20px) scale(0);
  }
  50% {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateX(20px) scale(0);
  }
}

@keyframes mystical-particle-float-recovery {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(0.8);
  }
  25% {
    opacity: 0.7;
    transform: translateY(-12px) translateX(8px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-20px) translateX(-5px) scale(1.2);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) translateX(12px) scale(0.9);
  }
}

@keyframes energy-ring-pulse {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    opacity: 0.8;
  }
  25% {
    transform: scale(1.1) rotate(90deg);
    opacity: 1;
  }
  50% {
    transform: scale(1.2) rotate(180deg);
    opacity: 0.9;
  }
  75% {
    transform: scale(1.1) rotate(270deg);
    opacity: 1;
  }
}

@keyframes gentle-pulse {
  0%,
  100% {
    transform: scale(1);
    opacity: 0.8;
  }
  50% {
    transform: scale(1.05);
    opacity: 1;
  }
}

@keyframes lightbulb-illuminate-recovery {
  0%,
  100% {
    filter: drop-shadow(0 0 8px rgba(218, 165, 32, 0.4));
    transform: scale(1);
  }
  50% {
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.8));
    transform: scale(1.1);
  }
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.8);
  }
}

@keyframes float-up {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

.star {
  position: absolute;
  background: var(--primary-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);

  &.large {
    width: 3px;
    height: 3px;
    animation: twinkle 4s ease-in-out infinite;
  }

  &.medium {
    width: 2px;
    height: 2px;
    animation: twinkle 3s ease-in-out infinite;
  }

  &.small {
    width: 1px;
    height: 1px;
    animation: twinkle 5s ease-in-out infinite;
  }
}

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
}

.floating-sparkle {
  position: absolute;
  width: 1.5px;
  height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
}

.mystical-gradient {
  background: radial-gradient(
      ellipse at 20% 30%,
      rgba(180, 162, 253, 0.05) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 80% 70%,
      rgba(180, 162, 253, 0.03) 0%,
      transparent 50%
    );
  width: 100%;
  height: 100%;
}

.back-home-btn {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 0.5rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  cursor: pointer;

  &:hover {
    background: rgba(180, 162, 253, 0.15);
    transform: translateY(-2px);
    box-shadow: var(--shadow-primary);
  }
}

.login-container {
  width: 100%;
  max-width: 500px;
  background: var(--glass-bg);
  backdrop-filter: var(--backdrop-blur);
  border: 1px solid var(--glass-border);
  border-radius: 1.5rem;
  padding: 3rem 2.5rem;
  box-shadow: var(--shadow-primary);
  animation: float-up 0.8s ease-out;
  position: relative;
  overflow: hidden;
}

.login-container::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.1) 100%
  );
  pointer-events: none;
  z-index: -1;
}

.login-header {
  text-align: center;
  margin-bottom: 2.5rem;
}

.login-icon-container {
  position: relative;
  display: inline-block;
  margin-bottom: 1.5rem;
}

.step-icon-wrapper {
  position: relative;
  display: inline-block;
  width: 5rem;
  height: 5rem;
  margin: 0 auto;
}

/* 🔥 CUALQUIER ICONO EN EL PASO 2 DEBE SER VISIBLE */
.step-icon-wrapper i {
  display: block !important;
  opacity: 1 !important;
  visibility: visible !important;
  font-size: 4rem !important;
  color: #32cd32 !important;
  z-index: 9999 !important;
  position: relative !important;
}

/* 🔥 FORZAR CONTENEDOR DEL PASO 2 */
.step-icon-wrapper {
  display: block !important;
  opacity: 1 !important;
  visibility: visible !important;
  z-index: 9999 !important;
}

.step-icon-wrapper {
  position: relative;
  width: 5rem;
  height: 5rem;
  margin: 0 auto;
  animation: step-icon-appear 0.5s ease-out;
}

@keyframes step-icon-appear {
  0% {
    opacity: 0;
    transform: scale(0.8) translateY(10px);
  }
  100% {
    opacity: 1;
    transform: scale(1) translateY(0);
  }
}

.mystical-envelope-wrapper-recovery,
.mystical-shield-wrapper-recovery,
.mystical-key-wrapper-recovery {
  position: relative;
  display: inline-block;
  width: 100%;
  height: 100%;
}

.email-sparkle-professional,
.verification-sparkle-professional,
.password-sparkle-professional {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  z-index: 5;
}

.mystical-envelope-icon-recovery {
  font-size: 4rem;
  background: var(--mystical-envelope-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: mystical-envelope-pulse 4s ease-in-out infinite;
  display: block;
  text-align: center;
  line-height: 1;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 25px rgba(65, 105, 225, 0.6));
}

.envelope-inner-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3.5rem;
  height: 3.5rem;
  background: radial-gradient(
    circle,
    rgba(65, 105, 225, 0.25) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.envelope-outer-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 5.5rem;
  height: 5.5rem;
  background: radial-gradient(
    circle,
    rgba(65, 105, 225, 0.12) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4.5s ease-in-out infinite reverse;
  z-index: 0;
}

.envelope-energy-waves-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  z-index: 2;
}

.energy-wave-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(65, 105, 225, 0.3);
  border-radius: 50%;
  animation: energy-ring-pulse 6s ease-in-out infinite;
}

.wave-1 {
  width: 4rem;
  height: 4rem;
  animation-delay: 0s;
}

.wave-2 {
  width: 5rem;
  height: 5rem;
  animation-delay: 2s;
}

.wave-3 {
  width: 6rem;
  height: 6rem;
  animation-delay: 4s;
}

.envelope-particles-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.env-particle-recovery {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(65, 105, 225, 0.7);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(65, 105, 225, 0.5);
  animation: mystical-particle-float-recovery 7s ease-in-out infinite;
}

.env-p-1 {
  top: 15%;
  left: 75%;
  animation-delay: 0s;
}

.env-p-2 {
  top: 75%;
  left: 25%;
  animation-delay: 1.75s;
}

.env-p-3 {
  top: 25%;
  left: 20%;
  animation-delay: 3.5s;
}

.env-p-4 {
  top: 80%;
  left: 80%;
  animation-delay: 5.25s;
}

.mystical-shield-wrapper-recovery {
  position: relative !important;
  display: inline-block !important;
  width: 100% !important;
  height: 100% !important;
  opacity: 1 !important;
  visibility: visible !important;
  z-index: 999 !important;
}

.mystical-shield-icon-recovery {
  font-size: 4rem !important;
  /* 🔥 FORZAR COLOR SÓLIDO VERDE PARA DEBUG */
  color: #32cd32 !important;
  background: none !important;
  /* Comentar gradiente temporalmente para debug */
  /* background: var(--mystical-shield-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent; */

  animation: mystical-shield-protection 5s ease-in-out infinite !important;
  display: block !important;
  text-align: center !important;
  line-height: 1 !important;
  position: relative !important;
  z-index: 1000 !important;
  opacity: 1 !important;
  visibility: visible !important;

  /* 🔥 SHADOW FORZADO PARA MÁXIMA VISIBILIDAD */
  filter: drop-shadow(0 0 25px rgba(50, 205, 50, 0.8)) !important;
  text-shadow: 0 0 10px rgba(50, 205, 50, 0.8) !important;
}

.shield-inner-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3.5rem;
  height: 3.5rem;
  background: radial-gradient(
    circle,
    rgba(50, 205, 50, 0.25) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3.5s ease-in-out infinite;
  z-index: 1;
}

.shield-outer-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 5.5rem;
  height: 5.5rem;
  background: radial-gradient(
    circle,
    rgba(50, 205, 50, 0.12) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 5s ease-in-out infinite reverse;
  z-index: 0;
}

.shield-protection-rings {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  z-index: 2;
}

.protection-ring {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(50, 205, 50, 0.4);
  border-radius: 50%;
  animation: energy-ring-pulse 5s ease-in-out infinite;
}

.p-ring-1 {
  width: 3.5rem;
  height: 3.5rem;
  animation-delay: 0s;
}

.p-ring-2 {
  width: 4.5rem;
  height: 4.5rem;
  animation-delay: 1.67s;
}

.p-ring-3 {
  width: 5.5rem;
  height: 5.5rem;
  animation-delay: 3.33s;
}

.shield-particles-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.shield-particle-recovery {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(50, 205, 50, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(50, 205, 50, 0.6);
  animation: mystical-particle-float-recovery 6s ease-in-out infinite;
}

.s-p-1 {
  top: 20%;
  left: 70%;
  animation-delay: 0s;
}

.s-p-2 {
  top: 70%;
  left: 30%;
  animation-delay: 1.5s;
}

.s-p-3 {
  top: 30%;
  left: 85%;
  animation-delay: 3s;
}

.s-p-4 {
  top: 85%;
  left: 15%;
  animation-delay: 4.5s;
}

.mystical-key-wrapper-recovery {
  position: relative;
  display: inline-block;
  width: 100%;
  height: 100%;
}

.mystical-key-icon-recovery {
  font-size: 4rem;
  background: var(--mystical-key-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: mystical-key-transformation 6s ease-in-out infinite;
  display: block;
  text-align: center;
  line-height: 1;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 25px rgba(218, 165, 32, 0.6));
}

.key-inner-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3.5rem;
  height: 3.5rem;
  background: radial-gradient(
    circle,
    rgba(218, 165, 32, 0.25) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
  z-index: 1;
}

.key-outer-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 5.5rem;
  height: 5.5rem;
  background: radial-gradient(
    circle,
    rgba(218, 165, 32, 0.12) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 5.5s ease-in-out infinite reverse;
  z-index: 0;
}

.key-transformation-waves {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  z-index: 2;
}

.transformation-wave {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(218, 165, 32, 0.4);
  border-radius: 50%;
  animation: energy-ring-pulse 4s ease-in-out infinite;
}

.t-wave-1 {
  width: 3.8rem;
  height: 3.8rem;
  animation-delay: 0s;
}

.t-wave-2 {
  width: 4.8rem;
  height: 4.8rem;
  animation-delay: 1.33s;
}

.t-wave-3 {
  width: 5.8rem;
  height: 5.8rem;
  animation-delay: 2.67s;
}

.key-particles-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.key-particle-recovery {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(218, 165, 32, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(218, 165, 32, 0.6);
  animation: mystical-particle-float-recovery 5s ease-in-out infinite;
}

.k-p-1 {
  top: 18%;
  left: 65%;
  animation-delay: 0s;
}

.k-p-2 {
  top: 65%;
  left: 35%;
  animation-delay: 1.25s;
}

.k-p-3 {
  top: 35%;
  left: 80%;
  animation-delay: 2.5s;
}

.k-p-4 {
  top: 80%;
  left: 20%;
  animation-delay: 3.75s;
}

.email-sparkle-professional,
.verification-sparkle-professional,
.password-sparkle-professional {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  z-index: 5;
}

.email-sparkle-icon,
.verification-sparkle-icon,
.password-sparkle-icon {
  font-size: 1.5rem;
  animation: professional-sparkle 3.5s ease-in-out infinite;
  filter: drop-shadow(0 0 12px rgba(135, 206, 235, 0.6));
}

.email-sparkle-icon {
  color: #87ceeb;
}

.verification-sparkle-icon {
  color: #98fb98;
}

.password-sparkle-icon {
  color: #ffd700;
}

.email-sparkle-trail,
.verification-sparkle-trail,
.password-sparkle-trail {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 2px;
  background: rgba(135, 206, 235, 0.8);
  border-radius: 50%;
  animation: professional-sparkle-trail-recovery 2.5s ease-in-out infinite;
}

.e-trail-1,
.v-trail-1,
.p-trail-1 {
  animation-delay: 0.7s;
  transform: translate(-50%, -50%) rotate(60deg);
}

.e-trail-2,
.v-trail-2,
.p-trail-2 {
  animation-delay: 1.4s;
  transform: translate(-50%, -50%) rotate(-60deg);
}

.icon-secondary-professional-recovery {
  position: absolute;
  bottom: -0.25rem;
  left: -0.25rem;
  z-index: 3;
}

.mystical-gem-mini-recovery {
  position: relative;
  display: inline-block;
}

.gem-mini-icon-recovery {
  font-size: 1.25rem;
  background: var(--mystical-gem-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: gentle-pulse 4s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(147, 112, 219, 0.5));
}

.gem-mini-glow-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(147, 112, 219, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 5s ease-in-out infinite;
}

.login-title {
  font-size: 2rem;
  font-weight: 300;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.absolute.top-6.left-6.z-20 {
  position: fixed !important;
  top: 1.5rem !important;
  left: 1.5rem !important;
  z-index: 9999 !important;
}
@media (max-width: 768px) {
  .absolute.top-6.left-6.z-20 {
    position: fixed !important;
    top: 1rem !important;
    left: 1rem !important;
  }
}

.title-highlight {
  font-weight: 600;
  background: linear-gradient(135deg, var(--primary-color), #ffffff);
  -webkit-background-clip: text;
  background-clip: text;
}

.login-subtitle {
  font-size: 1rem;
  opacity: 0.8;
  color: var(--primary-color);
  line-height: 1.5;
  margin-bottom: 1.5rem;
  max-width: 400px;
  margin-left: auto;
  margin-right: auto;
}

.progress-indicator-professional {
  margin: 1.5rem 0;
}

.progress-steps {
  display: flex;
  justify-content: center;
  align-items: center;
  gap: 0.5rem;
}

.progress-step {
  position: relative;
  display: flex;
  align-items: center;
}

.step-circle {
  width: 2.5rem;
  height: 2.5rem;
  border: 2px solid var(--input-border);
  border-radius: 50%;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--primary-color);
  font-size: 0.875rem;
  transition: all 0.4s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 0;
    height: 0;
    background: radial-gradient(
      circle,
      rgba(180, 162, 253, 0.3) 0%,
      transparent 70%
    );
    border-radius: 50%;
    transition: all 0.4s ease;
    z-index: -1;
  }
}

.progress-step.active .step-circle {
  border-color: var(--primary-color);
  background: rgba(180, 162, 253, 0.15);
  color: var(--primary-color);
  box-shadow: 0 0 20px rgba(180, 162, 253, 0.4);

  &::before {
    width: 3rem;
    height: 3rem;
  }
}

.progress-step.completed .step-circle {
  border-color: var(--success-color);
  background: var(--success-color);
  color: white;
  box-shadow: 0 0 20px rgba(50, 205, 50, 0.4);
}

.step-connector {
  width: 2rem;
  height: 2px;
  background: var(--input-border);
  transition: all 0.4s ease;
  position: relative;
  overflow: hidden;

  &.active {
    background: var(--success-color);
    box-shadow: 0 0 10px rgba(50, 205, 50, 0.4);

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.4),
        transparent
      );
      animation: shimmer 2s ease-in-out infinite;
    }
  }
}

.login-form {
  margin-bottom: 1.5rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--primary-color);
  margin-bottom: 0.5rem;
}

.label-icon-professional {
  width: 1rem;
  margin-right: 0.5rem;
  opacity: 0.8;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

  &.fas.fa-envelope {
    color: #4169e1;
  }

  &.fas.fa-check-double {
    color: #32cd32;
  }

  &.fas.fa-key,
  &.fas.fa-lock {
    color: #daa520;
  }
}

.input-container {
  position: relative;
  width: 100%;
}

.form-input {
  width: 100%;
  padding: 1rem 1.25rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  color: var(--primary-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;

  &::placeholder {
    color: rgba(180, 162, 253, 0.5);
  }

  &:focus {
    outline: none;
    border-color: var(--primary-color);
    background: rgba(16, 8, 32, 0.8);
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.1);
  }

  &.error {
    border-color: var(--error-color);
    background: rgba(255, 107, 107, 0.1);
  }

  &.loading {
    position: relative;
    overflow: hidden;

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(180, 162, 253, 0.1),
        transparent
      );
      animation: shimmer 1.5s infinite;
    }
  }
}

.input-border {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 0.75rem;
  padding: 1px;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.3),
    transparent,
    rgba(180, 162, 253, 0.3)
  );
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.form-input:focus + .input-border {
  opacity: 1;
}

.input-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.form-input:focus + .input-border + .input-glow {
  width: 170%;
  height: 110%;
}

.password-input {
  padding-right: 3rem;
}

.code-input-container-professional {
  margin-bottom: 1.5rem;
}

.code-inputs-grid-recovery {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  gap: 0.75rem;
  margin-bottom: 1rem;
  max-width: 360px;
  margin-left: auto;
  margin-right: auto;
}

.field-hint-professional {
  display: flex;
  align-items: center;
  color: var(--primary-color);
  font-size: 0.8rem;
  margin-top: 0.75rem;
  opacity: 0.8;
  font-style: italic;
  padding: 0.75rem;
  background: rgba(180, 162, 253, 0.05);
  border: 1px solid rgba(180, 162, 253, 0.1);
  border-radius: 0.5rem;
  backdrop-filter: blur(5px);
}

.hint-lightbulb-wrapper-recovery {
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
  position: relative;
}

.hint-bulb-icon-recovery {
  font-size: 1rem;
  background: var(--mystical-bulb-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: lightbulb-illuminate-recovery 3s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(218, 165, 32, 0.4));
}

.bulb-glow-hint-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 215, 0, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2.5s ease-in-out infinite;
}

.bulb-spark-hint-recovery {
  position: absolute;
  top: -2px;
  right: -2px;
  width: 3px;
  height: 3px;
  background: rgba(255, 215, 0, 0.8);
  border-radius: 50%;
  animation: professional-sparkle 2s ease-in-out infinite;
}

.code-hint-professional {
  text-align: center;
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.8;
  margin-top: 0.75rem;
  line-height: 1.4;
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
}

.hint-envelope-wrapper {
  display: inline-flex;
  align-items: center;
  position: relative;
  margin-bottom: 0.5rem;
}

.hint-envelope-icon {
  font-size: 1rem;
  color: #87ceeb;
  animation: gentle-pulse 3s ease-in-out infinite;
  filter: drop-shadow(0 0 6px rgba(135, 206, 235, 0.4));
}

.hint-envelope-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(135, 206, 235, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
}

.email-highlight-professional {
  display: inline-flex;
  align-items: center;
  background: rgba(180, 162, 253, 0.2);
  padding: 0.25rem 0.75rem;
  border-radius: 0.5rem;
  border: 1px solid rgba(180, 162, 253, 0.3);
  backdrop-filter: blur(10px);
  font-weight: 600;
  color: #ffffff;
  gap: 0.5rem;

  i {
    color: #87ceeb;
  }
}

.mystical-submit-enhanced-recovery {
  position: relative;
  overflow: hidden;
  width: 100%;
  padding: 1.25rem 1.5rem;
  background: linear-gradient(135deg, var(--primary-color), #9b87fd);
  border: none;
  border-radius: 0.75rem;
  color: var(--secondary-color);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 1.5rem;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.6s ease;
  }

  &:not(:disabled):hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-glow);

    &::before {
      left: 100%;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  &.loading {
    cursor: not-allowed;
  }
}

.btn-content {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
}

.btn-icon-wrapper-recovery {
  position: relative;
  display: inline-flex;
  align-items: center;
}

.btn-icon-recovery {
  font-size: 1rem;
  color: var(--secondary-color);
  animation: gentle-pulse 3s ease-in-out infinite;
  position: relative;
  z-index: 2;
}

.btn-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2s ease-in-out infinite;
  z-index: 1;
}

.btn-arrow-wrapper-recovery {
  position: relative;
  display: inline-flex;
  align-items: center;
}

.btn-arrow-icon-recovery {
  font-size: 1rem;
  color: var(--secondary-color);
  transition: transform 0.3s ease;
  position: relative;
  z-index: 2;
}

.mystical-submit-enhanced-recovery:not(:disabled):hover
  .btn-arrow-icon-recovery {
  transform: translateX(4px);
}

.arrow-trail-recovery {
  position: absolute;
  top: 50%;
  left: -10px;
  width: 20px;
  height: 2px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.5),
    transparent
  );
  animation: shimmer 2s ease-in-out infinite;
  opacity: 0;
  z-index: 1;
}

.mystical-submit-enhanced-recovery:not(:disabled):hover .arrow-trail-recovery {
  opacity: 1;
}

.btn-loading {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
}

.mystical-spinner-recovery {
  position: relative;
  width: 1.5rem;
  height: 1.5rem;
}

.spinner-inner-recovery {
  width: 100%;
  height: 100%;
  border: 3px solid rgba(16, 8, 32, 0.3);
  border-top: 3px solid var(--secondary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.spinner-particles-recovery {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.spinner-particle-recovery {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  animation: mystical-particle-float-recovery 2s ease-in-out infinite;
}

.sp-1 {
  top: 10%;
  left: 50%;
  animation-delay: 0s;
}

.sp-2 {
  top: 50%;
  left: 90%;
  animation-delay: 0.67s;
}

.sp-3 {
  top: 90%;
  left: 50%;
  animation-delay: 1.33s;
}

.back-step-btn-professional {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1rem;
  background: none;
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  margin-bottom: 1.5rem;
  width: 100%;
  opacity: 0.8;
  backdrop-filter: blur(10px);
  gap: 0.5rem;

  &:hover {
    background: rgba(180, 162, 253, 0.1);
    border-color: var(--primary-color);
    opacity: 1;
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(180, 162, 253, 0.2);
  }
}

.back-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
}

.back-arrow-icon {
  font-size: 0.875rem;
  color: var(--primary-color);
  transition: transform 0.3s ease;
  position: relative;
  z-index: 2;
}

.back-step-btn-professional:hover .back-arrow-icon {
  transform: translateX(-3px);
}

.back-arrow-trail {
  position: absolute;
  top: 50%;
  right: -8px;
  width: 15px;
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.5),
    transparent
  );
  animation: shimmer 2s ease-in-out infinite;
  opacity: 0;
  z-index: 1;
}

.back-step-btn-professional:hover .back-arrow-trail {
  opacity: 1;
}

.error-alert-professional {
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 0.75rem;
  padding: 1rem 1.25rem;
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  animation: float-up 0.3s ease-out;
  backdrop-filter: blur(10px);
}

.error-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
}

.error-icon-professional {
  font-size: 1.125rem;
  color: var(--error-color);
  animation: gentle-pulse 2s ease-in-out infinite;
  position: relative;
  z-index: 2;
}

.error-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 107, 107, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2s ease-in-out infinite;
  z-index: 1;
}

.error-message {
  display: flex;
  align-items: center;
  color: #ff4444 !important;
  font-size: 0.875rem;
  font-weight: 500;
  margin-top: 0.25rem;
  padding: 0.5rem 0.75rem;
  animation: float-up 0.3s ease-out;

  &.hidden {
    display: none;
  }
}

.trust-indicators-professional {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--input-border);
}

.trust-item-professional {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.75rem;
  color: var(--primary-color);
  opacity: 0.7;
  text-align: center;
  transition: all 0.3s ease;

  &:hover {
    opacity: 0.9;
    transform: translateY(-2px);
  }
}

.trust-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-bottom: 0.5rem;
}

.trust-icon {
  font-size: 1.125rem;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

  &.fas.fa-shield-alt {
    color: #32cd32;
  }

  &.fas.fa-lock {
    color: #daa520;
  }

  &.fas.fa-user-shield {
    color: #9370db;
  }

  &.fa-solid.fa-wand-magic-sparkles {
    color: #b4a2fd;
  }
}

.trust-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
}

.trust-item-professional:hover .trust-icon {
  transform: scale(1.2);
  filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
}

.trust-item-professional:hover .trust-icon-glow {
  width: 2rem;
  height: 2rem;
}

@media (max-width: 768px) {
  .login-container {
    margin: 1rem;
    padding: 2.5rem 2rem;
    border-radius: 1rem;
    max-width: none;
  }

  .step-icon-wrapper {
    width: 4.5rem;
    height: 4.5rem;
  }

  .mystical-envelope-icon-recovery,
  .mystical-shield-icon-recovery,
  .mystical-key-icon-recovery {
    font-size: 3.5rem;
  }

  .login-title {
    font-size: 1.75rem;
  }

  .progress-steps {
    gap: 0.25rem;
  }

  .step-circle {
    width: 2rem;
    height: 2rem;
    font-size: 0.75rem;
  }

  .step-connector {
    width: 1.5rem;
  }

  .trust-indicators-professional {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
  }

  .code-input-professional {
    height: 3rem;
    font-size: 1.25rem;
  }
}

.password-input {
  padding-right: 3rem;
}

.password-toggle {
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  font-size: 1rem;
  opacity: 0.7;
  transition: opacity 0.3s ease;
  z-index: 3;

  &:hover {
    opacity: 1;
  }
}

.code-inputs-grid {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  gap: 1rem;
  margin-bottom: 1.5rem;
  max-width: 360px;
  margin-left: auto;
  margin-right: auto;
}

.code-input {
  width: 100%;
  height: 4rem;
  background: var(--input-bg) !important;
  border: 2px solid var(--input-border);
  border-radius: 0.75rem;
  color: #ffffff !important;
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  text-align: center !important;
  line-height: 1 !important;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  position: relative;
  outline: none;

  &::placeholder {
    color: rgba(255, 255, 255, 0.3) !important;
    font-weight: 400 !important;
  }

  &:focus {
    border-color: var(--primary-color) !important;
    background: rgba(16, 8, 32, 0.9) !important;
    color: #ffffff !important;
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.2),
      0 0 20px rgba(180, 162, 253, 0.3) !important;
    transform: scale(1.05);
  }

  &.filled {
    border-color: var(--success-color) !important;
    background: rgba(50, 205, 50, 0.1) !important;
    color: #ffffff !important;
    font-weight: 700 !important;
    box-shadow: 0 0 15px rgba(50, 205, 50, 0.2) !important;
  }

  &.error {
    border-color: var(--error-color) !important;
    background: rgba(255, 107, 107, 0.1) !important;
    color: #ffffff !important;
    box-shadow: 0 0 15px rgba(255, 107, 107, 0.2) !important;
  }
}

@media (max-width: 480px) {
  .code-input {
    height: 3rem !important;
    font-size: 1.25rem !important;
  }
}

@media (prefers-contrast: high) {
  .code-input {
    color: #ffffff !important;
    background: #000000 !important;
    border-color: #ffffff !important;

    &.filled {
      color: #00ff00 !important;
      border-color: #00ff00 !important;
    }

    &.error {
      color: #ff0000 !important;
      border-color: #ff0000 !important;
    }
  }
}

@media (max-width: 480px) {
  .login-container {
    padding: 2rem 1.5rem;
    margin: 0.5rem;
  }

  .step-icon-wrapper {
    width: 4rem;
    height: 4rem;
  }

  .mystical-envelope-icon-recovery,
  .mystical-shield-icon-recovery,
  .mystical-key-icon-recovery {
    font-size: 3rem;
  }

  .login-title {
    font-size: 1.5rem;
  }

  .trust-indicators-professional {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }

  .code-inputs-grid-recovery {
    gap: 0.4rem;
    max-width: 280px;
  }

  .code-input-professional {
    height: 2.8rem;
    font-size: 1.125rem;
  }

  .progress-steps {
    flex-direction: column;
    gap: 0.5rem;
  }

  .step-connector {
    width: 2px;
    height: 1.5rem;
  }
}

@media (prefers-reduced-motion: reduce) {
  .mystical-envelope-icon-recovery,
  .mystical-shield-icon-recovery,
  .mystical-key-icon-recovery,
  .email-sparkle-icon,
  .verification-sparkle-icon,
  .password-sparkle-icon,
  .hint-bulb-icon-recovery,
  .gem-mini-icon-recovery,
  .hint-envelope-icon {
    animation: none !important;
  }

  .envelope-inner-glow-recovery,
  .envelope-outer-glow-recovery,
  .shield-inner-glow-recovery,
  .shield-outer-glow-recovery,
  .key-inner-glow-recovery,
  .key-outer-glow-recovery,
  .gem-mini-glow-recovery,
  .bulb-glow-hint-recovery,
  .hint-envelope-glow,
  .btn-icon-glow,
  .error-icon-glow,
  .trust-icon-glow {
    animation: none !important;
  }

  .envelope-particles-recovery .env-particle-recovery,
  .shield-particles-recovery .shield-particle-recovery,
  .key-particles-recovery .key-particle-recovery,
  .spinner-particles-recovery .spinner-particle-recovery {
    animation: none !important;
    opacity: 0.3 !important;
  }

  .email-sparkle-trail,
  .verification-sparkle-trail,
  .password-sparkle-trail,
  .arrow-trail-recovery,
  .back-arrow-trail {
    display: none !important;
  }
}

@media (prefers-contrast: high) {
  .mystical-envelope-icon-recovery,
  .mystical-shield-icon-recovery,
  .mystical-key-icon-recovery,
  .hint-bulb-icon-recovery,
  .gem-mini-icon-recovery {
    color: #ffffff !important;
    background: none !important;
    -webkit-background-clip: initial !important;
    background-clip: initial !important;
    filter: none !important;
  }

  .email-sparkle-icon,
  .verification-sparkle-icon,
  .password-sparkle-icon {
    color: #ffff00 !important;
    filter: none !important;
  }

  .envelope-inner-glow-recovery,
  .envelope-outer-glow-recovery,
  .shield-inner-glow-recovery,
  .shield-outer-glow-recovery,
  .key-inner-glow-recovery,
  .key-outer-glow-recovery,
  .gem-mini-glow-recovery,
  .bulb-glow-hint-recovery,
  .hint-envelope-glow,
  .btn-icon-glow,
  .error-icon-glow,
  .trust-icon-glow {
    display: none !important;
  }

  .code-input-professional {
    color: #ffffff !important;
    background: #000000 !important;
    border-color: #ffffff !important;

    &.filled {
      color: #00ff00 !important;
      border-color: #00ff00 !important;
    }
  }
}

button:focus-visible,
input:focus-visible,
.code-input-professional:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.hidden {
  display: none !important;
}

.form-group:hover .label-icon-professional {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

@keyframes professional-sparkle {
  0%,
  100% {
    opacity: 0.6;
    transform: scale(1) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: scale(1.1) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1.2) rotate(180deg);
  }
  75% {
    opacity: 0.8;
    transform: scale(1.1) rotate(270deg);
  }
}

.mystical-shield-icon-recovery.fa-check-double {
  display: block !important;
  opacity: 1 !important;
  visibility: visible !important;
  color: #32cd32 !important;
  font-size: 4rem !important;
  z-index: 1000 !important;
  position: relative !important;
  text-shadow: 0 0 20px rgba(50, 205, 50, 0.8) !important;
}



================================================
File: app/features/auth/pages/forgot-password/forgot-password.component.ts
================================================
import {
  Component,
  signal,
  OnInit,
  OnDestroy,
  Inject,
  PLATFORM_ID,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Subject } from 'rxjs';

// ============ INTERFACES BÁSICAS ============

export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe: boolean;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: any;
  message?: string;
  errors?: ValidationError[];
}

@Component({
  selector: 'app-forgot-password',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './forgot-password.component.html',
  styleUrls: ['./forgot-password.component.scss'],
})
export class ForgotPasswordComponent implements OnInit, OnDestroy {
  // ============ PROPIEDADES BÁSICAS ============

  private isBrowser: boolean;
  private destroy$ = new Subject<void>();

  // Estados del formulario
  credentials = signal<LoginCredentials>({
    email: '',
    password: '',
    rememberMe: false,
  });

  // Estados de UI
  isLoading = signal<boolean>(false);
  isSubmitted = signal<boolean>(false);
  showPassword = signal<boolean>(false);
  showConfirmPassword = signal<boolean>(false);

  // Control de flujo
  currentStep = signal<number>(1); // 1: email, 2: código, 3: nueva contraseña

  // Estados de verificación de código
  verificationCode = signal<string[]>(['', '', '', '', '', '']);
  newPassword = signal<string>('');
  confirmPassword = signal<string>('');

  // Estados de validación
  emailTouched = signal<boolean>(false);
  emailError = signal<string>('');
  loginError = signal<string>('');
  codeError = signal<string>('');

  // URL de retorno
  private returnUrl: string = '/dashboard';

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private cdr: ChangeDetectorRef,
    @Inject(PLATFORM_ID) platformId: Object
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
    this.initializeComponent();
    this.trackPageView();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // ============ INICIALIZACIÓN ============

  private initializeComponent(): void {
    // Pre-llenar email si viene de query params
    const email = this.route.snapshot.queryParams['email'];
    if (email) {
      this.credentials.update((cred) => ({ ...cred, email }));
    }

    // Obtener URL de retorno
    this.returnUrl =
      this.route.snapshot.queryParams['returnUrl'] || '/dashboard';

    this.clearErrors();
  }

  private trackPageView(): void {
    console.log('📊 Forgot Password page loaded');
  }

  // ============ VALIDACIONES ============

  private validateEmail(email: string): string {
    if (!email) return 'El correo electrónico es requerido';
    if (!/^[^\s@]+@[^\s@]+\.[^\s@]+$/.test(email))
      return 'Ingresa un correo electrónico válido';
    return '';
  }

  private validatePasswords(): string {
    if (!this.newPassword() || !this.confirmPassword()) {
      return 'Ambas contraseñas son requeridas';
    }
    if (this.newPassword() !== this.confirmPassword()) {
      return 'Las contraseñas no coinciden';
    }
    if (this.newPassword().length < 6) {
      return 'La contraseña debe tener al menos 6 caracteres';
    }
    return '';
  }

  // ============ EVENT HANDLERS ============

  onEmailChange(event: any): void {
    const email = event.target.value;
    this.credentials.update((cred) => ({ ...cred, email }));

    if (this.emailTouched()) {
      this.emailError.set(this.validateEmail(email));
    }
  }

  onEmailBlur(): void {
    this.emailTouched.set(true);
    const email = this.credentials().email;
    this.emailError.set(this.validateEmail(email));
  }

  onNewPasswordChange(event: any): void {
    this.newPassword.set(event.target.value);
  }

  onConfirmPasswordChange(event: any): void {
    this.confirmPassword.set(event.target.value);
  }

  togglePasswordVisibility(): void {
    this.showPassword.update((show) => !show);
  }

  toggleConfirmPasswordVisibility(): void {
    this.showConfirmPassword.update((show) => !show);
  }

  // ============ CODE INPUT HANDLING ============

  onCodeInput(event: Event, index: number): void {
    const target = event.target as HTMLInputElement;
    const digit = target.value.replace(/[^0-9]/g, '').slice(-1);

    target.value = digit;

    // Actualizar signal
    const currentCode = [...this.verificationCode()];
    currentCode[index] = digit;
    this.verificationCode.set(currentCode);

    // Limpiar errores
    if (this.codeError()) {
      this.codeError.set('');
    }

    // Focus al siguiente
    if (digit && index < 5) {
      const nextInput = document.querySelector(
        `input[data-index="${index + 1}"]`
      ) as HTMLInputElement;
      nextInput?.focus();
    }

    // Auto-verificación cuando se completan los 6 dígitos
    if (digit && currentCode.every((d) => d !== '')) {
      setTimeout(() => this.handleCodeVerification(), 500);
    }
  }

  onCodeKeyDown(event: KeyboardEvent, index: number): void {
    const target = event.target as HTMLInputElement;

    if (event.key === 'Backspace') {
      event.preventDefault();

      const currentCode = [...this.verificationCode()];

      if (target.value) {
        target.value = '';
        currentCode[index] = '';
      } else if (index > 0) {
        const prevInput = document.querySelector(
          `input[data-index="${index - 1}"]`
        ) as HTMLInputElement;
        if (prevInput) {
          prevInput.value = '';
          prevInput.focus();
          currentCode[index - 1] = '';
        }
      }

      this.verificationCode.set(currentCode);
      if (this.codeError()) {
        this.codeError.set('');
      }
      return;
    }

    // Permitir solo números
    if (
      !/[0-9]/.test(event.key) &&
      ![
        'Backspace',
        'Delete',
        'Tab',
        'Enter',
        'ArrowLeft',
        'ArrowRight',
      ].includes(event.key)
    ) {
      event.preventDefault();
    }
  }

  // ============ NAVEGACIÓN ENTRE PASOS ============

  goToStep(step: number): void {
    if (step === this.currentStep()) return;

    console.log(`🔄 Cambiando de paso ${this.currentStep()} a paso ${step}`);

    this.currentStep.set(step);
    this.clearErrors();

    // Forzar detección de cambios
    this.cdr.detectChanges();

    // Focus automático según el paso
    setTimeout(() => {
      if (step === 2) {
        this.focusFirstCodeInput();
      } else if (step === 1) {
        const emailInput = document.getElementById('email') as HTMLInputElement;
        emailInput?.focus();
      }
    }, 100);

    console.log(`✅ Transición completada a paso: ${step}`);
  }

  goToNextStep(): void {
    const nextStep = this.currentStep() + 1;
    if (nextStep <= 3) {
      this.goToStep(nextStep);
    }
  }

  goToPreviousStep(): void {
    const prevStep = this.currentStep() - 1;
    if (prevStep >= 1) {
      this.goToStep(prevStep);
    }
  }

  // ============ FORM SUBMISSION ============

  async onSubmit(): Promise<void> {
    this.isSubmitted.set(true);
    this.clearErrors();

    const step = this.currentStep();

    console.log(`📝 Submit en paso: ${step}`);

    switch (step) {
      case 1:
        await this.handleEmailSubmission();
        break;
      case 2:
        await this.handleCodeVerification();
        break;
      case 3:
        await this.handlePasswordReset();
        break;
    }
  }

  private async handleEmailSubmission(): Promise<void> {
    const email = this.credentials().email;
    const emailErr = this.validateEmail(email);
    this.emailError.set(emailErr);

    if (emailErr) {
      console.log('❌ Error de validación de email:', emailErr);
      return;
    }

    this.isLoading.set(true);
    console.log('🔄 Enviando código de verificación...');

    try {
      const result = await this.sendVerificationCode(email);

      if (result.success) {
        console.log('✅ Código enviado exitosamente');
        this.goToNextStep();
      } else {
        console.log('❌ Error enviando código:', result.message);
        this.loginError.set(result.message || 'Error enviando código');
      }
    } catch (error) {
      console.log('❌ Error en envío:', error);
      this.loginError.set('Error de conexión. Por favor, intenta de nuevo.');
    } finally {
      this.isLoading.set(false);
    }
  }

  private async handleCodeVerification(): Promise<void> {
    const code = this.verificationCode().join('');

    if (code.length !== 6) {
      this.codeError.set('Por favor, completa el código de 6 dígitos');
      return;
    }

    this.isLoading.set(true);
    console.log('🔄 Verificando código...');

    try {
      const result = await this.verifyCode(code);

      if (result.success) {
        console.log('✅ Código verificado exitosamente');
        this.goToNextStep();
      } else {
        console.log('❌ Error verificando código:', result.message);
        this.codeError.set(result.message || 'Código incorrecto');
        this.shakeCodeInputs();
      }
    } catch (error) {
      console.log('❌ Error en verificación:', error);
      this.codeError.set('Error de conexión. Por favor, intenta de nuevo.');
      this.shakeCodeInputs();
    } finally {
      this.isLoading.set(false);
    }
  }

  private async handlePasswordReset(): Promise<void> {
    const passwordError = this.validatePasswords();
    if (passwordError) {
      this.loginError.set(passwordError);
      return;
    }

    this.isLoading.set(true);
    console.log('🔄 Actualizando contraseña...');

    try {
      const result = await this.resetPassword(this.newPassword());

      if (result.success) {
        console.log('✅ Contraseña actualizada exitosamente');

        // Redirigir al login después de 2 segundos
        setTimeout(() => {
          this.router.navigate(['/auth/login'], {
            queryParams: {
              email: this.credentials().email,
              passwordReset: 'success',
            },
          });
        }, 2000);
      } else {
        console.log('❌ Error actualizando contraseña:', result.message);
        this.loginError.set(result.message || 'Error actualizando contraseña');
      }
    } catch (error) {
      console.log('❌ Error en actualización:', error);
      this.loginError.set('Error de conexión. Por favor, intenta de nuevo.');
    } finally {
      this.isLoading.set(false);
    }
  }

  // ============ API SIMULATION ============

  private async sendVerificationCode(email: string): Promise<LoginResponse> {
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(`📧 Simulando envío de código a: ${email}`);
        resolve({
          success: true,
          message: 'Código de verificación enviado exitosamente.',
        });
      }, 1500);
    });
  }

  private async verifyCode(code: string): Promise<LoginResponse> {
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(`🔍 Verificando código: ${code}`);
        // Para demo: acepta cualquier código de 6 dígitos o "123456"
        if (code.length === 6 && (code === '123456' || /^\d{6}$/.test(code))) {
          resolve({
            success: true,
            message: 'Código verificado exitosamente.',
          });
        } else {
          resolve({
            success: false,
            message: 'Código incorrecto. Para la demo, usa: 123456',
          });
        }
      }, 1500);
    });
  }

  private async resetPassword(password: string): Promise<LoginResponse> {
    return new Promise((resolve) => {
      setTimeout(() => {
        console.log(`🔐 Simulando actualización de contraseña`);
        resolve({
          success: true,
          message: 'Contraseña actualizada exitosamente.',
        });
      }, 1500);
    });
  }

  // ============ UTILIDADES ============

  private focusFirstCodeInput(): void {
    setTimeout(() => {
      if (this.isBrowser) {
        const firstInput = document.querySelector(
          '.code-input' // ✅ NUEVO
        ) as HTMLInputElement;
        if (firstInput) {
          firstInput.focus();
          firstInput.select();
          console.log('🎯 Auto-focus aplicado al primer input de código');
        }
      }
    }, 200);
  }

  private shakeCodeInputs(): void {
    const codeInputs = document.querySelectorAll('.code-input-professional');
    codeInputs.forEach((input) => {
      input.classList.add('error');
      setTimeout(() => {
        input.classList.remove('error');
      }, 600);
    });
  }

  private clearErrors(): void {
    this.emailError.set('');
    this.loginError.set('');
    this.codeError.set('');
  }

  // ============ GETTERS PARA TEMPLATE ============

  isFormValid(): boolean {
    const step = this.currentStep();
    const creds = this.credentials();

    switch (step) {
      case 1:
        return !!creds.email && !this.validateEmail(creds.email);
      case 2:
        return (
          this.verificationCode().every((d) => d !== '') &&
          this.verificationCode().join('').length === 6
        );
      case 3:
        return (
          !!this.newPassword() &&
          !!this.confirmPassword() &&
          this.newPassword() === this.confirmPassword() &&
          this.newPassword().length >= 6
        );
      default:
        return false;
    }
  }

  getStepTitle(): string {
    switch (this.currentStep()) {
      case 1:
        return 'Recupera tu Cuenta';
      case 2:
        return 'Verifica el Código';
      case 3:
        return 'Nueva Contraseña';
      default:
        return 'Recupera tu Cuenta';
    }
  }

  getStepSubtitle(): string {
    switch (this.currentStep()) {
      case 1:
        return 'Ingresa tu email para recibir un código de verificación mágico';
      case 2:
        return 'Introduce el código de 6 dígitos que enviamos a tu correo';
      case 3:
        return 'Crea una nueva contraseña segura para proteger tu cuenta';
      default:
        return 'Ingresa tu email para recibir un código de verificación mágico';
    }
  }

  getSubmitButtonText(): string {
    const step = this.currentStep();
    const isLoading = this.isLoading();

    if (isLoading) {
      switch (step) {
        case 1:
          return 'Enviando código mágico...';
        case 2:
          return 'Verificando código...';
        case 3:
          return 'Actualizando contraseña...';
        default:
          return 'Procesando...';
      }
    }

    switch (step) {
      case 1:
        return 'Enviar Código Mágico';
      case 2:
        return 'Verificar Código';
      case 3:
        return 'Actualizar Contraseña';
      default:
        return 'Continuar';
    }
  }

  // ============ NAVEGACIÓN ============

  onBackToHome(): void {
    this.router.navigate(['/']).catch((err) => {
      console.error('Error navegando al inicio:', err);
    });
  }

  // ============ ACCESIBILIDAD ============

  onKeyDown(event: KeyboardEvent): void {
    // Enter en cualquier campo submite el formulario
    if (event.key === 'Enter' && this.isFormValid() && !this.isLoading()) {
      event.preventDefault();
      this.onSubmit();
    }

    // Escape limpia errores
    if (event.key === 'Escape') {
      this.clearErrors();
    }
  }

  // ============ 🧪 MÉTODOS DE DEBUG (SIMPLIFICADOS) ============

  debugCurrentStep(): void {
    console.log('🔍 Debug Current Step:', {
      currentStep: this.currentStep(),
      formValid: this.isFormValid(),
      stepTitle: this.getStepTitle(),
      email: this.credentials().email,
      codeComplete: this.verificationCode().join('').length === 6,
      passwords: {
        new: !!this.newPassword(),
        confirm: !!this.confirmPassword(),
        match: this.newPassword() === this.confirmPassword(),
      },
    });
  }

  testStepChange(step: number): void {
    console.log(`🧪 Test: Cambiando manualmente al paso ${step}`);
    this.goToStep(step);
    setTimeout(() => {
      this.debugCurrentStep();
    }, 100);
  }

  onCodePaste(event: ClipboardEvent, index: number): void {
    event.preventDefault();

    const pastedText = event.clipboardData?.getData('text') || '';
    const digits = pastedText.replace(/[^0-9]/g, '').slice(0, 6);

    if (digits.length === 0) return;

    const currentCode = [...this.verificationCode()];

    // Poner cada dígito en su input correspondiente
    for (let i = 0; i < digits.length && i < 6; i++) {
      currentCode[i] = digits[i];
      const input = document.querySelectorAll('.code-input')[
        i
      ] as HTMLInputElement;
      if (input) {
        input.value = digits[i];
      }
    }

    this.verificationCode.set(currentCode);

    // Focus al último input llenado
    const focusIndex = Math.min(digits.length, 5);
    const targetInput = document.querySelectorAll('.code-input')[
      focusIndex
    ] as HTMLInputElement;
    if (targetInput) {
      targetInput.focus();
    }

    // Auto-verificar si está completo
    if (digits.length === 6) {
      setTimeout(() => this.handleCodeVerification(), 500);
    }
  }
}



================================================
File: app/features/auth/pages/login/login.component.html
================================================
<div
  class="min-h-screen w-full font-serif relative overflow-hidden"
  style="background-color: #100820; color: #b4a2fd"
>
  <div class="fixed inset-0 pointer-events-none z-0">
    <div
      class="star large"
      style="top: 8%; left: 12%; animation-delay: 0s"
    ></div>
    <div
      class="star large"
      style="top: 15%; left: 88%; animation-delay: 1.2s"
    ></div>
    <div
      class="star large"
      style="top: 25%; left: 5%; animation-delay: 2.1s"
    ></div>
    <div
      class="star large"
      style="top: 35%; left: 85%; animation-delay: 1.8s"
    ></div>
    <div
      class="star large"
      style="top: 55%; left: 15%; animation-delay: 2.8s"
    ></div>
    <div
      class="star large"
      style="top: 75%; left: 90%; animation-delay: 1.5s"
    ></div>
    <div
      class="star large"
      style="top: 85%; left: 25%; animation-delay: 0.7s"
    ></div>
    <div
      class="star large"
      style="top: 95%; left: 78%; animation-delay: 2.3s"
    ></div>

    <div
      class="star medium"
      style="top: 12%; left: 45%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 18%; left: 65%; animation-delay: 2.2s"
    ></div>
    <div
      class="star medium"
      style="top: 28%; left: 32%; animation-delay: 1.1s"
    ></div>
    <div
      class="star medium"
      style="top: 38%; left: 72%; animation-delay: 3s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 28%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 68%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 68%; left: 35%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 78%; left: 82%; animation-delay: 2.7s"
    ></div>

    <div
      class="star small"
      style="top: 6%; left: 25%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 22%; left: 78%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 42%; left: 8%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 92%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 72%; left: 18%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 82%; left: 95%; animation-delay: 0.9s"
    ></div>

    <div
      class="sparkle"
      style="top: 10%; left: 55%; animation-delay: 0.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 20%; left: 15%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 30%; left: 85%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 45%; animation-delay: 1.2s"
    ></div>
    <div
      class="sparkle"
      style="top: 70%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 90%; left: 35%; animation-delay: 0.4s"
    ></div>

    <div
      class="floating-sparkle"
      style="top: 25%; left: 20%; animation-delay: 1.5s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 45%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 65%; left: 60%; animation-delay: 0.8s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 40%; animation-delay: 2.6s"
    ></div>
  </div>

  <div class="fixed inset-0 pointer-events-none z-1">
    <div class="mystical-gradient"></div>
  </div>

  <div class="relative z-10 min-h-screen flex items-center justify-center p-4">
    <div class="absolute top-6 left-6 z-20">
      <button class="back-home-btn group" (click)="onBackToHome()">
        <i
          class="fas fa-arrow-left mr-2 transition-transform group-hover:-translate-x-1"
        ></i>
        <span class="hidden sm:inline">Volver al Inicio</span>
        <span class="sm:hidden">Inicio</span>
      </button>
    </div>

    <div class="login-container">
      <div class="login-header">
        <div class="login-icon-container">
          <div class="mystical-orb-wrapper">
            <i class="fas fa-gem mystical-orb-icon"></i>

            <div class="orb-inner-glow"></div>
            <div class="orb-outer-glow"></div>

            <div class="orb-particles">
              <div class="particle particle-1"></div>
              <div class="particle particle-2"></div>
              <div class="particle particle-3"></div>
            </div>
          </div>

          <div class="professional-sparkles">
            <i class="fas fa-sparkles sparkle-1"></i>
            <i class="fas fa-star sparkle-2"></i>
            <i class="fas fa-magic sparkle-3"></i>
          </div>
        </div>

        <h1 class="login-title">
          <span class="title-highlight">Bienvenido</span> de Vuelta
        </h1>
        <p class="login-subtitle">
          Accede a tu portal místico y continúa tu viaje espiritual
        </p>
      </div>

      <form class="login-form" (ngSubmit)="onSubmit()" #loginForm="ngForm">
        <div class="form-group">
          <label class="form-label" for="email">
            <i class="fas fa-at label-icon mystical-field-icon"></i>
            Correo Electrónico
          </label>
          <div class="input-container">
            <input
              id="email"
              name="email"
              type="email"
              class="form-input"
              [class.error]="emailError() && (emailTouched() || isSubmitted())"
              [class.loading]="isLoading()"
              placeholder="tu@email.com"
              [(ngModel)]="credentials().email"
              (blur)="onEmailBlur()"
              (input)="onEmailChange($event)"
              required
              email
              autocomplete="email"
            />
            <div class="input-border"></div>
            <div class="input-glow"></div>
          </div>
          <div
            class="error-message"
            *ngIf="emailError() && (emailTouched() || isSubmitted())"
          >
            <i class="fas fa-exclamation-triangle mr-2"></i>
            {{ emailError() }}
          </div>
        </div>

        <div class="form-group">
          <label class="form-label" for="password">
            <i class="fas fa-key label-icon mystical-field-icon"></i>
            Contraseña
          </label>
          <div class="input-container">
            <input
              id="password"
              name="password"
              [type]="showPassword() ? 'text' : 'password'"
              class="form-input password-input"
              [class.error]="
                passwordError() && (passwordTouched() || isSubmitted())
              "
              [class.loading]="isLoading()"
              placeholder="••••••••"
              [(ngModel)]="credentials().password"
              (blur)="onPasswordBlur()"
              (input)="onPasswordChange($event)"
              required
              minlength="6"
              autocomplete="current-password"
            />
            <button
              type="button"
              class="password-toggle mystical-toggle"
              (click)="togglePasswordVisibility()"
              [attr.aria-label]="
                showPassword() ? 'Ocultar contraseña' : 'Mostrar contraseña'
              "
            >
              <i
                [class]="showPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'"
              ></i>
            </button>
            <div class="input-border"></div>
            <div class="input-glow"></div>
          </div>
          <div
            class="error-message"
            *ngIf="passwordError() && (passwordTouched() || isSubmitted())"
          >
            <i class="fas fa-exclamation-triangle mr-2"></i>
            {{ passwordError() }}
          </div>
        </div>

        <div class="form-options">
          <label class="remember-checkbox mystical-checkbox">
            <input
              type="checkbox"
              [(ngModel)]="credentials().rememberMe"
              name="rememberMe"
            />
            <span class="checkmark mystical-checkmark">
              <i class="fas fa-check"></i>
            </span>
            <span class="remember-text">Recordar sesión</span>
          </label>

          <button
            type="button"
            class="forgot-password-link mystical-link"
            (click)="onForgotPassword()"
          >
            <i class="fas fa-question-circle mr-1"></i>
            ¿Olvidaste tu contraseña?
          </button>
        </div>

        <button
          type="submit"
          class="login-submit-btn mystical-submit-btn"
          [disabled]="isLoading() || !isFormValid()"
          [class.loading]="isLoading()"
        >
          <span class="btn-content" *ngIf="!isLoading()">
            <i class="fas fa-door-open mr-2 btn-icon"></i>
            Iniciar Sesión
            <i class="fas fa-arrow-right ml-2 btn-arrow"></i>
          </span>
          <span class="btn-loading" *ngIf="isLoading()">
            <div class="mystical-spinner">
              <i class="fas fa-circle-notch spinning"></i>
            </div>
            Iniciando sesión...
          </span>
        </button>

        <div class="error-alert" *ngIf="loginError()">
          <i class="fas fa-exclamation-triangle mr-2"></i>
          {{ loginError() }}
        </div>
      </form>

      <div class="divider">
        <span class="divider-text">
          <i class="fas fa-grip-lines-vertical mr-2"></i>
          O continúa con
          <i class="fas fa-grip-lines-vertical ml-2"></i>
        </span>
      </div>

      <div class="social-login">
        <button
          class="social-btn google-btn mystical-social-btn"
          (click)="onSocialLogin('google')"
          [disabled]="isLoading()"
        >
          <i class="fab fa-google mr-3 social-icon"></i>
          <span class="hidden sm:inline">Continuar con Google</span>
          <span class="sm:hidden">Google</span>
        </button>

        <button
          class="social-btn facebook-btn mystical-social-btn"
          (click)="onSocialLogin('facebook')"
          [disabled]="isLoading()"
        >
          <i class="fab fa-facebook-f mr-3 social-icon"></i>
          <span class="hidden sm:inline">Continuar con Facebook</span>
          <span class="sm:hidden">Facebook</span>
        </button>
      </div>

      <div class="register-link">
        <span class="register-text">
          <i class="fas fa-user-plus mr-2"></i>
          ¿No tienes una cuenta?
        </span>
        <button
          class="register-btn mystical-register-btn group"
          (click)="onGoToRegister()"
        >
          <i class="fas fa-star-of-life mr-2"></i>
          Crear cuenta gratuita
          <i
            class="fas fa-arrow-right ml-2 transition-transform group-hover:translate-x-1"
          ></i>
        </button>
      </div>

      <div class="trust-indicators mystical-trust">
        <div class="trust-item">
          <i class="fas fa-shield-alt trust-icon"></i>
          <span>Seguro</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-lock trust-icon"></i>
          <span>Encriptado</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-user-secret trust-icon"></i>
          <span>Privado</span>
        </div>
      </div>
    </div>
  </div>
</div>



================================================
File: app/features/auth/pages/login/login.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --accent-color: #8b4513;
  --success-color: #32cd32;
  --warning-color: #daa520;
  --error-color: #ff6b6b;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.2);
  --input-bg: rgba(16, 8, 32, 0.6);
  --input-border: rgba(180, 162, 253, 0.3);
  --shadow-primary: 0 0 20px rgba(180, 162, 253, 0.3);
  --shadow-glow: 0 0 30px rgba(180, 162, 253, 0.5);
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.8);
  }
}

@keyframes float-up {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

.star {
  position: absolute;
  background: var(--primary-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);
}

.star.large {
  width: 3px;
  height: 3px;
  animation: twinkle 4s ease-in-out infinite;
}

.star.medium {
  width: 2px;
  height: 2px;
  animation: twinkle 3s ease-in-out infinite;
}

.star.small {
  width: 1px;
  height: 1px;
  animation: twinkle 5s ease-in-out infinite;
}

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
}

.floating-sparkle {
  position: absolute;
  width: 1.5px;
  height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
}

.mystical-gradient {
  background: radial-gradient(
      ellipse at 20% 30%,
      rgba(180, 162, 253, 0.05) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 80% 70%,
      rgba(180, 162, 253, 0.03) 0%,
      transparent 50%
    );
  width: 100%;
  height: 100%;
}

.back-home-btn {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 0.5rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  cursor: pointer;
}

.back-home-btn:hover {
  background: rgba(180, 162, 253, 0.15);
  transform: translateY(-2px);
  box-shadow: var(--shadow-primary);
}

.login-container {
  width: 100%;
  max-width: 420px;
  background: var(--glass-bg);
  backdrop-filter: blur(20px);
  border: 1px solid var(--glass-border);
  border-radius: 1.5rem;
  padding: 2.5rem 2rem;
  box-shadow: var(--shadow-primary);
  animation: float-up 0.8s ease-out;
  position: relative;
  overflow: hidden;
}

.absolute.top-6.left-6.z-20 {
  position: fixed !important;
  top: 1.5rem !important;
  left: 1.5rem !important;
  z-index: 9999 !important;
}

@media (max-width: 768px) {
  .forgot-password-link {
    text-align: center !important;
    width: 100% !important;
    display: block !important;
    margin-top: 0.75rem !important;
  }
}

@media (max-width: 768px) {
  .absolute.top-6.left-6.z-20 {
    position: fixed !important;
    top: 1rem !important;
    left: 1rem !important;
  }
}

.login-container::before {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.1) 100%
  );
  pointer-events: none;
  z-index: -1;
}

.login-header {
  text-align: center;
  margin-bottom: 2rem;
}

.login-icon-container {
  position: relative;
  display: inline-block;
  margin-bottom: 1.5rem;
}

.login-icon {
  font-size: 3rem;
  animation: pulse-glow 4s ease-in-out infinite;
  display: block;
}

.icon-sparkle {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  font-size: 1.5rem;
  animation: floating-sparkle 3s ease-in-out infinite;
}

.login-title {
  font-size: 2rem;
  font-weight: 300;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.title-highlight {
  font-weight: 600;
  background: linear-gradient(135deg, var(--primary-color), #ffffff);
  -webkit-background-clip: text;
  background-clip: text;
}

.login-subtitle {
  font-size: 1rem;
  opacity: 0.8;
  color: var(--primary-color);
  line-height: 1.5;
}

.login-form {
  margin-bottom: 1.5rem;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-label {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--primary-color);
  margin-bottom: 0.5rem;
}

.label-icon {
  width: 1rem;
  margin-right: 0.5rem;
  opacity: 0.7;
}

.input-container {
  position: relative;
  width: 100%;
}

.form-input {
  width: 100%;
  padding: 1rem 1.25rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  color: var(--primary-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;
}

.form-input::placeholder {
  color: rgba(180, 162, 253, 0.5);
}

.form-input:focus {
  outline: none;
  border-color: var(--primary-color);
  background: rgba(16, 8, 32, 0.8);
  box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.1);
}

.form-input.error {
  border-color: var(--error-color);
  background: rgba(255, 107, 107, 0.1);
}

.input-border {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 0.75rem;
  padding: 1px;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.3),
    transparent,
    rgba(180, 162, 253, 0.3)
  );
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.form-input:focus + .input-border {
  opacity: 1;
}

.input-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.form-input:focus + .input-border + .input-glow {
  width: 170%;
  height: 110%;
}

.password-input {
  padding-right: 3rem;
}

.password-toggle {
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  font-size: 1rem;
  opacity: 0.7;
  transition: opacity 0.3s ease;
  z-index: 3;
}

.password-toggle:hover {
  opacity: 1;
}

.error-message {
  display: flex;
  align-items: center;
  color: #ff4444 !important;
  font-size: 0.875rem;
  font-weight: 500;
  margin-top: 0.25rem;
  padding: 0.5rem 0.75rem;
  animation: float-up 0.3s ease-out;

  &.hidden {
    display: none;
  }
}

.form-options {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 1.5rem;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.remember-checkbox {
  display: flex;
  align-items: center;
  cursor: pointer;
  font-size: 0.875rem;
  color: var(--primary-color);
}

.remember-checkbox input[type="checkbox"] {
  display: none;
}

.checkmark {
  width: 1.25rem;
  height: 1.25rem;
  border: 1px solid var(--input-border);
  border-radius: 0.25rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 0.5rem;
  transition: all 0.3s ease;
}

.remember-checkbox input:checked + .checkmark {
  background: var(--primary-color);
  border-color: var(--primary-color);
  color: var(--secondary-color);
}

.remember-checkbox input:checked + .checkmark i {
  opacity: 1;
  transform: scale(1);
}

.checkmark i {
  font-size: 0.75rem;
  opacity: 0;
  transform: scale(0);
  transition: all 0.3s ease;
}

.forgot-password-link {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  text-decoration: underline;
  cursor: pointer;
  opacity: 0.8;
  transition: opacity 0.3s ease;
}

.forgot-password-link:hover {
  opacity: 1;
}

.login-submit-btn {
  width: 100%;
  padding: 1rem 1.5rem;
  background: linear-gradient(135deg, var(--primary-color), #9b87fd);
  border: none;
  border-radius: 0.75rem;
  color: var(--secondary-color);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  margin-bottom: 1rem;
}

.login-submit-btn:not(:disabled):hover {
  transform: translateY(-2px);
  box-shadow: var(--shadow-glow);
}

.login-submit-btn:disabled {
  opacity: 0.6;
  cursor: not-allowed;
  transform: none;
}

.login-submit-btn::before {
  content: "";
  position: absolute;
  top: 0;
  left: -100%;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.2),
    transparent
  );
  transition: left 0.5s ease;
}

.login-submit-btn:hover::before {
  left: 100%;
}

.btn-loading {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spinner {
  width: 1rem;
  height: 1rem;
  border: 2px solid rgba(16, 8, 32, 0.3);
  border-top: 2px solid var(--secondary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 0.5rem;
}

.error-alert {
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 0.5rem;
  padding: 0.75rem 1rem;
  color: var(--error-color);
  font-size: 0.875rem;
  margin-top: 1rem;
  display: flex;
  align-items: center;
  animation: float-up 0.3s ease-out;
}

.divider {
  position: relative;
  margin: 1.5rem 0;
  text-align: center;
}

.divider::before {
  content: "";
  position: absolute;
  top: 50%;
  left: 0;
  right: 0;
  height: 1px;
  background: var(--input-border);
}

.divider-text {
  background: var(--glass-bg);
  padding: 0 1rem;
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.7;
}

.social-login {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.75rem 1rem;
  border: 1px solid var(--input-border);
  border-radius: 0.5rem;
  background: var(--input-bg);
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
}

.social-btn:hover {
  background: rgba(180, 162, 253, 0.1);
  border-color: var(--primary-color);
  transform: translateY(-1px);
}

.google-btn:hover {
  background: rgba(234, 67, 53, 0.1);
  border-color: #ea4335;
  color: #ea4335;
}

.facebook-btn:hover {
  background: rgba(24, 119, 242, 0.1);
  border-color: #1877f2;
  color: #1877f2;
}

.register-link {
  text-align: center;
  margin-bottom: 1.5rem;
}

.register-text {
  color: var(--primary-color);
  opacity: 0.8;
  font-size: 0.875rem;
  margin-right: 0.5rem;
}

.register-btn {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  text-decoration: underline;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;
}

.register-btn:hover {
  color: #ffffff;
  text-shadow: 0 0 10px rgba(180, 162, 253, 0.5);
}

.trust-indicators {
  display: flex;
  justify-content: center;
  gap: 2rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--input-border);
}

.trust-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.75rem;
  color: var(--primary-color);
  opacity: 0.6;
}

.trust-item i {
  font-size: 1rem;
  margin-bottom: 0.25rem;
}

@media (max-width: 768px) {
  .login-container {
    margin: 1rem;
    padding: 2rem 1.5rem;
    border-radius: 1rem;
  }

  .login-title {
    font-size: 1.75rem;
  }

  .social-login {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .form-options {
    flex-direction: column;
    align-items: flex-start;
    gap: 1rem;
  }

  .trust-indicators {
    gap: 1rem;
  }
}

@media (max-width: 480px) {
  .login-container {
    padding: 1.5rem 1rem;
  }

  .login-icon {
    font-size: 2.5rem;
  }

  .login-title {
    font-size: 1.5rem;
  }

  .trust-indicators {
    flex-wrap: wrap;
    gap: 0.75rem;
  }
}

@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .floating-sparkle,
  .login-icon,
  .icon-sparkle {
    animation: none !important;
  }

  .login-container {
    animation: none;
  }

  .error-message {
    animation: none;
  }
}

button:focus-visible,
input:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

.form-input.loading {
  position: relative;
  overflow: hidden;
}

.form-input.loading::after {
  content: "";
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.1),
    transparent
  );
  animation: shimmer 1.5s infinite;
}

.mystical-orb-wrapper {
  position: relative;
  display: inline-block;
  width: 80px;
  height: 80px;
}

.mystical-orb-icon {
  font-size: 4rem;
  background: linear-gradient(
    135deg,
    #e6e6fa 0%,
    #b4a2fd 25%,
    #9370db 50%,
    #8a2be2 75%,
    #6a5acd 100%
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;

  filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.6))
    drop-shadow(0 0 30px rgba(180, 162, 253, 0.3))
    drop-shadow(0 3px 10px rgba(180, 162, 253, 0.4));

  animation: mystical-orb-float 6s ease-in-out infinite;
  transition: all 0.4s ease;
  cursor: pointer;

  &:hover {
    transform: scale(1.1) rotateY(15deg);
    filter: drop-shadow(0 0 25px rgba(180, 162, 253, 0.8))
      drop-shadow(0 0 50px rgba(180, 162, 253, 0.4));
  }
}

.orb-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60%;
  height: 60%;
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.6) 0%,
    rgba(180, 162, 253, 0.4) 30%,
    transparent 70%
  );
  border-radius: 50%;
  animation: orb-pulse 3s ease-in-out infinite;
  z-index: -1;
}

.orb-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 120%;
  height: 120%;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    rgba(180, 162, 253, 0.1) 40%,
    transparent 70%
  );
  border-radius: 50%;
  animation: orb-breathe 8s ease-in-out infinite;
  z-index: -2;
}

.orb-particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.particle {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.8);

  &.particle-1 {
    top: 10%;
    right: 15%;
    animation: particle-float 4s ease-in-out infinite;
    animation-delay: 0s;
  }

  &.particle-2 {
    bottom: 20%;
    left: 10%;
    animation: particle-float 4s ease-in-out infinite;
    animation-delay: 1.3s;
    transform: scale(0.8);
  }

  &.particle-3 {
    top: 60%;
    right: 5%;
    animation: particle-float 4s ease-in-out infinite;
    animation-delay: 2.6s;
    transform: scale(1.2);
  }
}

.professional-sparkles {
  position: absolute;
  top: -1rem;
  right: -1rem;
  width: 3rem;
  height: 3rem;
  pointer-events: none;
}

.sparkle-1,
.sparkle-2,
.sparkle-3 {
  position: absolute;
  color: #ffd700;
  animation: professional-sparkle 3s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(255, 215, 0, 0.6));
}

.sparkle-1 {
  top: 0;
  left: 0;
  font-size: 1.25rem;
  animation-delay: 0s;
}

.sparkle-2 {
  top: 0.5rem;
  right: 0;
  font-size: 0.875rem;
  animation-delay: 1s;
  color: #ffffff;
}

.sparkle-3 {
  bottom: 0;
  left: 0.5rem;
  font-size: 1rem;
  animation-delay: 2s;
  color: #b4a2fd;
}

.mystical-field-icon {
  color: #b4a2fd;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

  &.fas.fa-at {
    color: #20b2aa;
  }

  &.fas.fa-key {
    color: #daa520;
  }
}

.input-decoration {
  position: absolute;
  left: 1rem;
  top: 50%;
  transform: translateY(-50%);
  pointer-events: none;
  z-index: 1;
  opacity: 0.3;
  transition: all 0.3s ease;
}

.input-decoration-icon {
  color: var(--primary-color);
  font-size: 0.875rem;
}

.form-input:focus + .input-border + .input-glow + .input-decoration {
  opacity: 0.6;
  transform: translateY(-50%) scale(1.1);
}

.mystical-toggle {
  color: var(--primary-color);
  opacity: 0.7;
  transition: all 0.3s ease;

  &:hover {
    opacity: 1;
    transform: scale(1.1);
    color: #ffffff;
  }

  i {
    transition: all 0.3s ease;
  }
}

.mystical-checkmark {
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.2),
      transparent
    );
    transition: left 0.5s ease;
  }
}

.mystical-checkbox input:checked + .mystical-checkmark::before {
  left: 100%;
}

.mystical-submit-btn {
  position: relative;
  overflow: hidden;

  .btn-icon {
    transition: all 0.3s ease;
  }

  .btn-arrow {
    transition: all 0.3s ease;
    opacity: 0.7;
  }

  &:hover:not(:disabled) {
    .btn-icon {
      transform: scale(1.1);
    }

    .btn-arrow {
      transform: translateX(4px);
      opacity: 1;
    }
  }
}

.mystical-spinner {
  display: flex;
  align-items: center;
  margin-right: 0.5rem;

  .spinning {
    animation: mystical-spin 1.5s linear infinite;
    color: var(--secondary-color);
    font-size: 1rem;
  }
}

.mystical-social-btn {
  position: relative;
  overflow: hidden;

  .social-icon {
    transition: all 0.3s ease;
  }

  .social-arrow {
    opacity: 0;
    transform: translateX(-10px);
    transition: all 0.3s ease;
    margin-left: auto;
    font-size: 0.75rem;
  }

  &:hover {
    .social-icon {
      transform: scale(1.2);
    }

    .social-arrow {
      opacity: 1;
      transform: translateX(0);
    }
  }
}

.mystical-register-btn {
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.2),
      transparent
    );
    transition: left 0.5s ease;
  }

  &:hover::before {
    left: 100%;
  }
}

.mystical-trust {
  .trust-item {
    transition: all 0.3s ease;
    padding: 0.5rem;
    border-radius: 0.5rem;

    &:hover {
      background: rgba(180, 162, 253, 0.1);
      transform: translateY(-2px);
    }
  }

  .trust-icon {
    transition: all 0.3s ease;
    filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

    &.fas.fa-shield-alt {
      color: #32cd32;
    }

    &.fas.fa-lock {
      color: #daa520;
    }

    &.fas.fa-user-secret {
      color: #9370db;
    }
  }

  .trust-item:hover .trust-icon {
    transform: scale(1.2);
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
  }
}

.form-group:hover .mystical-field-icon {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

.trust-item:hover .trust-icon {
  transform: scale(1.2);
  filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
}

.mystical-field-icon:hover {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

@keyframes mystical-orb-float {
  0%,
  100% {
    transform: translateY(0px) rotate(0deg);
  }
  25% {
    transform: translateY(-8px) rotate(2deg);
  }
  50% {
    transform: translateY(-5px) rotate(-1deg);
  }
  75% {
    transform: translateY(4px) rotate(1deg);
  }
}

@keyframes orb-pulse {
  0%,
  100% {
    opacity: 0.6;
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 0.9;
    transform: translate(-50%, -50%) scale(1.1);
  }
}

@keyframes orb-breathe {
  0%,
  100% {
    opacity: 0.4;
    transform: translate(-50%, -50%) scale(1);
  }
  50% {
    opacity: 0.7;
    transform: translate(-50%, -50%) scale(1.2);
  }
}

@keyframes particle-float {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(1);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1);
  }
}

@keyframes professional-sparkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(0.8) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(1.1) rotate(270deg);
  }
}

@keyframes mystical-spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

.mystical-link {
  position: relative;

  &::after {
    content: "";
    position: absolute;
    bottom: -2px;
    left: 0;
    width: 0;
    height: 2px;
    background: linear-gradient(90deg, var(--primary-color), #ffffff);
    transition: width 0.3s ease;
  }

  &:hover::after {
    width: 100%;
  }
}

@media (max-width: 768px) {
  .mystical-orb-wrapper {
    width: 60px;
    height: 60px;
  }

  .mystical-orb-icon {
    font-size: 3rem;
  }

  .professional-sparkles {
    top: -0.5rem;
    right: -0.5rem;
    width: 2rem;
    height: 2rem;
  }

  .sparkle-1,
  .sparkle-2,
  .sparkle-3 {
    font-size: 0.875rem;
  }

  .social-arrow {
    display: none;
  }
}

@media (max-width: 480px) {
  .mystical-orb-icon {
    font-size: 2.5rem;
  }

  .input-decoration {
    display: none;
  }

  .form-input {
    padding-left: 1.25rem;
  }
}

@media (prefers-reduced-motion: reduce) {
  .mystical-orb-icon,
  .orb-inner-glow,
  .orb-outer-glow,
  .particle,
  .sparkle-1,
  .sparkle-2,
  .sparkle-3,
  .mystical-spinner .spinning {
    animation: none !important;
  }

  .mystical-orb-icon:hover,
  .mystical-toggle:hover {
    transform: none !important;
  }
}

.mystical-orb-icon,
.orb-inner-glow,
.orb-outer-glow,
.particle,
.professional-sparkles > *,
.mystical-spinner .spinning {
  will-change: transform, opacity;
  transform: translateZ(0);
}

.login-form.loading {
  .mystical-field-icon {
    animation: gentle-pulse 2s ease-in-out infinite;
  }
}

@keyframes gentle-pulse {
  0%,
  100% {
    opacity: 0.7;
  }
  50% {
    opacity: 1;
  }
}

.form-input:focus
  + .input-border
  + .input-glow
  + .input-decoration
  .input-decoration-icon {
  color: #ffffff;
  filter: drop-shadow(0 0 6px rgba(255, 255, 255, 0.6));
}



================================================
File: app/features/auth/pages/login/login.component.ts
================================================
import {
  Component,
  signal,
  OnInit,
  OnDestroy,
  Inject,
  PLATFORM_ID,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import { Subject, takeUntil } from 'rxjs';
import { StorageService } from '../../../../core/services/storage.service';

// Interfaces
export interface LoginCredentials {
  email: string;
  password: string;
  rememberMe: boolean;
}

export interface ValidationError {
  field: string;
  message: string;
}

export interface LoginResponse {
  success: boolean;
  token?: string;
  user?: any;
  message?: string;
  errors?: ValidationError[];
}

@Component({
  selector: 'app-login',
  standalone: true,
  imports: [CommonModule, FormsModule],
  templateUrl: './login.component.html',
  styleUrls: ['./login.component.scss'],
})
export class LoginComponent implements OnInit, OnDestroy {
  // Control de SSR
  private isBrowser: boolean;
  private destroy$ = new Subject<void>();

  // Estado del formulario
  credentials = signal<LoginCredentials>({
    email: '',
    password: '',
    rememberMe: false,
  });

  // Estados de UI
  isLoading = signal<boolean>(false);
  isSubmitted = signal<boolean>(false);
  showPassword = signal<boolean>(false);

  // Estados de validación
  emailTouched = signal<boolean>(false);
  passwordTouched = signal<boolean>(false);
  emailError = signal<string>('');
  passwordError = signal<string>('');
  loginError = signal<string>('');

  // Parámetros de retorno
  private returnUrl: string = '/dashboard';

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    @Inject(PLATFORM_ID) platformId: Object,
    private storageService: StorageService
  ) // private authService: AuthService, // Inyectar cuando esté disponible
  // private analyticsService: AnalyticsService // Inyectar cuando esté disponible
  {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // ============ VALIDACIONES ============

  private validateEmail(email: string): string {
    if (!email) {
      return 'El correo electrónico es requerido';
    }

    if (!this.isValidEmail(email)) {
      return 'Ingresa un correo electrónico válido';
    }

    return '';
  }

  private validatePassword(password: string): string {
    if (!password) {
      return 'La contraseña es requerida';
    }

    if (password.length < 6) {
      return 'La contraseña debe tener al menos 6 caracteres';
    }

    return '';
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  private validateForm(): boolean {
    const creds = this.credentials();

    const emailErr = this.validateEmail(creds.email);
    const passwordErr = this.validatePassword(creds.password);

    this.emailError.set(emailErr);
    this.passwordError.set(passwordErr);

    return !emailErr && !passwordErr;
  }

  // ============ EVENT HANDLERS ============

  onEmailChange(event: any): void {
    const email = event.target.value;
    this.credentials.update((cred) => ({ ...cred, email }));

    // Validación en tiempo real solo si ya fue tocado
    if (this.emailTouched()) {
      this.emailError.set(this.validateEmail(email));
    }
  }

  onEmailBlur(): void {
    this.emailTouched.set(true);
    const email = this.credentials().email;
    this.emailError.set(this.validateEmail(email));

    this.trackUserInteraction('email_field_blur', {
      hasValue: !!email,
      isValid: !this.emailError(),
    });
  }

  onPasswordChange(event: any): void {
    const password = event.target.value;
    this.credentials.update((cred) => ({ ...cred, password }));

    // Validación en tiempo real solo si ya fue tocado
    if (this.passwordTouched()) {
      this.passwordError.set(this.validatePassword(password));
    }
  }

  onPasswordBlur(): void {
    this.passwordTouched.set(true);
    const password = this.credentials().password;
    this.passwordError.set(this.validatePassword(password));

    this.trackUserInteraction('password_field_blur', {
      hasValue: !!password,
      isValid: !this.passwordError(),
    });
  }

  togglePasswordVisibility(): void {
    this.showPassword.update((show) => !show);
    this.trackUserInteraction('password_visibility_toggle', {
      isVisible: this.showPassword(),
    });
  }

  // ============ FORM SUBMISSION ============

  async onSubmit(): Promise<void> {
    this.isSubmitted.set(true);
    this.clearErrors();

    // Validar formulario
    if (!this.validateForm()) {
      this.trackUserInteraction('login_validation_failed', {
        emailError: this.emailError(),
        passwordError: this.passwordError(),
      });
      return;
    }

    // Iniciar loading
    this.isLoading.set(true);

    try {
      this.trackUserInteraction('login_attempt', {
        email: this.credentials().email,
        rememberMe: this.credentials().rememberMe,
      });

      // Simular llamada al servicio de autenticación
      const result = await this.performLogin(this.credentials());

      if (result.success) {
        await this.handleLoginSuccess(result);
      } else {
        this.handleLoginError(result);
      }
    } catch (error) {
      this.handleLoginError({
        success: false,
        message: 'Error de conexión. Por favor, intenta de nuevo.',
      });

      this.trackUserInteraction('login_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      this.isLoading.set(false);
    }
  }

  private async performLogin(
    credentials: LoginCredentials
  ): Promise<LoginResponse> {
    // Aquí iría la llamada real al AuthService
    // return this.authService.login(credentials);

    // Simulación para demo
    return new Promise((resolve) => {
      setTimeout(() => {
        if (
          credentials.email === 'demo@arcana.com' &&
          credentials.password === 'demo123'
        ) {
          resolve({
            success: true,
            token: 'demo_token_' + Date.now(),
            user: {
              id: '1',
              email: credentials.email,
              name: 'Usuario Demo',
            },
          });
        } else {
          resolve({
            success: false,
            message:
              'Credenciales incorrectas. Usa demo@arcana.com / demo123 para la demo.',
          });
        }
      }, 1500);
    });
  }

  private async handleLoginSuccess(result: LoginResponse): Promise<void> {
    this.trackUserInteraction('login_success', {
      userId: result.user?.id,
      rememberMe: this.credentials().rememberMe,
    });

    if (this.isBrowser && result.token && result.user) {
      this.storageService.saveAuthData(result.token, result.user);
    }

    // Mostrar mensaje de éxito
    this.showSuccessMessage();

    // Redirigir al dashboard
    setTimeout(() => {
      this.router.navigate([this.returnUrl]).catch((err) => {
        console.error('Error en redirección:', err);
        this.router.navigate(['/dashboard']);
      });
    }, 1000);
  }

  private handleLoginError(result: LoginResponse): void {
    this.loginError.set(result.message || 'Error desconocido');

    // Manejar errores específicos de campos
    if (result.errors) {
      result.errors.forEach((error) => {
        if (error.field === 'email') {
          this.emailError.set(error.message);
        } else if (error.field === 'password') {
          this.passwordError.set(error.message);
        }
      });
    }

    this.trackUserInteraction('login_failed', {
      error: result.message,
      fieldErrors: result.errors,
    });
  }

  private saveRememberMeData(result: LoginResponse): void {
    if (!this.isBrowser) return;

    try {
      localStorage.setItem('arcana_remember_email', this.credentials().email);
      if (result.token) {
        localStorage.setItem('arcana_auth_token', result.token);
      }
    } catch (error) {
      console.warn('Error guardando datos de remember me:', error);
    }
  }

  private showSuccessMessage(): void {
    // Aquí podrías mostrar un toast o mensaje de éxito
    this.loginError.set('');
    console.log('¡Login exitoso! Redirigiendo...');
  }

  // ============ SOCIAL LOGIN ============

  onSocialLogin(provider: 'google' | 'facebook'): void {
    if (this.isLoading()) return;

    this.trackUserInteraction('social_login_attempt', { provider });

    // Implementar login social
    this.performSocialLogin(provider);
  }

  private performSocialLogin(provider: string): void {
    if (!this.isBrowser) return;

    try {
      // Aquí iría la implementación real del login social
      // this.authService.loginWithSocial(provider);

      // Para demo, simular redirección
      console.log(`Iniciando login con ${provider}...`);

      // Mostrar loading temporal
      this.isLoading.set(true);

      setTimeout(() => {
        this.isLoading.set(false);
        alert(`Login con ${provider} no implementado en demo`);
      }, 2000);
    } catch (error) {
      this.isLoading.set(false);
      this.loginError.set(`Error al conectar con ${provider}`);
      this.trackUserInteraction('social_login_error', { provider, error });
    }
  }

  // ============ NAVEGACIÓN ============

  onBackToHome(): void {
    this.trackUserInteraction('back_to_home_click');
    this.router.navigate(['/']).catch((err) => {
      console.error('Error navegando al inicio:', err);
    });
  }

  onGoToRegister(): void {
    this.trackUserInteraction('go_to_register_click');

    // Preservar email si ya fue ingresado
    const email = this.credentials().email;
    const queryParams = email ? { email } : {};

    this.router.navigate(['/auth/register'], { queryParams }).catch((err) => {
      console.error('Error navegando a registro:', err);
    });
  }

  onForgotPassword(): void {
    this.trackUserInteraction('forgot_password_click');

    // Preservar email si ya fue ingresado
    const email = this.credentials().email;
    const queryParams = email ? { email } : {};

    this.router
      .navigate(['/auth/forgot-password'], { queryParams })
      .catch((err) => {
        console.error('Error navegando a recuperar contraseña:', err);
      });
  }

  // ============ UTILIDADES ============

  isFormValid(): boolean {
    const creds = this.credentials();
    return (
      !!creds.email &&
      !!creds.password &&
      !this.emailError() &&
      !this.passwordError()
    );
  }

  private clearErrors(): void {
    this.emailError.set('');
    this.passwordError.set('');
    this.loginError.set('');
  }

  // ============ ANALYTICS Y TRACKING ============

  private trackUserInteraction(action: string, details: any = {}): void {
    if (!this.isBrowser) return;

    const eventData = {
      action,
      page: 'login',
      timestamp: new Date().toISOString(),
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'SSR',
      viewport: this.getViewportSize(),
      ...details,
    };

    console.log('📊 Login Analytics Event:', eventData);

    // Integración con servicio de analytics
    // this.analyticsService?.track(action, eventData);
  }

  private getViewportSize(): string {
    if (!this.isBrowser) return 'SSR';

    try {
      return `${window.innerWidth}x${window.innerHeight}`;
    } catch {
      return 'unknown';
    }
  }

  // ============ ACCESIBILIDAD ============

  onKeyDown(event: KeyboardEvent): void {
    // Enter en cualquier campo submite el formulario
    if (event.key === 'Enter' && this.isFormValid() && !this.isLoading()) {
      event.preventDefault();
      this.onSubmit();
    }

    // Escape limpia errores
    if (event.key === 'Escape') {
      this.clearErrors();
    }
  }

  // ============ PERFORMANCE ============

  // Método para precargar recursos críticos
  preloadCriticalResources(): void {
    if (!this.isBrowser) return;

    // Precargar rutas importantes
    const criticalRoutes = [
      '/dashboard',
      '/auth/register',
      '/auth/forgot-password',
    ];

    criticalRoutes.forEach((route) => {
      // Implementar precarga si es necesario
      console.log(`Precargando ruta: ${route}`);
    });
  }

  // ============ GESTIÓN DE ESTADO AVANZADA ============

  // Autocompletar email si existe en localStorage
  private loadRememberedEmail(): void {
    if (!this.isBrowser) return;

    try {
      const rememberedEmail = localStorage.getItem('arcana_remember_email');
      if (rememberedEmail) {
        this.credentials.update((cred) => ({
          ...cred,
          email: rememberedEmail,
          rememberMe: true,
        }));
      }
    } catch (error) {
      console.warn('Error cargando email recordado:', error);
    }
  }

  // Limpiar datos recordados
  private clearRememberedData(): void {
    if (!this.isBrowser) return;

    try {
      localStorage.removeItem('arcana_remember_email');
      localStorage.removeItem('arcana_auth_token');
    } catch (error) {
      console.warn('Error limpiando datos recordados:', error);
    }
  }

  // ============ VALIDACIONES AVANZADAS ============

  // Validación de email en tiempo real con debounce
  private emailValidationTimeout?: ReturnType<typeof setTimeout>;

  onEmailInput(event: any): void {
    const email = event.target.value;
    this.credentials.update((cred) => ({ ...cred, email }));

    // Limpiar timeout anterior
    if (this.emailValidationTimeout) {
      clearTimeout(this.emailValidationTimeout);
    }

    // Validar después de 500ms de inactividad
    this.emailValidationTimeout = setTimeout(() => {
      if (this.emailTouched()) {
        this.emailError.set(this.validateEmail(email));
      }
    }, 500);
  }

  // ============ GETTERS COMPUTADOS ============

  get formClasses(): string {
    const classes = ['login-form'];

    if (this.isLoading()) {
      classes.push('loading');
    }

    if (this.isSubmitted()) {
      classes.push('submitted');
    }

    return classes.join(' ');
  }

  get submitButtonText(): string {
    if (this.isLoading()) {
      return 'Iniciando sesión...';
    }
    return 'Iniciar Sesión';
  }

  // ============ ERROR HANDLING ============

  private handleUnexpectedError(error: any): void {
    console.error('Error inesperado en LoginComponent:', error);

    this.loginError.set(
      'Ha ocurrido un error inesperado. Por favor, recarga la página e intenta de nuevo.'
    );

    this.trackUserInteraction('unexpected_error', {
      error: error.message || error.toString(),
      stack: error.stack,
    });
  }
}



================================================
File: app/features/auth/pages/register/register.component.html
================================================
<div
  class="min-h-screen w-full font-serif relative overflow-hidden"
  style="background-color: #100820; color: #b4a2fd"
>
  <!-- Animated Stars Background -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <!-- Large Stars -->
    <div
      class="star large"
      style="top: 5%; left: 10%; animation-delay: 0s"
    ></div>
    <div
      class="star large"
      style="top: 12%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star large"
      style="top: 28%; left: 7%; animation-delay: 2.3s"
    ></div>
    <div
      class="star large"
      style="top: 42%; left: 88%; animation-delay: 1.7s"
    ></div>
    <div
      class="star large"
      style="top: 58%; left: 12%; animation-delay: 3.1s"
    ></div>
    <div
      class="star large"
      style="top: 73%; left: 90%; animation-delay: 1.2s"
    ></div>
    <div
      class="star large"
      style="top: 87%; left: 18%; animation-delay: 0.8s"
    ></div>
    <div
      class="star large"
      style="top: 95%; left: 75%; animation-delay: 2.6s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 42%; animation-delay: 0.6s"
    ></div>
    <div
      class="star medium"
      style="top: 16%; left: 62%; animation-delay: 2.4s"
    ></div>
    <div
      class="star medium"
      style="top: 25%; left: 28%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 35%; left: 68%; animation-delay: 2.9s"
    ></div>
    <div
      class="star medium"
      style="top: 45%; left: 33%; animation-delay: 0.7s"
    ></div>
    <div
      class="star medium"
      style="top: 52%; left: 78%; animation-delay: 2.2s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 92%; left: 55%; animation-delay: 2.1s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 25%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 78%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 8%; animation-delay: 0.5s"
    ></div>
    <div
      class="star small"
      style="top: 48%; left: 92%; animation-delay: 1.9s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 15%; animation-delay: 2.5s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 35%; animation-delay: 2.3s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 14%; left: 52%; animation-delay: 0.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 22%; left: 12%; animation-delay: 1.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 82%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 54%; left: 42%; animation-delay: 1.3s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 72%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 85%; left: 28%; animation-delay: 0.6s"
    ></div>

    <!-- Floating sparkles -->
    <div
      class="floating-sparkle"
      style="top: 20%; left: 65%; animation-delay: 1.4s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 40%; left: 38%; animation-delay: 2.8s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 60%; left: 78%; animation-delay: 0.9s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 80%; left: 22%; animation-delay: 2.2s"
    ></div>
  </div>

  <!-- Mystical Gradient Overlay -->
  <div class="fixed inset-0 pointer-events-none z-1">
    <div class="mystical-gradient"></div>
  </div>

  <!-- Content -->
  <div class="min-h-screen flex items-center justify-center p-4 relative z-10">
    <!-- Back to Home Button -->
    <div class="absolute top-6 left-6 z-20">
      <button
        class="back-home-btn group"
        (click)="onBackToHome()"
        type="button"
        aria-label="Volver al inicio"
      >
        <i
          class="fas fa-arrow-left mr-2 transition-transform group-hover:-translate-x-1"
        ></i>
        <span class="hidden sm:inline">Volver al Inicio</span>
        <span class="sm:hidden">Inicio</span>
      </button>
    </div>

    <!-- Register Container -->
    <div class="register-container">
      <!-- Header Section -->
      <div class="register-header" *ngIf="!showEmailVerification()">
        <!-- Mystical Icon Container - TRANSFORMADO CON STAR-OF-LIFE -->
        <div class="register-icon-container">
          <div class="mystical-starlife-wrapper">
            <i class="fas fa-star-of-life mystical-starlife-icon"></i>
            <div class="starlife-inner-glow"></div>
            <div class="starlife-outer-glow"></div>
            <div class="starlife-particles">
              <div class="particle particle-1"></div>
              <div class="particle particle-2"></div>
              <div class="particle particle-3"></div>
              <div class="particle particle-4"></div>
            </div>
          </div>

          <!-- Sparkle secundario - TRANSFORMADO -->
          <div class="icon-sparkle-professional">
            <i class="fas fa-sparkles sparkle-secondary"></i>
            <div class="sparkle-trail sparkle-trail-1"></div>
            <div class="sparkle-trail sparkle-trail-2"></div>
          </div>

          <!-- Icono secundario - TRANSFORMADO CON GEM MÍSTICO -->
          <div class="icon-secondary-professional">
            <div class="mystical-gem-mini">
              <i class="fas fa-gem gem-mini-icon"></i>
              <div class="gem-mini-glow"></div>
            </div>
          </div>
        </div>

        <!-- Title and Subtitle -->
        <h1 class="register-title">
          <span class="title-highlight">Únete</span> a la Magia
        </h1>
        <p class="register-subtitle">
          Comienza tu viaje de despertar espiritual y descubre tu verdadero
          potencial místico
        </p>
      </div>

      <!-- Register Form -->
      <form
        class="register-form"
        (ngSubmit)="onSubmit()"
        #registerForm="ngForm"
        novalidate
        (keydown)="onKeyDown($event)"
        *ngIf="!showEmailVerification()"
      >
        <!-- Personal Information Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-user-circle section-icon"></i>
            <h3 class="section-title">Información Personal</h3>
          </div>

          <!-- Name Fields Row -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="nombre">
                <i class="fas fa-user label-icon"></i>
                Nombre
              </label>
              <div class="input-container">
                <input
                  id="nombre"
                  name="nombre"
                  type="text"
                  class="form-input"
                  [class.error]="hasFieldError('nombre')"
                  [class.loading]="isLoading()"
                  placeholder="Tu nombre"
                  [value]="credentials().nombre"
                  (input)="onInputChange($event, 'nombre')"
                  (blur)="onFieldBlur('nombre')"
                  required
                  autocomplete="given-name"
                  spellcheck="false"
                />
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
              <div class="error-message" *ngIf="hasFieldError('nombre')">
                <i class="fas fa-exclamation-circle mr-2"></i>
                {{ getFieldError("nombre") }}
              </div>
            </div>

            <div class="form-group">
              <label class="form-label" for="apellido">
                <i class="fas fa-user label-icon"></i>
                Apellido
              </label>
              <div class="input-container">
                <input
                  id="apellido"
                  name="apellido"
                  type="text"
                  class="form-input"
                  [class.error]="hasFieldError('apellido')"
                  [class.loading]="isLoading()"
                  placeholder="Tu apellido"
                  [value]="credentials().apellido"
                  (input)="onInputChange($event, 'apellido')"
                  (blur)="onFieldBlur('apellido')"
                  required
                  autocomplete="family-name"
                  spellcheck="false"
                />
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
              <div class="error-message" *ngIf="hasFieldError('apellido')">
                <i class="fas fa-exclamation-circle mr-2"></i>
                {{ getFieldError("apellido") }}
              </div>
            </div>
          </div>

          <!-- Email Field -->
          <div class="form-group">
            <label class="form-label" for="email">
              <i class="fas fa-envelope label-icon"></i>
              Correo Electrónico
            </label>
            <div class="input-container">
              <input
                id="email"
                name="email"
                type="email"
                class="form-input"
                [class.error]="hasFieldError('email')"
                [class.loading]="isLoading()"
                placeholder="tu@email.com"
                [value]="credentials().email"
                (input)="onInputChange($event, 'email')"
                (blur)="onFieldBlur('email')"
                required
                autocomplete="email"
                spellcheck="false"
              />
              <div class="input-border"></div>
              <div class="input-glow"></div>
            </div>
            <div class="error-message" *ngIf="hasFieldError('email')">
              <i class="fas fa-exclamation-circle mr-2"></i>
              {{ getFieldError("email") }}
            </div>
          </div>
        </div>

        <!-- Spiritual Profile Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-star section-icon"></i>
            <h3 class="section-title">Tu Perfil Espiritual</h3>
          </div>

          <!-- Profile Type Selection - ICONOS TRANSFORMADOS -->
          <div class="form-group">
            <label class="form-label">
              <i class="fas fa-heart label-icon"></i>
              ¿Con qué tipo de persona te identificas?
            </label>
            <div class="radio-group-enhanced">
              <div
                class="radio-option-enhanced"
                (click)="onProfileSelect('espiritual')"
              >
                <input
                  type="radio"
                  name="tipoPerfil"
                  value="espiritual"
                  [checked]="credentials().tipoPerfil === 'espiritual'"
                  (change)="onProfileSelect('espiritual')"
                  style="display: none"
                />
                <div
                  class="radio-card"
                  [class.selected]="credentials().tipoPerfil === 'espiritual'"
                >
                  <!-- TRANSFORMADO: De 🧘‍♀️ a SPA PROFESIONAL -->
                  <div class="radio-icon-professional spiritual-seeker">
                    <div class="zen-meditation-wrapper">
                      <i class="fas fa-spa zen-icon"></i>
                      <div class="zen-inner-peace"></div>
                      <div class="zen-aura-ring ring-1"></div>
                      <div class="zen-aura-ring ring-2"></div>
                      <div class="zen-particles">
                        <div class="zen-particle zen-p-1"></div>
                        <div class="zen-particle zen-p-2"></div>
                        <div class="zen-particle zen-p-3"></div>
                      </div>
                    </div>
                  </div>
                  <div class="radio-content">
                    <span class="radio-title">Buscador Espiritual</span>
                    <span class="radio-description"
                      >Exploro mi crecimiento interior y busco paz mental</span
                    >
                  </div>
                  <div class="radio-check">
                    <i class="fas fa-check"></i>
                  </div>
                </div>
              </div>

              <div
                class="radio-option-enhanced"
                (click)="onProfileSelect('esoterico')"
              >
                <input
                  type="radio"
                  name="tipoPerfil"
                  value="esoterico"
                  [checked]="credentials().tipoPerfil === 'esoterico'"
                  (change)="onProfileSelect('esoterico')"
                  style="display: none"
                />
                <div
                  class="radio-card"
                  [class.selected]="credentials().tipoPerfil === 'esoterico'"
                >
                  <!-- TRANSFORMADO: De 🔮 a GEM PROFESIONAL -->
                  <div class="radio-icon-professional esoteric-practitioner">
                    <div class="mystical-crystal-wrapper-radio">
                      <i class="fas fa-gem crystal-radio-icon"></i>
                      <div class="crystal-radio-inner-glow"></div>
                      <div class="crystal-radio-outer-glow"></div>
                      <div class="crystal-radio-particles">
                        <div class="crystal-particle c-p-1"></div>
                        <div class="crystal-particle c-p-2"></div>
                        <div class="crystal-particle c-p-3"></div>
                      </div>
                    </div>
                  </div>
                  <div class="radio-content">
                    <span class="radio-title">Practicante Esotérico</span>
                    <span class="radio-description"
                      >Practico artes místicas y estudio el ocultismo</span
                    >
                  </div>
                  <div class="radio-check">
                    <i class="fas fa-check"></i>
                  </div>
                </div>
              </div>

              <div
                class="radio-option-enhanced"
                (click)="onProfileSelect('ambos')"
              >
                <input
                  type="radio"
                  name="tipoPerfil"
                  value="ambos"
                  [checked]="credentials().tipoPerfil === 'ambos'"
                  (change)="onProfileSelect('ambos')"
                  style="display: none"
                />
                <div
                  class="radio-card"
                  [class.selected]="credentials().tipoPerfil === 'ambos'"
                >
                  <!-- TRANSFORMADO: De 🌟 a STAR-OF-LIFE PROFESIONAL -->
                  <div class="radio-icon-professional balanced-seeker">
                    <div class="balanced-star-wrapper">
                      <i class="fas fa-star-of-life balanced-star-icon"></i>
                      <div class="balanced-inner-light"></div>
                      <div class="balanced-energy-rings">
                        <div class="energy-ring e-ring-1"></div>
                        <div class="energy-ring e-ring-2"></div>
                      </div>
                      <div class="balanced-sparkles">
                        <div class="balanced-sparkle b-s-1"></div>
                        <div class="balanced-sparkle b-s-2"></div>
                        <div class="balanced-sparkle b-s-3"></div>
                        <div class="balanced-sparkle b-s-4"></div>
                      </div>
                    </div>
                  </div>
                  <div class="radio-content">
                    <span class="radio-title">Ambos</span>
                    <span class="radio-description"
                      >Combino crecimiento espiritual con prácticas
                      esotéricas</span
                    >
                  </div>
                  <div class="radio-check">
                    <i class="fas fa-check"></i>
                  </div>
                </div>
              </div>
            </div>
            <div class="field-hint">
              <!-- TRANSFORMADO: De 💡 a LIGHTBULB PROFESIONAL -->
              <div class="hint-lightbulb-wrapper">
                <i class="fas fa-lightbulb hint-bulb-icon"></i>
                <div class="bulb-glow-hint"></div>
                <div class="bulb-spark-hint"></div>
              </div>
              <strong>Nota:</strong> <br />&nbsp;La opción que selecciones
              determinará el contenido que se te mostrará
            </div>
            <div class="error-message" *ngIf="hasFieldError('tipoPerfil')">
              <i class="fas fa-exclamation-circle mr-2"></i>
              {{ getFieldError("tipoPerfil") }}
            </div>
          </div>

          <!-- Birth Date (Optional) -->
          <div class="form-group">
            <label class="form-label" for="fechaNacimiento">
              <i class="fas fa-calendar-alt label-icon"></i>
              Fecha de Nacimiento
              <span class="optional-badge">Opcional</span>
            </label>
            <div class="input-container">
              <input
                id="fechaNacimiento"
                name="fechaNacimiento"
                type="date"
                class="form-input"
                [value]="credentials().fechaNacimiento"
                (input)="onInputChange($event, 'fechaNacimiento')"
                autocomplete="bday"
              />
              <div class="input-border"></div>
              <div class="input-glow"></div>
            </div>
            <div class="field-hint">
              <i class="fas fa-info-circle mr-2"></i>
              Nos ayudará a calcular tu signo zodiacal y personalizar tu
              experiencia
            </div>
            <!-- Zodiac Sign Display -->
            <div
              class="zodiac-display"
              *ngIf="calculatedZodiacSign() as zodiacSign"
            >
              <div class="zodiac-icon">{{ zodiacSign.icon }}</div>
              <span
                >Tu signo zodiacal es:
                <strong>{{ zodiacSign.name }}</strong></span
              >
            </div>
          </div>
        </div>

        <!-- Security Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-shield-alt section-icon"></i>
            <h3 class="section-title">Seguridad de tu Cuenta</h3>
          </div>

          <!-- Password Fields Row -->
          <div class="form-row">
            <div class="form-group">
              <label class="form-label" for="password">
                <i class="fas fa-lock label-icon"></i>
                Contraseña
              </label>
              <div class="input-container">
                <input
                  id="password"
                  name="password"
                  [type]="showPassword() ? 'text' : 'password'"
                  class="form-input password-input"
                  [class.error]="hasFieldError('password')"
                  [class.loading]="isLoading()"
                  placeholder="••••••••"
                  [value]="credentials().password"
                  (input)="onInputChange($event, 'password')"
                  (blur)="onFieldBlur('password')"
                  required
                  minlength="6"
                  autocomplete="new-password"
                  spellcheck="false"
                />
                <button
                  type="button"
                  class="password-toggle"
                  (click)="togglePasswordVisibility('password')"
                  [attr.aria-label]="
                    showPassword() ? 'Ocultar contraseña' : 'Mostrar contraseña'
                  "
                  tabindex="-1"
                >
                  <i
                    [class]="showPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'"
                  ></i>
                </button>
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
              <div class="error-message" *ngIf="hasFieldError('password')">
                <i class="fas fa-exclamation-circle mr-2"></i>
                {{ getFieldError("password") }}
              </div>
            </div>

            <div class="form-group">
              <label class="form-label" for="confirmPassword">
                <i class="fas fa-lock label-icon"></i>
                Confirmar Contraseña
              </label>
              <div class="input-container">
                <input
                  id="confirmPassword"
                  name="confirmPassword"
                  [type]="showConfirmPassword() ? 'text' : 'password'"
                  class="form-input password-input"
                  [class.error]="hasFieldError('confirmPassword')"
                  [class.loading]="isLoading()"
                  placeholder="••••••••"
                  [value]="credentials().confirmPassword"
                  (input)="onInputChange($event, 'confirmPassword')"
                  (blur)="onFieldBlur('confirmPassword')"
                  required
                  autocomplete="new-password"
                  spellcheck="false"
                />
                <button
                  type="button"
                  class="password-toggle"
                  (click)="togglePasswordVisibility('confirmPassword')"
                  [attr.aria-label]="
                    showConfirmPassword()
                      ? 'Ocultar contraseña'
                      : 'Mostrar contraseña'
                  "
                  tabindex="-1"
                >
                  <i
                    [class]="
                      showConfirmPassword() ? 'fas fa-eye-slash' : 'fas fa-eye'
                    "
                  ></i>
                </button>
                <div class="input-border"></div>
                <div class="input-glow"></div>
              </div>
              <div
                class="error-message"
                *ngIf="hasFieldError('confirmPassword')"
              >
                <i class="fas fa-exclamation-circle mr-2"></i>
                {{ getFieldError("confirmPassword") }}
              </div>
            </div>
          </div>

          <!-- Password Strength Indicator -->
          <div class="password-strength" *ngIf="credentials().password">
            <div class="strength-label">
              <i class="fas fa-key mr-2"></i>
              Seguridad de la contraseña
            </div>
            <div class="strength-bar">
              <div
                class="strength-fill"
                [class]="getPasswordStrengthClass()"
                [style.width.%]="passwordStrength().percentage"
              ></div>
            </div>
            <div class="strength-text">{{ getPasswordStrengthText() }}</div>
          </div>
        </div>

        <!-- Terms and Conditions Section -->
        <div class="form-section">
          <div class="section-header">
            <i class="fas fa-handshake section-icon"></i>
            <h3 class="section-title">Términos y Condiciones</h3>
          </div>

          <!-- Terms Checkbox -->
          <div class="form-group">
            <div
              class="checkbox-label-enhanced"
              (click)="
                onCheckboxChange('acceptTerms', !credentials().acceptTerms)
              "
            >
              <input
                type="checkbox"
                [checked]="credentials().acceptTerms"
                (change)="onCheckboxToggle($event, 'acceptTerms')"
                required
                style="display: none"
              />
              <span
                class="checkmark-enhanced"
                [class.checked]="credentials().acceptTerms"
              >
                <i class="fas fa-check"></i>
              </span>
              <div class="checkbox-content">
                <span class="checkbox-text">
                  Acepto los
                  <a href="#" class="link-mystical">términos y condiciones</a> y
                  la
                  <a href="#" class="link-mystical">política de privacidad</a>
                </span>
                <span class="checkbox-required">Requerido</span>
              </div>
            </div>
            <div class="error-message" *ngIf="hasFieldError('acceptTerms')">
              <i class="fas fa-exclamation-circle mr-2"></i>
              {{ getFieldError("acceptTerms") }}
            </div>
          </div>

          <!-- Marketing Checkbox -->
          <div class="form-group">
            <div
              class="checkbox-label-enhanced"
              (click)="
                onCheckboxChange(
                  'acceptMarketing',
                  !credentials().acceptMarketing
                )
              "
            >
              <input
                type="checkbox"
                [checked]="credentials().acceptMarketing"
                (change)="onCheckboxToggle($event, 'acceptMarketing')"
                style="display: none"
              />
              <span
                class="checkmark-enhanced"
                [class.checked]="credentials().acceptMarketing"
              >
                <i class="fas fa-check"></i>
              </span>
              <div class="checkbox-content">
                <span class="checkbox-text">
                  Quiero recibir consejos espirituales, contenido exclusivo y
                  ofertas especiales por email
                </span>
                <span class="checkbox-optional">Opcional</span>
              </div>
            </div>
          </div>
        </div>

        <!-- Submit Button - MEJORADO CON ICONOS PROFESIONALES -->
        <button
          type="submit"
          class="register-submit-btn mystical-submit-enhanced"
          [disabled]="isLoading()"
          [class.loading]="isLoading()"
        >
          <span class="btn-content" *ngIf="!isLoading()">
            <div class="btn-icon-wrapper">
              <i class="fas fa-star-of-life btn-star-icon"></i>
              <div class="btn-star-glow"></div>
            </div>
            <span class="btn-text">Crear Mi Cuenta</span>
            <div class="btn-arrow-wrapper">
              <i class="fas fa-arrow-right btn-arrow-icon"></i>
              <div class="arrow-trail"></div>
            </div>
          </span>
          <span class="btn-loading" *ngIf="isLoading()">
            <div class="spinner mystical-spinner">
              <div class="spinner-inner"></div>
              <div class="spinner-particles">
                <div class="spinner-particle sp-1"></div>
                <div class="spinner-particle sp-2"></div>
                <div class="spinner-particle sp-3"></div>
              </div>
            </div>
            <span>Creando tu portal místico...</span>
          </span>
        </button>
      </form>

      <!-- Email Verification Section - ICONOS TRANSFORMADOS -->
      <div class="email-verification-section" *ngIf="showEmailVerification()">
        <!-- Verification Header -->
        <div class="verification-header">
          <div class="verification-icon-container">
            <!-- COMPLETAR: HTML mystical envelope -->
            <div class="mystical-envelope-wrapper">
              <i class="fas fa-envelope mystical-envelope-icon"></i>
              <div class="envelope-inner-glow"></div>
              <div class="envelope-outer-glow"></div>
              <div class="envelope-energy-waves">
                <div class="energy-wave wave-1"></div>
                <div class="energy-wave wave-2"></div>
                <div class="energy-wave wave-3"></div>
              </div>
              <div class="envelope-particles">
                <div class="env-particle env-p-1"></div>
                <div class="env-particle env-p-2"></div>
                <div class="env-particle env-p-3"></div>
                <div class="env-particle env-p-4"></div>
              </div>
            </div>

            <!-- COMPLETAR: Sparkle secundario -->
            <div class="verification-sparkle-professional">
              <i class="fas fa-sparkles verification-sparkle-icon"></i>
              <div class="verification-sparkle-trail v-trail-1"></div>
              <div class="verification-sparkle-trail v-trail-2"></div>
            </div>
          </div>

          <!-- CORREGIR: Usar estructura consistente -->
          <div class="verification-title-section">
            <i class="fas fa-check-circle section-icon"></i>
            <h2 class="verification-title">
              <span class="title-highlight">Verifica</span> tu Email
            </h2>
          </div>

          <div class="verification-subtitle-section">
            <i class="fas fa-hashtag section-icon"></i>
            <p class="verification-subtitle">
              Acabamos de enviar un código de <strong>seis dígitos</strong> a tu
              correo electrónico:<br />
              <span class="email-highlight">
                <i class="fas fa-envelope label-icon"></i>
                {{ credentials().email }}
              </span>
            </p>
          </div>

          <div class="verification-instruction-section">
            <i class="fas fa-info-circle section-icon"></i>
            <p class="verification-instruction">
              Ingrésalo aquí para completar tu registro
            </p>
          </div>
        </div>

        <!-- Verification Form -->
        <div class="verification-form">
          <!-- Code Input Container -->
          <div class="code-input-container">
            <div class="code-inputs-grid">
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 0)"
                (keydown)="onCodeKeyDown($event, 0)"
                (paste)="onCodePaste($event, 0)"
                [attr.data-index]="0"
              />
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 1)"
                (keydown)="onCodeKeyDown($event, 1)"
                (paste)="onCodePaste($event, 1)"
                [attr.data-index]="1"
              />
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 2)"
                (keydown)="onCodeKeyDown($event, 2)"
                (paste)="onCodePaste($event, 2)"
                [attr.data-index]="2"
              />
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 3)"
                (keydown)="onCodeKeyDown($event, 3)"
                (paste)="onCodePaste($event, 3)"
                [attr.data-index]="3"
              />
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 4)"
                (keydown)="onCodeKeyDown($event, 4)"
                (paste)="onCodePaste($event, 4)"
                [attr.data-index]="4"
              />
              <input
                type="text"
                maxlength="1"
                class="code-input"
                (input)="onCodeDigitInput($event, 5)"
                (keydown)="onCodeKeyDown($event, 5)"
                (paste)="onCodePaste($event, 5)"
                [attr.data-index]="5"
              />
            </div>

            <!-- Hint para el usuario - CON ICONO TRANSFORMADO -->
            <div class="code-input-hint" *ngIf="getFilledDigits() === 0">
              <div class="hint-lightbulb-wrapper-small">
                <i class="fas fa-lightbulb hint-bulb-icon-small"></i>
                <div class="bulb-glow-hint-small"></div>
              </div>
              Tip: Escribe cada dígito y avanzará automáticamente
            </div>

            <!-- Debug temporal -->
            <div
              class="debug-info"
              *ngIf="getFilledDigits() > 0"
              (click)="debugCodeState()"
              style="
                margin-top: 1rem;
                padding: 0.5rem;
                background: rgba(180, 162, 253, 0.1);
                border: 1px solid rgba(180, 162, 253, 0.3);
                border-radius: 0.5rem;
                cursor: pointer;
                font-size: 0.8rem;
                text-align: center;
              "
            ></div>
          </div>

          <!-- Error Message -->
          <div class="verification-error" *ngIf="verificationError()">
            <i class="fas fa-exclamation-triangle mr-2"></i>
            {{ verificationError() }}
          </div>

          <!-- Success Message -->
          <div class="verification-success" *ngIf="verificationSuccess()">
            <i class="fas fa-check-circle mr-2"></i>
            ¡Código verificado! Creando tu cuenta...
          </div>

          <!-- Action Buttons -->
          <div class="verification-actions">
            <button
              type="button"
              class="verify-btn mystical-verify-btn"
              [disabled]="!isCodeComplete() || isVerifying()"
              [class.loading]="isVerifying()"
              (click)="onVerifyCode()"
            >
              <span *ngIf="!isVerifying()">
                <div class="verify-icon-wrapper">
                  <i class="fas fa-shield-check verify-shield-icon"></i>
                  <div class="verify-shield-glow"></div>
                </div>
                Verificar Código
              </span>
              <span *ngIf="isVerifying()">
                <div class="verify-spinner-wrapper">
                  <div class="spinner mystical-verify-spinner">
                    <div class="verify-spinner-inner"></div>
                    <div class="verify-spinner-particles">
                      <div class="verify-spinner-particle vsp-1"></div>
                      <div class="verify-spinner-particle vsp-2"></div>
                      <div class="verify-spinner-particle vsp-3"></div>
                    </div>
                  </div>
                </div>
                Verificando...
              </span>
            </button>

            <div class="resend-section">
              <div class="resend-text-section">
                <i class="fas fa-question-circle section-icon"></i>
                <p class="resend-text">¿No recibiste el código?</p>
              </div>
              <button
                type="button"
                class="resend-btn mystical-resend-btn"
                [disabled]="resendCooldown() > 0 || isResending()"
                (click)="onResendCode()"
              >
                <span *ngIf="!isResending() && resendCooldown() === 0">
                  <div class="resend-icon-wrapper">
                    <i class="fas fa-paper-plane resend-plane-icon"></i>
                    <div class="resend-plane-trail"></div>
                  </div>
                  Reenviar código
                </span>
                <span *ngIf="isResending()">
                  <div class="resend-spinner-wrapper">
                    <div class="spinner resend-spinner">
                      <div class="resend-spinner-inner"></div>
                    </div>
                  </div>
                  Enviando...
                </span>
                <span *ngIf="resendCooldown() > 0">
                  Reenviar en {{ resendCooldown() }}s
                </span>
              </button>
            </div>
          </div>

          <!-- Back to Edit -->
          <div class="back-to-edit">
            <button
              type="button"
              class="back-edit-btn"
              (click)="onBackToEdit()"
            >
              <i class="fas fa-edit mr-2"></i>
              Cambiar email o información
            </button>
          </div>
        </div>
      </div>

      <!-- Divider -->
      <div class="divider" *ngIf="!showEmailVerification()">
        <span class="divider-text">O únete con</span>
      </div>

      <!-- Social Registration -->
      <div class="social-login" *ngIf="!showEmailVerification()">
        <button
          type="button"
          class="social-btn google-btn"
          (click)="onSocialRegister('google')"
          [disabled]="isLoading()"
          aria-label="Registrarse con Google"
        >
          <i class="fab fa-google mr-3" aria-hidden="true"></i>
          <span class="hidden sm:inline">Continuar con Google</span>
          <span class="sm:hidden">Google</span>
        </button>

        <button
          type="button"
          class="social-btn facebook-btn"
          (click)="onSocialRegister('facebook')"
          [disabled]="isLoading()"
          aria-label="Registrarse con Facebook"
        >
          <i class="fab fa-facebook-f mr-3" aria-hidden="true"></i>
          <span class="hidden sm:inline">Continuar con Facebook</span>
          <span class="sm:hidden">Facebook</span>
        </button>
      </div>

      <!-- Login Link -->
      <div class="login-link" *ngIf="!showEmailVerification()">
        <span class="login-text">¿Ya tienes una cuenta?</span>
        <button type="button" class="login-btn group" (click)="onGoToLogin()">
          Iniciar sesión
          <i
            class="fas fa-arrow-right ml-2 transition-transform group-hover:translate-x-1"
            aria-hidden="true"
          ></i>
        </button>
      </div>

      <!-- Trust Indicators -->
      <div
        class="trust-indicators"
        role="contentinfo"
        aria-label="Indicadores de seguridad"
        *ngIf="!showEmailVerification()"
      >
        <div class="trust-item">
          <i class="fas fa-shield-alt" aria-hidden="true"></i>
          <span>100% Seguro</span>
        </div>
        <div class="trust-item">
          <i class="fa-solid fa-wand-magic-sparkles"></i>
          <span>Arcanas Activas</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-times-circle" aria-hidden="true"></i>
          <span>Cancela cuando quieras</span>
        </div>
        <div class="trust-item">
          <i class="fas fa-users" aria-hidden="true"></i>
          <span>+10K miembros</span>
        </div>
      </div>
    </div>
  </div>

  <!-- Screen Reader Only Content -->
  <div class="sr-only" aria-live="polite" aria-atomic="true">
    <span *ngIf="isLoading()">Procesando registro...</span>
    <span *ngIf="calculatedZodiacSign() as zodiacSign"
      >Signo zodiacal calculado: {{ zodiacSign.name }}</span
    >
  </div>
</div>



================================================
File: app/features/auth/pages/register/register.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --accent-color: #8b4513;
  --success-color: #32cd32;
  --warning-color: #daa520;
  --error-color: #ff6b6b;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.2);
  --input-bg: rgba(16, 8, 32, 0.6);
  --input-border: rgba(180, 162, 253, 0.3);
  --shadow-primary: 0 0 20px rgba(180, 162, 253, 0.3);
  --shadow-glow: 0 0 30px rgba(180, 162, 253, 0.5);
  --backdrop-blur: blur(20px);

  --mystical-star-color: linear-gradient(
    135deg,
    #b4a2fd 0%,
    #ffffff 50%,
    #d4af37 100%
  );
  --mystical-gem-color: linear-gradient(
    135deg,
    #9370db 0%,
    #b4a2fd 50%,
    #dda0dd 100%
  );
  --mystical-zen-color: linear-gradient(
    135deg,
    #20b2aa 0%,
    #32cd32 50%,
    #98fb98 100%
  );
  --mystical-envelope-color: linear-gradient(
    135deg,
    #4169e1 0%,
    #b4a2fd 50%,
    #87ceeb 100%
  );
  --mystical-bulb-color: linear-gradient(
    135deg,
    #daa520 0%,
    #ffd700 50%,
    #ffffe0 100%
  );

  --info-color: #17a2b8;
  --gradient-primary: linear-gradient(135deg, var(--primary-color), #9b87fd);
  --gradient-secondary: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.15) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.15) 100%
  );
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.8);
  }
}

@keyframes float-up {
  0% {
    opacity: 0;
    transform: translateY(30px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes spin {
  from {
    transform: rotate(0deg);
  }
  to {
    transform: rotate(360deg);
  }
}

@keyframes shimmer {
  0% {
    transform: translateX(-100%);
  }
  100% {
    transform: translateX(100%);
  }
}

@keyframes section-reveal {
  0% {
    opacity: 0;
    transform: translateY(30px) scale(0.98);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

@keyframes badge-glow {
  0%,
  100% {
    box-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.6);
  }
}

@keyframes shake {
  0%,
  100% {
    transform: translateX(0);
  }
  10%,
  30%,
  50%,
  70%,
  90% {
    transform: translateX(-4px);
  }
  20%,
  40%,
  60%,
  80% {
    transform: translateX(4px);
  }
}

@keyframes fadeInUp {
  0% {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.star {
  position: absolute;
  background: var(--primary-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);

  &.large {
    width: 3px;
    height: 3px;
    animation: twinkle 4s ease-in-out infinite;
  }

  &.medium {
    width: 2px;
    height: 2px;
    animation: twinkle 3s ease-in-out infinite;
  }

  &.small {
    width: 1px;
    height: 1px;
    animation: twinkle 5s ease-in-out infinite;
  }
}

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
}

.floating-sparkle {
  position: absolute;
  width: 1.5px;
  height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
}

.mystical-gradient {
  background: radial-gradient(
      ellipse at 20% 30%,
      rgba(180, 162, 253, 0.05) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 80% 70%,
      rgba(180, 162, 253, 0.03) 0%,
      transparent 50%
    );
  width: 100%;
  height: 100%;
}

.back-home-btn {
  display: flex;
  align-items: center;
  padding: 0.75rem 1rem;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 0.5rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  backdrop-filter: blur(10px);
  transition: all 0.3s ease;
  cursor: pointer;
  text-decoration: none;

  &:hover {
    background: rgba(180, 162, 253, 0.15);
    transform: translateY(-2px);
    box-shadow: var(--shadow-primary);
  }
}

.register-container {
  width: 100%;
  max-width: 580px;
  background: var(--glass-bg);
  backdrop-filter: var(--backdrop-blur);
  border: 1px solid var(--glass-border);
  border-radius: 1.5rem;
  padding: 3rem 2.5rem;
  box-shadow: var(--shadow-primary);
  animation: float-up 0.8s ease-out;
  position: relative;
  overflow: hidden;
  max-height: 95vh;
  overflow-y: auto;

  scrollbar-width: thin;
  scrollbar-color: rgba(180, 162, 253, 0.3) transparent;

  &::-webkit-scrollbar {
    width: 6px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: rgba(180, 162, 253, 0.3);
    border-radius: 3px;
  }

  &::-webkit-scrollbar-thumb:hover {
    background: rgba(180, 162, 253, 0.5);
  }
}

.register-header {
  text-align: center;
  margin-bottom: 2.5rem;
}

.register-icon-container {
  position: relative;
  display: inline-block;
  margin-bottom: 1.5rem;
}

.register-icon {
  font-size: 3.5rem;
  animation: pulse-glow 4s ease-in-out infinite;
  display: block;
}

.icon-sparkle {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  font-size: 1.5rem;
  animation: floating-sparkle 3s ease-in-out infinite;
}

.icon-secondary {
  position: absolute;
  bottom: -0.25rem;
  left: -0.25rem;
  font-size: 1.25rem;
  animation: floating-sparkle 5s ease-in-out infinite;
  opacity: 0.7;
}

.register-title {
  font-size: 2.25rem;
  font-weight: 300;
  margin-bottom: 0.5rem;
  color: var(--primary-color);
}

.title-highlight {
  font-weight: 600;
  background: linear-gradient(135deg, var(--primary-color), #ffffff);
  -webkit-background-clip: text;
  background-clip: text;
}

.register-subtitle {
  font-size: 1rem;
  opacity: 0.8;
  color: var(--primary-color);
  line-height: 1.5;
  margin-bottom: 1.5rem;
  max-width: 450px;
  margin-left: auto;
  margin-right: auto;
}

.plan-indicator {
  display: inline-flex;
  align-items: center;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  padding: 0.75rem 1rem;
  border-radius: 1.5rem;
  font-size: 0.875rem;
  color: var(--primary-color);
  backdrop-filter: blur(10px);
  animation: badge-glow 4s ease-in-out infinite;
  margin-bottom: 1rem;

  .plan-name {
    font-weight: 600;
    margin-right: 0.5rem;
  }
}

.trial-badge {
  background: var(--success-color);
  color: white;
  padding: 0.25rem 0.75rem;
  border-radius: 1rem;
  margin-left: 0.75rem;
  font-size: 0.75rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  box-shadow: 0 0 10px rgba(50, 205, 50, 0.3);
}

.register-form {
  margin-bottom: 2rem;
}

.form-section {
  margin-bottom: 2.5rem;
  animation: section-reveal 0.6s ease-out;
  animation-fill-mode: both;
  background: rgba(180, 162, 253, 0.03);
  border: 1px solid rgba(180, 162, 253, 0.08);
  border-radius: 1rem;
  padding: 1.5rem;
  backdrop-filter: blur(5px);
}

.section-header {
  display: flex;
  align-items: center;
  margin-bottom: 1.5rem;
  padding-bottom: 0.75rem;
  border-bottom: 1px solid var(--glass-border);
}

.section-icon {
  font-size: 1.25rem;
  color: var(--primary-color);
  margin-right: 0.75rem;
  opacity: 0.8;
  filter: drop-shadow(0 0 5px rgba(180, 162, 253, 0.3));
}

.section-title {
  font-size: 1.1rem;
  font-weight: 600;
  color: var(--primary-color);
  margin: 0;
}

.form-group {
  margin-bottom: 1.5rem;
}

.form-row {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
}

.form-label {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  font-weight: 500;
  color: var(--primary-color);
  margin-bottom: 0.5rem;
}

.label-icon {
  width: 1rem;
  margin-right: 0.5rem;
  opacity: 0.7;
}

.optional-badge {
  background: rgba(180, 162, 253, 0.2);
  color: var(--primary-color);
  padding: 0.125rem 0.5rem;
  border-radius: 0.5rem;
  font-size: 0.75rem;
  font-weight: 400;
  margin-left: 0.5rem;
  opacity: 0.8;
}

.input-container {
  position: relative;
  width: 100%;
}

.form-input {
  width: 100%;
  padding: 1rem 1.25rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  color: var(--primary-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;

  &::placeholder {
    color: rgba(180, 162, 253, 0.5);
  }

  &:focus {
    outline: none;
    border-color: var(--primary-color);
    background: rgba(16, 8, 32, 0.8);
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.1);
  }

  &.error {
    border-color: var(--error-color);
    background: rgba(255, 107, 107, 0.1);
  }

  &.loading {
    position: relative;
    overflow: hidden;

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(180, 162, 253, 0.1),
        transparent
      );
      animation: shimmer 1.5s infinite;
    }
  }
}

.input-border {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 0.75rem;
  padding: 1px;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.3),
    transparent,
    rgba(180, 162, 253, 0.3)
  );
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  opacity: 0;
  transition: opacity 0.3s ease;
  pointer-events: none;
}

.form-input:focus + .input-border {
  opacity: 1;
}

.input-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.form-input:focus + .input-border + .input-glow {
  width: 170%;
  height: 110%;
}

.password-input {
  padding-right: 3rem;
}

.password-toggle {
  position: absolute;
  top: 50%;
  right: 1rem;
  transform: translateY(-50%);
  background: none;
  border: none;
  color: var(--primary-color);
  cursor: pointer;
  font-size: 1rem;
  opacity: 0.7;
  transition: opacity 0.3s ease;
  z-index: 3;

  &:hover {
    opacity: 1;
  }
}

.error-message {
  display: flex;
  align-items: center;
  color: #ff4444 !important;
  font-size: 0.875rem;
  font-weight: 500;
  margin-top: 0.25rem;
  padding: 0.5rem 0.75rem;
  animation: float-up 0.3s ease-out;

  &.hidden {
    display: none;
  }
}

.field-hint {
  display: flex;
  align-items: center;
  color: var(--primary-color);
  font-size: 0.8rem;
  margin-top: 0.5rem;
  opacity: 0.7;
  font-style: italic;
}

.radio-group-enhanced {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.radio-option-enhanced {
  cursor: pointer;
  transition: all 0.3s ease;
  display: block;
  width: 100%;

  input[type="radio"] {
    display: none !important;
  }
}

.radio-card {
  display: flex;
  align-items: center;
  padding: 1.25rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;
  cursor: pointer;
  width: 100%;

  &:hover {
    border-color: rgba(180, 162, 253, 0.4);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(180, 162, 253, 0.1);
  }

  &.selected {
    border-color: var(--primary-color);
    background: rgba(180, 162, 253, 0.15);
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.2);

    .radio-check {
      opacity: 1;
      transform: scale(1);
      background: var(--primary-color);
      color: var(--secondary-color);
    }
  }
}

.radio-icon {
  font-size: 2rem;
  margin-right: 1rem;
  opacity: 0.8;
  flex-shrink: 0;
}

.radio-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.radio-title {
  font-size: 1rem;
  font-weight: 600;
  color: var(--primary-color);
  margin-bottom: 0.25rem;
}

.radio-description {
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.7;
}

.radio-check {
  width: 2rem;
  height: 2rem;
  border: 2px solid var(--primary-color);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  background: transparent;
  color: var(--primary-color);
  opacity: 0.3;
  transform: scale(0.8);
  transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
  flex-shrink: 0;

  i {
    font-size: 1rem;
  }
}

.discipline-card {
  display: flex;
  flex-direction: column;
  align-items: center;
  padding: 1rem;
  background: var(--input-bg);
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  text-align: center;
  min-height: 120px;
  justify-content: center;

  &:hover {
    border-color: rgba(180, 162, 253, 0.4);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(180, 162, 253, 0.1);
    background: rgba(180, 162, 253, 0.08);
  }

  &.selected {
    border-color: var(--primary-color);
    background: rgba(180, 162, 253, 0.15);
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.2);
  }

  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;

    &:hover {
      transform: none;
      box-shadow: none;
      background: var(--input-bg);
      border-color: var(--input-border);
    }
  }
}

.discipline-icon {
  font-size: 2.5rem;
  margin-bottom: 0.5rem;
  line-height: 1;
}

.discipline-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--primary-color);
  margin-bottom: 0.25rem;
  line-height: 1.2;
}

.discipline-description {
  font-size: 0.75rem;
  color: var(--primary-color);
  opacity: 0.7;
  line-height: 1.2;
}

.discipline-check {
  position: absolute;
  top: 0.5rem;
  right: 0.5rem;
  width: 1.5rem;
  height: 1.5rem;
  background: var(--primary-color);
  color: var(--secondary-color);
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.75rem;
  box-shadow: 0 2px 8px rgba(180, 162, 253, 0.4);
}

.selected-count {
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.8;
  text-align: center;
  font-style: italic;
  margin-top: 0.5rem;
  padding: 0.5rem;
  background: rgba(180, 162, 253, 0.1);
  border-radius: 0.5rem;
  border: 1px solid rgba(180, 162, 253, 0.2);
}

.zodiac-display {
  background: rgba(180, 162, 253, 0.1);
  border: 1px solid rgba(180, 162, 253, 0.3);
  border-radius: 0.75rem;
  padding: 1rem;
  margin-top: 0.75rem;
  display: flex;
  align-items: center;
  color: var(--primary-color);
  font-size: 0.875rem;
}

.zodiac-icon {
  font-size: 1.5rem;
  margin-right: 0.75rem;
}

.password-strength {
  margin-top: 1rem;
  padding: 1rem;
  background: rgba(180, 162, 253, 0.05);
  border: 1px solid rgba(180, 162, 253, 0.1);
  border-radius: 0.75rem;
  backdrop-filter: blur(10px);
}

.strength-label {
  display: flex;
  align-items: center;
  font-size: 0.875rem;
  color: var(--primary-color);
  margin-bottom: 0.75rem;
  font-weight: 500;
}

.strength-bar {
  width: 100%;
  height: 8px;
  background: rgba(180, 162, 253, 0.2);
  border-radius: 4px;
  overflow: hidden;
  margin-bottom: 0.75rem;
  position: relative;

  border: 1px solid rgba(180, 162, 253, 0.1);
}

.strength-fill {
  height: 100%;
  width: 0%;
  border-radius: 4px;
  transition: all 0.6s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;

  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.6s ease;
  }

  &.strength-weak {
    background: linear-gradient(45deg, #ff6b6b, #ff5252);
    box-shadow: 0 0 10px rgba(255, 107, 107, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  &.strength-medium {
    background: linear-gradient(45deg, #ffa726, #ff9800);
    box-shadow: 0 0 10px rgba(255, 167, 38, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);
  }

  &.strength-strong {
    background: linear-gradient(45deg, #66bb6a, #4caf50);
    box-shadow: 0 0 10px rgba(102, 187, 106, 0.4),
      inset 0 1px 0 rgba(255, 255, 255, 0.2);

    &::after {
      left: 100%;
    }
  }

  &:hover::after {
    left: 100%;
  }
}

.strength-text {
  font-size: 0.8rem;
  color: var(--primary-color);
  opacity: 0.9;
  text-align: left;
  font-weight: 500;
  line-height: 1.3;
  min-height: 1.2rem;

  &.weak-text {
    color: #ff6b6b;
  }

  &.medium-text {
    color: #ffa726;
  }

  &.strong-text {
    color: #66bb6a;
  }
}

@keyframes strength-appear {
  0% {
    opacity: 0;
    transform: translateY(-10px);
  }
  100% {
    opacity: 1;
    transform: translateY(0);
  }
}

.password-strength {
  animation: strength-appear 0.4s ease-out;
}

.checkbox-label-enhanced {
  display: flex;
  align-items: flex-start;
  cursor: pointer;
  font-size: 0.9rem;
  color: var(--primary-color);
  line-height: 1.4;

  input[type="checkbox"] {
    display: none !important;
  }
}

.checkmark-enhanced {
  width: 1.5rem;
  height: 1.5rem;
  border: 2px solid var(--input-border);
  border-radius: 0.375rem;
  background: var(--input-bg);
  display: flex;
  align-items: center;
  justify-content: center;
  margin-right: 1rem;
  margin-top: 0.125rem;
  flex-shrink: 0;
  transition: all 0.4s ease;
  backdrop-filter: blur(10px);

  i {
    font-size: 0.875rem;
    opacity: 0;
    transform: scale(0);
    transition: all 0.4s cubic-bezier(0.68, -0.55, 0.265, 1.55);
    color: var(--secondary-color);
  }

  &.checked {
    background: var(--primary-color);
    border-color: var(--primary-color);
    transform: scale(1.05);
    box-shadow: 0 0 15px rgba(180, 162, 253, 0.4);

    i {
      opacity: 1;
      transform: scale(1);
    }
  }
}

.checkbox-content {
  flex: 1;
  display: flex;
  flex-direction: column;
}

.checkbox-text {
  margin-bottom: 0.25rem;
}

.checkbox-required {
  font-size: 0.75rem;
  color: var(--error-color);
  font-weight: 500;
}

.checkbox-optional {
  font-size: 0.75rem;
  color: var(--primary-color);
  opacity: 0.6;
  font-weight: 400;
}

.link-mystical {
  color: var(--primary-color);
  text-decoration: underline;
  transition: all 0.3s ease;
  font-weight: 500;

  &:hover {
    color: #ffffff;
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.5);
  }
}

.register-submit-btn {
  width: 100%;
  padding: 1.25rem 1.5rem;
  background: linear-gradient(135deg, var(--primary-color), #9b87fd);
  border: none;
  border-radius: 0.75rem;
  color: var(--secondary-color);
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;
  margin-bottom: 1.5rem;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.5s ease;
  }

  &:not(:disabled):hover {
    transform: translateY(-2px);
    box-shadow: var(--shadow-glow);

    &::before {
      left: 100%;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  &.loading {
    cursor: not-allowed;
  }
}

.btn-content {
  display: flex;
  align-items: center;
  justify-content: center;
}

.btn-text {
  margin: 0 0.5rem;
}

.btn-loading {
  display: flex;
  align-items: center;
  justify-content: center;
}

.spinner {
  width: 1rem;
  height: 1rem;
  border: 2px solid rgba(16, 8, 32, 0.3);
  border-top: 2px solid var(--secondary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-right: 0.5rem;
}

.email-verification-section {
  animation: section-reveal 0.8s ease-out;
  margin-bottom: 2rem;
}

.verification-header {
  text-align: center;
  margin-bottom: 2.5rem;
}

.verification-icon-container {
  position: relative;
  display: inline-block;
  margin-bottom: 1.5rem;
}

.verification-icon {
  font-size: 4rem;
  animation: pulse-glow 3s ease-in-out infinite;
  display: block;
}

.verification-sparkle {
  position: absolute;
  top: -0.5rem;
  right: -0.75rem;
  font-size: 1.5rem;
  animation: floating-sparkle 4s ease-in-out infinite;
}

.verification-title {
  font-size: 2rem;
  font-weight: 300;
  margin-bottom: 1rem;
  color: var(--primary-color);
}

.verification-subtitle {
  font-size: 1rem;
  opacity: 0.9;
  color: var(--primary-color);
  line-height: 1.6;
  margin-bottom: 0.75rem;
  max-width: 400px;
  margin-left: auto;
  margin-right: auto;
}

.email-highlight {
  color: #ffffff;
  font-weight: 600;
  background: rgba(180, 162, 253, 0.2);
  padding: 0.25rem 0.75rem;
  border-radius: 0.5rem;
  border: 1px solid rgba(180, 162, 253, 0.3);
  display: inline-block;
  margin-top: 0.5rem;
  backdrop-filter: blur(10px);
}

.verification-instruction {
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.8;
  font-style: italic;
  margin-bottom: 0;
}

.verification-form {
  background: rgba(180, 162, 253, 0.04);
  border: 1px solid rgba(180, 162, 253, 0.1);
  border-radius: 1.25rem;
  padding: 2.5rem 2rem;
  backdrop-filter: blur(15px);
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.5),
      transparent
    );
  }
}

.code-input-container {
  margin-bottom: 2rem;
}

.code-inputs-grid {
  display: grid;
  grid-template-columns: repeat(6, 1fr);
  gap: 1rem;
  margin-bottom: 1.5rem;
  max-width: 360px;
  margin-left: auto;
  margin-right: auto;
}

.code-input {
  width: 100%;
  height: 4rem;
  background: var(--input-bg) !important;
  border: 2px solid var(--input-border);
  border-radius: 0.75rem;

  color: #ffffff !important;
  font-size: 1.5rem !important;
  font-weight: 600 !important;
  text-align: center !important;
  line-height: 1 !important;

  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  position: relative;
  outline: none;

  &::placeholder {
    color: rgba(255, 255, 255, 0.3) !important;
    font-weight: 400 !important;
  }

  &:focus {
    border-color: var(--primary-color) !important;
    background: rgba(16, 8, 32, 0.9) !important;
    color: #ffffff !important;
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.2),
      0 0 20px rgba(180, 162, 253, 0.3) !important;
    transform: scale(1.05);
  }

  &.filled {
    border-color: var(--success-color) !important;
    background: rgba(50, 205, 50, 0.1) !important;
    color: #ffffff !important;
    font-weight: 700 !important;
    box-shadow: 0 0 15px rgba(50, 205, 50, 0.2) !important;
  }

  &.error {
    border-color: var(--error-color) !important;
    background: rgba(255, 107, 107, 0.1) !important;
    color: #ffffff !important;
    box-shadow: 0 0 15px rgba(255, 107, 107, 0.2) !important;
  }
}

.debug-info {
  color: var(--primary-color) !important;
  font-family: "Courier New", monospace !important;

  &:hover {
    background: rgba(180, 162, 253, 0.2) !important;
    border-color: rgba(180, 162, 253, 0.5) !important;
  }
}

@media (max-width: 480px) {
  .code-input {
    height: 3rem !important;
    font-size: 1.25rem !important;
  }
}

@media (prefers-contrast: high) {
  .code-input {
    color: #ffffff !important;
    background: #000000 !important;
    border-color: #ffffff !important;

    &.filled {
      color: #00ff00 !important;
      border-color: #00ff00 !important;
    }

    &.error {
      color: #ff0000 !important;
      border-color: #ff0000 !important;
    }
  }
}

@media (prefers-color-scheme: dark) {
  .code-input {
    color: #ffffff !important;

    &:focus {
      color: #ffffff !important;
    }
  }
}

.verification-error {
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--error-color);
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: rgba(255, 107, 107, 0.1);
  border: 1px solid rgba(255, 107, 107, 0.3);
  border-radius: 0.75rem;
  backdrop-filter: blur(10px);
  animation: float-up 0.4s ease-out;
}

.verification-success {
  display: flex;
  align-items: center;
  justify-content: center;
  color: var(--success-color);
  font-size: 0.875rem;
  font-weight: 500;
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: rgba(50, 205, 50, 0.1);
  border: 1px solid rgba(50, 205, 50, 0.3);
  border-radius: 0.75rem;
  backdrop-filter: blur(10px);
  animation: float-up 0.4s ease-out;
}

.verification-actions {
  margin-bottom: 2rem;
}

.verify-btn {
  width: 100%;
  padding: 1.25rem 1.5rem;
  background: linear-gradient(135deg, var(--success-color), #28a745);
  border: none;
  border-radius: 0.75rem;
  color: white;
  font-size: 1rem;
  font-weight: 600;
  cursor: pointer;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  position: relative;
  overflow: hidden;
  margin-bottom: 1.5rem;

  display: flex;
  align-items: center;
  justify-content: center;
  min-height: 3.5rem;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.6s ease;
  }

  &:not(:disabled):hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(50, 205, 50, 0.4);

    &::before {
      left: 100%;
    }
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;

    &:hover::before {
      left: -100%;
    }
  }

  &.loading {
    cursor: not-allowed;
  }

  > span:first-child {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;
    width: 100%;

    i {
      font-size: 1rem;
    }
  }

  > span:last-child {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.75rem;
    width: 100%;
  }
  &.loading span:last-child {
    flex-direction: column;
    gap: 0.5rem;
  }
}

.resend-section {
  text-align: center;
  padding: 1.5rem 1rem;
  background: rgba(180, 162, 253, 0.03);
  border: 1px solid rgba(180, 162, 253, 0.08);
  border-radius: 0.75rem;
  backdrop-filter: blur(5px);
}

.resend-text {
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.8;
  margin-bottom: 1rem;
}

.resend-btn {
  background: none;
  border: 1px solid var(--input-border);
  border-radius: 0.5rem;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  padding: 0.75rem 1.25rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;

  &:not(:disabled):hover {
    border-color: var(--primary-color);
    background: rgba(180, 162, 253, 0.1);
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(180, 162, 253, 0.2);
  }

  &:disabled {
    opacity: 0.5;
    cursor: not-allowed;
    transform: none;
  }
}

.back-to-edit {
  text-align: center;
  padding-top: 1.5rem;
  border-top: 1px solid rgba(180, 162, 253, 0.1);
}

.back-edit-btn {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  opacity: 0.8;
  display: inline-flex;
  align-items: center;
  gap: 0.5rem;

  &:hover {
    opacity: 1;
    color: #ffffff;
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.5);
    transform: translateY(-1px);
  }
}

.verify-btn .spinner {
  width: 1.5rem;
  height: 1.5rem;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-top: 3px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
  margin-bottom: 0.5rem;
}

.verify-btn > span:last-child {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  width: 100%;

  &.loading {
    flex-direction: column;
    gap: 0.5rem;
  }
}

.divider {
  position: relative;
  margin: 1.5rem 0;
  text-align: center;

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 0;
    right: 0;
    height: 1px;
    background: var(--input-border);
  }
}

.divider-text {
  background: var(--glass-bg);
  padding: 0 1rem;
  font-size: 0.875rem;
  color: var(--primary-color);
  opacity: 0.7;
}

.social-login {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 1rem;
  margin-bottom: 1.5rem;
}

.social-btn {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 1rem 1.25rem;
  border: 1px solid var(--input-border);
  border-radius: 0.75rem;
  background: var(--input-bg);
  color: var(--primary-color);
  font-size: 0.9rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  backdrop-filter: blur(10px);
  font-family: "Inter", sans-serif;
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    transition: left 0.6s ease;
  }

  &:hover {
    border-color: var(--primary-color);
    transform: translateY(-2px);
    box-shadow: 0 8px 25px rgba(180, 162, 253, 0.15);

    &::before {
      left: 100%;
    }
  }

  i {
    margin-right: 0.75rem;
    font-size: 1.1rem;
  }
}

.google-btn {
  border-left: 2px solid rgba(234, 67, 53, 0.3);
  border-bottom: 1px solid rgba(234, 67, 53, 0.2);

  &:hover {
    background: rgba(234, 67, 53, 0.08);
    border-color: #ea4335;
    border-left: 2px solid #ea4335;
    border-bottom: 1px solid #ea4335;
    color: #ea4335;
    box-shadow: 0 8px 25px rgba(234, 67, 53, 0.15),
      inset 2px 0 0 rgba(234, 67, 53, 0.1);
  }
}

.facebook-btn {
  border-left: 2px solid rgba(24, 119, 242, 0.3);
  border-bottom: 1px solid rgba(24, 119, 242, 0.2);

  &:hover {
    background: rgba(24, 119, 242, 0.08);
    border-color: #1877f2;
    border-left: 2px solid #1877f2;
    border-bottom: 1px solid #1877f2;
    color: #1877f2;
    box-shadow: 0 8px 25px rgba(24, 119, 242, 0.15),
      inset 2px 0 0 rgba(24, 119, 242, 0.1);
  }
}

.login-link {
  text-align: center;
  margin-bottom: 1.5rem;
}

.login-text {
  color: var(--primary-color);
  opacity: 0.8;
  font-size: 0.875rem;
  margin-right: 0.5rem;
}

.login-btn {
  background: none;
  border: none;
  color: var(--primary-color);
  font-size: 0.875rem;
  font-weight: 600;
  cursor: pointer;
  text-decoration: underline;
  transition: all 0.3s ease;
  display: inline-flex;
  align-items: center;

  &:hover {
    color: #ffffff;
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.5);
  }
}

.trust-indicators {
  display: grid;
  grid-template-columns: repeat(4, 1fr);
  gap: 1rem;
  padding-top: 1.5rem;
  border-top: 1px solid var(--input-border);
}

.trust-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  font-size: 0.75rem;
  text-align: center;
  color: var(--primary-color);
  opacity: 0.6;
  transition: all 0.3s ease;

  &:hover {
    opacity: 0.8;
    transform: translateY(-2px);
  }

  i {
    font-size: 1rem;
    margin-bottom: 0.25rem;
  }
}

@media (max-width: 768px) {
  .register-container {
    margin: 1rem;
    padding: 2.5rem 2rem;
    border-radius: 1rem;
    max-width: none;
  }

  .register-title {
    font-size: 2rem;
  }

  .register-icon {
    font-size: 3rem;
  }

  .social-login {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .trust-indicators {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
  }

  .code-inputs-grid {
    gap: 0.75rem;
    max-width: 320px;
  }

  .code-input {
    height: 3.5rem;
    font-size: 1.25rem;
  }

  .verification-form {
    padding: 2rem 1.5rem;
  }

  .verification-title {
    font-size: 1.75rem;
  }

  .verification-icon {
    font-size: 3.5rem;
  }
}

@media (max-width: 480px) {
  .register-container {
    padding: 2rem 1.5rem;
    margin: 0.5rem;
  }

  .register-icon {
    font-size: 2.5rem;
  }

  .register-title {
    font-size: 1.75rem;
  }

  .trust-indicators {
    grid-template-columns: 1fr;
    gap: 0.5rem;
  }

  .code-inputs-grid {
    gap: 0.5rem;
    max-width: 280px;
  }

  .code-input {
    height: 3rem;
    font-size: 1.125rem;
  }

  .verification-form {
    padding: 1.5rem 1rem;
  }

  .verification-subtitle {
    font-size: 0.9rem;
  }
}

.grid {
  display: grid;
}

.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}

.gap-3 {
  gap: 0.75rem;
}

@media (min-width: 768px) {
  .md\:grid-cols-3 {
    grid-template-columns: repeat(3, minmax(0, 1fr));
  }
}

@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .floating-sparkle,
  .register-icon,
  .icon-sparkle,
  .icon-secondary {
    animation: none !important;
  }

  .register-container,
  .form-section {
    animation: none;
  }

  .error-message {
    animation: none;
  }
}

button:focus-visible,
input:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

.sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border: 0;
}

.hidden {
  display: none !important;
}

.code-inputs-grid {
  animation: code-inputs-appear 0.4s ease-out;
}

@keyframes code-inputs-appear {
  0% {
    opacity: 0;
    transform: translateY(20px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.code-input {
  &:first-child {
    animation: first-input-pulse 2s ease-in-out infinite;

    &:focus {
      animation: none;
    }
  }

  &.filled {
    transform: scale(1.02);
    box-shadow: 0 0 15px rgba(50, 205, 50, 0.3),
      inset 0 0 10px rgba(50, 205, 50, 0.1);
  }

  &:focus {
    transform: scale(1.05);
    z-index: 10;
    box-shadow: 0 0 25px rgba(180, 162, 253, 0.5),
      0 0 0 3px rgba(180, 162, 253, 0.2);
  }
}

@keyframes first-input-pulse {
  0%,
  100% {
    box-shadow: 0 0 15px rgba(180, 162, 253, 0.3),
      inset 0 0 5px rgba(180, 162, 253, 0.1);
  }
  50% {
    box-shadow: 0 0 25px rgba(180, 162, 253, 0.6),
      inset 0 0 10px rgba(180, 162, 253, 0.2);
  }
}

.code-input-hint {
  display: flex;
  align-items: center;
  justify-content: center;
  font-size: 0.8rem;
  color: var(--primary-color);
  opacity: 0.7;
  margin-top: 1rem;
  padding: 0.75rem;
  background: rgba(180, 162, 253, 0.05);
  border: 1px solid rgba(180, 162, 253, 0.1);
  border-radius: 0.5rem;
  animation: hint-appear 0.6s ease-out 0.5s both;
}

@keyframes hint-appear {
  0% {
    opacity: 0;
    transform: translateY(10px);
  }
  100% {
    opacity: 0.7;
    transform: translateY(0);
  }
}

.email-verification-section {
  animation: verification-section-appear 0.6s ease-out;
}

@keyframes verification-section-appear {
  0% {
    opacity: 0;
    transform: translateY(30px) scale(0.95);
  }
  100% {
    opacity: 1;
    transform: translateY(0) scale(1);
  }
}

.code-input:not(:placeholder-shown) {
  font-weight: 600;
  color: var(--success-color);
}

@keyframes progress-shine {
  0% {
    opacity: 0;
    transform: translateX(10px);
  }
  50% {
    opacity: 1;
    transform: translateX(0);
  }
  100% {
    opacity: 0;
    transform: translateX(-10px);
  }
}

@media (max-width: 480px) {
  .code-inputs-grid {
    gap: 0.4rem;
    max-width: 260px;
  }

  .code-input {
    height: 2.8rem;
    font-size: 1rem;
  }

  .code-input-hint {
    font-size: 0.75rem;
    padding: 0.5rem;
  }
}

.code-input {
  &[data-processing="true"] {
    pointer-events: none;
  }

  &[data-pasting="true"] {
    background: rgba(180, 162, 253, 0.1);
  }

  &[data-focusing="true"] {
    outline: 2px solid rgba(180, 162, 253, 0.3);
  }

  &::placeholder {
    color: transparent !important;
    user-select: none;
  }

  &:not(:focus) {
    user-select: none;
  }

  &:focus {
    user-select: all;
    caret-color: var(--primary-color);
  }

  @media (pointer: coarse) {
    touch-action: manipulation;
    -webkit-touch-callout: none;
    -webkit-user-select: none;
  }
}

.code-input.filled {
  transition: all 0.2s cubic-bezier(0.4, 0, 0.2, 1);

  &:not(:focus) {
    background: rgba(50, 205, 50, 0.08);
    border-color: rgba(50, 205, 50, 0.4);
    color: var(--success-color);
    font-weight: 600;
  }
}

.code-inputs-grid {
  will-change: contents;

  min-height: 4rem;
  display: grid;
  align-items: center;
}

.code-input {
  transform: translateZ(0);
  backface-visibility: hidden;
  perspective: 1000px;

  transition: transform 0.2s ease, box-shadow 0.2s ease, border-color 0.2s ease,
    background-color 0.2s ease;
}

.code-input.error {
  animation: input-error-shake 0.4s ease-in-out;
  border-color: var(--error-color) !important;
  background: rgba(255, 107, 107, 0.1) !important;
  box-shadow: 0 0 10px rgba(255, 107, 107, 0.3) !important;
}

@keyframes input-error-shake {
  0%,
  100% {
    transform: translateX(0) translateZ(0);
  }
  10%,
  30%,
  50%,
  70%,
  90% {
    transform: translateX(-2px) translateZ(0);
  }
  20%,
  40%,
  60%,
  80% {
    transform: translateX(2px) translateZ(0);
  }
}

@media (max-width: 480px) {
  .code-input {
    min-height: 3rem;
    font-size: 1.2rem;

    &:focus {
      transform: scale(1.02);
    }
  }

  .code-inputs-grid {
    min-height: 3rem;
  }
}

@keyframes mystical-star-pulse {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.6));
  }
  25% {
    transform: scale(1.05) rotate(45deg);
    filter: drop-shadow(0 0 25px rgba(180, 162, 253, 0.8));
  }
  50% {
    transform: scale(1.1) rotate(90deg);
    filter: drop-shadow(0 0 35px rgba(180, 162, 253, 1));
  }
  75% {
    transform: scale(1.05) rotate(135deg);
    filter: drop-shadow(0 0 25px rgba(180, 162, 253, 0.8));
  }
}

@keyframes professional-sparkle-trail {
  0% {
    opacity: 0;
    transform: translateX(-20px) scale(0);
  }
  50% {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateX(20px) scale(0);
  }
}

@keyframes zen-meditation-float {
  0%,
  100% {
    transform: translateY(0) scale(1);
    filter: drop-shadow(0 0 20px rgba(32, 178, 170, 0.5));
  }
  33% {
    transform: translateY(-8px) scale(1.02);
    filter: drop-shadow(0 0 30px rgba(32, 178, 170, 0.7));
  }
  66% {
    transform: translateY(-5px) scale(1.01);
    filter: drop-shadow(0 0 25px rgba(32, 178, 170, 0.6));
  }
}

@keyframes crystal-radio-rotate {
  0% {
    transform: rotateY(0deg) rotateX(0deg);
  }
  25% {
    transform: rotateY(90deg) rotateX(15deg);
  }
  50% {
    transform: rotateY(180deg) rotateX(0deg);
  }
  75% {
    transform: rotateY(270deg) rotateX(-15deg);
  }
  100% {
    transform: rotateY(360deg) rotateX(0deg);
  }
}

@keyframes balanced-energy-flow {
  0%,
  100% {
    transform: scale(1) rotate(0deg);
    opacity: 0.8;
  }
  25% {
    transform: scale(1.1) rotate(90deg);
    opacity: 1;
  }
  50% {
    transform: scale(1.2) rotate(180deg);
    opacity: 0.9;
  }
  75% {
    transform: scale(1.1) rotate(270deg);
    opacity: 1;
  }
}

@keyframes lightbulb-illuminate {
  0%,
  100% {
    filter: drop-shadow(0 0 8px rgba(218, 165, 32, 0.4));
    transform: scale(1);
  }
  50% {
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.8));
    transform: scale(1.1);
  }
}

@keyframes envelope-communication {
  0%,
  100% {
    transform: translateY(0) scale(1);
    filter: drop-shadow(0 0 20px rgba(65, 105, 225, 0.5));
  }
  25% {
    transform: translateY(-5px) scale(1.02);
    filter: drop-shadow(0 0 30px rgba(65, 105, 225, 0.7));
  }
  50% {
    transform: translateY(-8px) scale(1.05);
    filter: drop-shadow(0 0 40px rgba(65, 105, 225, 0.9));
  }
  75% {
    transform: translateY(-3px) scale(1.02);
    filter: drop-shadow(0 0 25px rgba(65, 105, 225, 0.6));
  }
}

@keyframes mystical-particle-float {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(0.8);
  }
  25% {
    opacity: 0.7;
    transform: translateY(-10px) translateX(5px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-15px) translateX(-3px) scale(1.2);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-8px) translateX(8px) scale(0.9);
  }
}

.mystical-starlife-wrapper {
  position: relative;
  display: inline-block;
  width: 4.5rem;
  height: 4.5rem;
  margin: 0 auto;
}

.mystical-starlife-icon {
  font-size: 3.5rem;
  background: var(--mystical-star-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: mystical-star-pulse 4s ease-in-out infinite;
  display: block;
  text-align: center;
  line-height: 1;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.6));
}

.starlife-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3rem;
  height: 3rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.starlife-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 5rem;
  height: 5rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.15) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite reverse;
  z-index: 0;
}

.starlife-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 2;
}

.starlife-particles .particle {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);
  animation: mystical-particle-float 6s ease-in-out infinite;
}

.particle-1 {
  top: 10%;
  left: 80%;
  animation-delay: 0s;
}

.particle-2 {
  top: 80%;
  left: 20%;
  animation-delay: 1.5s;
}

.particle-3 {
  top: 20%;
  left: 15%;
  animation-delay: 3s;
}

.particle-4 {
  top: 75%;
  left: 85%;
  animation-delay: 4.5s;
}

.icon-sparkle-professional {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  z-index: 4;
}

.sparkle-secondary {
  font-size: 1.5rem;
  color: #ffd700;
  animation: professional-sparkle 3s ease-in-out infinite;
  filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.6));
}

.sparkle-trail {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 2px;
  background: rgba(255, 215, 0, 0.7);
  border-radius: 50%;
  animation: professional-sparkle-trail 2s ease-in-out infinite;
}

.sparkle-trail-1 {
  animation-delay: 0.5s;
  transform: translate(-50%, -50%) rotate(45deg);
}

.sparkle-trail-2 {
  animation-delay: 1s;
  transform: translate(-50%, -50%) rotate(-45deg);
}

.icon-secondary-professional {
  position: absolute;
  bottom: -0.25rem;
  left: -0.25rem;
  z-index: 3;
}

.mystical-gem-mini {
  position: relative;
  display: inline-block;
}

.gem-mini-icon {
  font-size: 1.25rem;
  background: var(--mystical-gem-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: gentle-pulse 4s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(147, 112, 219, 0.5));
}

.gem-mini-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(147, 112, 219, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 5s ease-in-out infinite;
}

.radio-icon-professional {
  font-size: 2rem;
  margin-right: 1rem;
  opacity: 1;
  flex-shrink: 0;
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.spiritual-seeker .zen-meditation-wrapper {
  position: relative;
  display: inline-block;
  width: 3rem;
  height: 3rem;
}

.zen-icon {
  font-size: 2rem;
  background: var(--mystical-zen-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: zen-meditation-float 5s ease-in-out infinite;
  position: relative;
  z-index: 3;
  display: block;
  text-align: center;
}

.zen-inner-peace {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 2rem;
  height: 2rem;
  background: radial-gradient(
    circle,
    rgba(32, 178, 170, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
  z-index: 1;
}

.zen-aura-ring {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(32, 178, 170, 0.3);
  border-radius: 50%;
  animation: gentle-pulse 6s ease-in-out infinite;
}

.ring-1 {
  width: 2.5rem;
  height: 2.5rem;
  animation-delay: 0s;
}

.ring-2 {
  width: 3.5rem;
  height: 3.5rem;
  animation-delay: 2s;
}

.zen-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 2;
}

.zen-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(32, 178, 170, 0.6);
  border-radius: 50%;
  animation: mystical-particle-float 8s ease-in-out infinite;
}

.zen-p-1 {
  top: 15%;
  left: 70%;
  animation-delay: 0s;
}

.zen-p-2 {
  top: 70%;
  left: 25%;
  animation-delay: 2.7s;
}

.zen-p-3 {
  top: 30%;
  left: 80%;
  animation-delay: 5.4s;
}

.esoteric-practitioner .mystical-crystal-wrapper-radio {
  position: relative;
  display: inline-block;
  width: 3rem;
  height: 3rem;
  perspective: 1000px;
}

.crystal-radio-icon {
  font-size: 2rem;
  background: var(--mystical-gem-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: crystal-radio-rotate 8s linear infinite;
  position: relative;
  z-index: 3;
  display: block;
  text-align: center;
  filter: drop-shadow(0 0 15px rgba(147, 112, 219, 0.6));
}

.crystal-radio-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 2rem;
  height: 2rem;
  background: radial-gradient(
    circle,
    rgba(147, 112, 219, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.crystal-radio-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3.5rem;
  height: 3.5rem;
  background: radial-gradient(
    circle,
    rgba(147, 112, 219, 0.15) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite reverse;
  z-index: 0;
}

.crystal-radio-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 2;
}

.crystal-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(147, 112, 219, 0.7);
  border-radius: 50%;
  animation: mystical-particle-float 6s ease-in-out infinite;
}

.c-p-1 {
  top: 20%;
  left: 75%;
  animation-delay: 0s;
}

.c-p-2 {
  top: 75%;
  left: 20%;
  animation-delay: 2s;
}

.c-p-3 {
  top: 40%;
  left: 85%;
  animation-delay: 4s;
}

.balanced-seeker .balanced-star-wrapper {
  position: relative;
  display: inline-block;
  width: 3rem;
  height: 3rem;
}

.balanced-star-icon {
  font-size: 2rem;
  background: var(--mystical-star-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: balanced-energy-flow 6s ease-in-out infinite;
  position: relative;
  z-index: 3;
  display: block;
  text-align: center;
  filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.5));
}

.balanced-inner-light {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 2rem;
  height: 2rem;
  background: radial-gradient(
    circle,
    rgba(212, 175, 55, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3.5s ease-in-out infinite;
  z-index: 1;
}

.balanced-energy-rings {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  z-index: 2;
}

.energy-ring {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(212, 175, 55, 0.4);
  border-radius: 50%;
  animation: gentle-pulse 5s ease-in-out infinite;
}

.e-ring-1 {
  width: 2.5rem;
  height: 2.5rem;
  animation-delay: 0s;
}

.e-ring-2 {
  width: 3.2rem;
  height: 3.2rem;
  animation-delay: 1.5s;
}

.balanced-sparkles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.balanced-sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(255, 215, 0, 0.8);
  border-radius: 50%;
  animation: mystical-particle-float 5s ease-in-out infinite;
}

.b-s-1 {
  top: 10%;
  left: 50%;
  animation-delay: 0s;
}

.b-s-2 {
  top: 50%;
  left: 90%;
  animation-delay: 1.25s;
}

.b-s-3 {
  top: 90%;
  left: 50%;
  animation-delay: 2.5s;
}

.b-s-4 {
  top: 50%;
  left: 10%;
  animation-delay: 3.75s;
}

.hint-lightbulb-wrapper {
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
  position: relative;
}

.hint-bulb-icon {
  font-size: 1rem;
  background: var(--mystical-bulb-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: lightbulb-illuminate 3s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(218, 165, 32, 0.4));
}

.bulb-glow-hint {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 215, 0, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2.5s ease-in-out infinite;
}

.bulb-spark-hint {
  position: absolute;
  top: -2px;
  right: -2px;
  width: 3px;
  height: 3px;
  background: rgba(255, 215, 0, 0.8);
  border-radius: 50%;
  animation: professional-sparkle 2s ease-in-out infinite;
}

.hint-lightbulb-wrapper-small {
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
  position: relative;
}

.hint-bulb-icon-small {
  font-size: 0.875rem;
  background: var(--mystical-bulb-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: lightbulb-illuminate 4s ease-in-out infinite;
  filter: drop-shadow(0 0 6px rgba(218, 165, 32, 0.3));
}

.bulb-glow-hint-small {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.2rem;
  height: 1.2rem;
  background: radial-gradient(
    circle,
    rgba(255, 215, 0, 0.15) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
}

.mystical-envelope-wrapper {
  position: relative;
  display: inline-block;
  width: 5rem;
  height: 5rem;
  margin: 0 auto;
}

.mystical-envelope-icon {
  font-size: 4rem;
  background: var(--mystical-envelope-color);
  -webkit-background-clip: text;
  background-clip: text;
  color: transparent;
  animation: envelope-communication 4s ease-in-out infinite;
  display: block;
  text-align: center;
  line-height: 1;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 25px rgba(65, 105, 225, 0.6));
}

.envelope-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3.5rem;
  height: 3.5rem;
  background: radial-gradient(
    circle,
    rgba(65, 105, 225, 0.25) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.envelope-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 5.5rem;
  height: 5.5rem;
  background: radial-gradient(
    circle,
    rgba(65, 105, 225, 0.12) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4.5s ease-in-out infinite reverse;
  z-index: 0;
}

.envelope-energy-waves {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  z-index: 2;
}

.energy-wave {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  border: 1px solid rgba(65, 105, 225, 0.3);
  border-radius: 50%;
  animation: gentle-pulse 6s ease-in-out infinite;
}

.wave-1 {
  width: 4rem;
  height: 4rem;
  animation-delay: 0s;
}

.wave-2 {
  width: 5rem;
  height: 5rem;
  animation-delay: 2s;
}

.wave-3 {
  width: 6rem;
  height: 6rem;
  animation-delay: 4s;
}

.envelope-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 4;
}

.env-particle {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(65, 105, 225, 0.7);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(65, 105, 225, 0.5);
  animation: mystical-particle-float 7s ease-in-out infinite;
}

.env-p-1 {
  top: 15%;
  left: 75%;
  animation-delay: 0s;
}

.env-p-2 {
  top: 75%;
  left: 25%;
  animation-delay: 1.75s;
}

.env-p-3 {
  top: 25%;
  left: 20%;
  animation-delay: 3.5s;
}

.env-p-4 {
  top: 80%;
  left: 80%;
  animation-delay: 5.25s;
}

.verification-sparkle-professional {
  position: absolute;
  top: -0.75rem;
  right: -0.75rem;
  z-index: 5;
}

.verification-sparkle-icon {
  font-size: 1.5rem;
  color: #87ceeb;
  animation: professional-sparkle 3.5s ease-in-out infinite;
  filter: drop-shadow(0 0 12px rgba(135, 206, 235, 0.6));
}

.verification-sparkle-trail {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 2px;
  background: rgba(135, 206, 235, 0.8);
  border-radius: 50%;
  animation: professional-sparkle-trail 2.5s ease-in-out infinite;
}

.v-trail-1 {
  animation-delay: 0.7s;
  transform: translate(-50%, -50%) rotate(60deg);
}

.v-trail-2 {
  animation-delay: 1.4s;
  transform: translate(-50%, -50%) rotate(-60deg);
}

.mystical-submit-enhanced {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    transition: left 0.6s ease;
  }

  &:not(:disabled):hover::before {
    left: 100%;
  }
}

.btn-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
}

.btn-star-icon {
  font-size: 1rem;
  color: var(--secondary-color);
  animation: gentle-pulse 3s ease-in-out infinite;
  position: relative;
  z-index: 2;
}

.btn-star-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2s ease-in-out infinite;
  z-index: 1;
}

.btn-arrow-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-left: 0.5rem;
}

.btn-arrow-icon {
  font-size: 1rem;
  color: var(--secondary-color);
  transition: transform 0.3s ease;
  position: relative;
  z-index: 2;
}

.mystical-submit-enhanced:not(:disabled):hover .btn-arrow-icon {
  transform: translateX(4px);
}

.arrow-trail {
  position: absolute;
  top: 50%;
  left: -10px;
  width: 20px;
  height: 2px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(255, 255, 255, 0.5),
    transparent
  );
  animation: shimmer 2s ease-in-out infinite;
  opacity: 0;
  z-index: 1;
}

.mystical-submit-enhanced:not(:disabled):hover .arrow-trail {
  opacity: 1;
}

.mystical-spinner {
  position: relative;
  width: 1.5rem;
  height: 1.5rem;
  margin-right: 0.75rem;
}

.spinner-inner {
  width: 100%;
  height: 100%;
  border: 3px solid rgba(16, 8, 32, 0.3);
  border-top: 3px solid var(--secondary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.spinner-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.spinner-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(255, 255, 255, 0.8);
  border-radius: 50%;
  animation: mystical-particle-float 2s ease-in-out infinite;
}

.sp-1 {
  top: 10%;
  left: 50%;
  animation-delay: 0s;
}

.sp-2 {
  top: 50%;
  left: 90%;
  animation-delay: 0.67s;
}

.sp-3 {
  top: 90%;
  left: 50%;
  animation-delay: 1.33s;
}

.mystical-verify-btn {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.2),
      transparent
    );
    transition: left 0.6s ease;
  }

  &:not(:disabled):hover::before {
    left: 100%;
  }
}

.verify-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
}

.verify-shield-icon {
  font-size: 1rem;
  color: white;
  animation: gentle-pulse 2.5s ease-in-out infinite;
  position: relative;
  z-index: 2;
}

.verify-shield-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.15) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 2s ease-in-out infinite;
  z-index: 1;
}

.mystical-verify-spinner {
  position: relative;
  width: 1.5rem;
  height: 1.5rem;
  margin-bottom: 0.5rem;
}

.verify-spinner-inner {
  width: 100%;
  height: 100%;
  border: 3px solid rgba(255, 255, 255, 0.3);
  border-top: 3px solid white;
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.verify-spinner-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
}

.verify-spinner-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 50%;
  animation: mystical-particle-float 1.5s ease-in-out infinite;
}

.vsp-1 {
  top: 15%;
  left: 50%;
  animation-delay: 0s;
}

.vsp-2 {
  top: 50%;
  left: 85%;
  animation-delay: 0.5s;
}

.vsp-3 {
  top: 85%;
  left: 50%;
  animation-delay: 1s;
}

.mystical-resend-btn {
  transition: all 0.3s ease;

  &:not(:disabled):hover {
    transform: translateY(-1px);
    box-shadow: 0 6px 20px rgba(180, 162, 253, 0.3);
  }
}

.resend-icon-wrapper {
  position: relative;
  display: inline-flex;
  align-items: center;
  margin-right: 0.5rem;
}

.resend-plane-icon {
  font-size: 0.875rem;
  color: var(--primary-color);
  transition: transform 0.3s ease;
  position: relative;
  z-index: 2;
}

.mystical-resend-btn:not(:disabled):hover .resend-plane-icon {
  transform: translateX(3px) rotate(15deg);
}

.resend-plane-trail {
  position: absolute;
  top: 50%;
  left: -8px;
  width: 15px;
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.5),
    transparent
  );
  animation: shimmer 2s ease-in-out infinite;
  opacity: 0;
  z-index: 1;
}

.mystical-resend-btn:not(:disabled):hover .resend-plane-trail {
  opacity: 1;
}

.resend-spinner {
  width: 1rem;
  height: 1rem;
  margin-right: 0.5rem;
}

.resend-spinner-inner {
  width: 100%;
  height: 100%;
  border: 2px solid rgba(180, 162, 253, 0.3);
  border-top: 2px solid var(--primary-color);
  border-radius: 50%;
  animation: spin 1s linear infinite;
}

.label-icon {
  color: #b4a2fd;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

  &.fas.fa-user {
    color: #32cd32;
  }

  &.fas.fa-envelope {
    color: #20b2aa;
  }

  &.fas.fa-lock {
    color: #daa520;
  }

  &.fas.fa-calendar-alt {
    color: #ff69b4;
  }

  &.fas.fa-heart {
    color: #ff6b6b;
  }
}

.section-icon {
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

  &.fas.fa-user-circle {
    color: #32cd32;
  }

  &.fas.fa-star {
    color: #daa520;
  }

  &.fas.fa-shield-alt {
    color: #9370db;
  }

  &.fas.fa-handshake {
    color: #20b2aa;
  }
}

.verification-title-section {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.75rem;
  margin-bottom: 1rem;

  .section-icon {
    color: #32cd32;
    font-size: 1.5rem;
  }

  .verification-title {
    margin: 0;
  }
}

.verification-subtitle-section {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 1rem;

  .section-icon {
    color: #daa520;
    font-size: 1.2rem;
  }

  .verification-subtitle {
    margin: 0;
    text-align: center;

    strong {
      color: #daa520;
    }
  }

  .email-highlight {
    display: flex;
    align-items: center;
    justify-content: center;
    gap: 0.5rem;

    .label-icon {
      color: #20b2aa;
    }
  }
}

.verification-instruction-section {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1.5rem;

  .section-icon {
    color: #b4a2fd;
    font-size: 1rem;
  }

  .verification-instruction {
    margin: 0;
  }
}

.resend-text-section {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 0.5rem;
  margin-bottom: 1rem;

  .section-icon {
    color: #ff69b4;
    font-size: 0.9rem;
  }

  .resend-text {
    margin: 0;
  }
}

.verification-title-section:hover .section-icon,
.verification-subtitle-section:hover .section-icon,
.verification-instruction-section:hover .section-icon,
.resend-text-section:hover .section-icon {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

.verification-form.loading {
  .section-icon {
    animation: gentle-pulse 2s ease-in-out infinite;
  }
}

.register-form.loading {
  .label-icon,
  .section-icon {
    animation: gentle-pulse 2s ease-in-out infinite;
  }
}

.btn-icon {
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));
}

.verify-shield-icon {
  color: #32cd32;
  filter: drop-shadow(0 0 6px rgba(50, 205, 50, 0.5));
}

.resend-plane-icon {
  color: #20b2aa;
  filter: drop-shadow(0 0 4px rgba(32, 178, 170, 0.4));
}

.trust-indicators {
  .trust-item i {
    transition: all 0.3s ease;
    filter: drop-shadow(0 0 4px rgba(180, 162, 253, 0.4));

    &.fas.fa-shield-alt {
      color: #32cd32;
    }

    &.fa-solid.fa-wand-magic-sparkles {
      color: #9370db;
    }

    &.fas.fa-times-circle {
      color: #ff6b6b;
    }

    &.fas.fa-users {
      color: #20b2aa;
    }
  }

  .trust-item:hover i {
    transform: scale(1.2);
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
  }
}

.form-group:hover .label-icon {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

.form-section:hover .section-icon {
  transform: scale(1.1);
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.6));
}

@media (max-width: 768px) {
  .mystical-starlife-wrapper {
    width: 4rem;
    height: 4rem;
  }

  .mystical-starlife-icon {
    font-size: 3rem;
  }

  .mystical-envelope-wrapper {
    width: 4.5rem;
    height: 4.5rem;
  }

  .mystical-envelope-icon {
    font-size: 3.5rem;
  }

  .radio-icon-professional .zen-meditation-wrapper,
  .radio-icon-professional .mystical-crystal-wrapper-radio,
  .radio-icon-professional .balanced-star-wrapper {
    width: 2.5rem;
    height: 2.5rem;
  }

  .zen-icon,
  .crystal-radio-icon,
  .balanced-star-icon {
    font-size: 1.75rem;
  }
}

@media (max-width: 480px) {
  .mystical-starlife-wrapper {
    width: 3.5rem;
    height: 3.5rem;
  }

  .mystical-starlife-icon {
    font-size: 2.5rem;
  }

  .mystical-envelope-wrapper {
    width: 4rem;
    height: 4rem;
  }

  .mystical-envelope-icon {
    font-size: 3rem;
  }
}

@media (prefers-reduced-motion: reduce) {
  .mystical-starlife-icon,
  .zen-icon,
  .crystal-radio-icon,
  .balanced-star-icon,
  .hint-bulb-icon,
  .mystical-envelope-icon,
  .sparkle-secondary,
  .verification-sparkle-icon,
  .btn-star-icon,
  .verify-shield-icon,
  .resend-plane-icon {
    animation: none !important;
  }

  .starlife-inner-glow,
  .starlife-outer-glow,
  .zen-inner-peace,
  .crystal-radio-inner-glow,
  .crystal-radio-outer-glow,
  .balanced-inner-light,
  .envelope-inner-glow,
  .envelope-outer-glow,
  .btn-star-glow,
  .verify-shield-glow,
  .bulb-glow-hint,
  .bulb-glow-hint-small {
    animation: none !important;
  }

  .starlife-particles .particle,
  .zen-particles .zen-particle,
  .crystal-radio-particles .crystal-particle,
  .balanced-sparkles .balanced-sparkle,
  .envelope-particles .env-particle,
  .spinner-particles .spinner-particle,
  .verify-spinner-particles .verify-spinner-particle {
    animation: none !important;
    opacity: 0.3 !important;
  }

  .sparkle-trail,
  .verification-sparkle-trail,
  .arrow-trail,
  .resend-plane-trail {
    display: none !important;
  }
}

@media (prefers-contrast: high) {
  .mystical-starlife-icon,
  .zen-icon,
  .crystal-radio-icon,
  .balanced-star-icon,
  .hint-bulb-icon,
  .mystical-envelope-icon {
    color: #ffffff !important;
    background: none !important;
    -webkit-background-clip: initial !important;
    background-clip: initial !important;
    filter: none !important;
  }

  .sparkle-secondary,
  .verification-sparkle-icon {
    color: #ffff00 !important;
    filter: none !important;
  }

  .starlife-inner-glow,
  .starlife-outer-glow,
  .zen-inner-peace,
  .crystal-radio-inner-glow,
  .crystal-radio-outer-glow,
  .balanced-inner-light,
  .envelope-inner-glow,
  .envelope-outer-glow,
  .btn-star-glow,
  .verify-shield-glow,
  .bulb-glow-hint,
  .bulb-glow-hint-small {
    display: none !important;
  }
}



================================================
File: app/features/auth/pages/register/register.component.ts
================================================
import {
  Component,
  signal,
  OnInit,
  Inject,
  PLATFORM_ID,
  ViewChildren,
  QueryList,
  ElementRef,
  AfterViewInit,
  ChangeDetectorRef,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router, ActivatedRoute } from '@angular/router';
import {
  trigger,
  state,
  style,
  transition,
  animate,
} from '@angular/animations';
import {
  RegisterCredentials,
  ValidationError,
  RegisterResponse,
  Disciplina,
  SignoZodiacal,
} from '../../../../core/models/userInterface';
import { Subject, takeUntil } from 'rxjs';

@Component({
  selector: 'app-register',
  imports: [CommonModule, FormsModule],
  templateUrl: './register.component.html',
  styleUrl: './register.component.scss',
  animations: [
    trigger('fadeInUp', [
      transition(':enter', [
        style({ opacity: 0, transform: 'translateY(30px) scale(0.95)' }),
        animate(
          '0.8s cubic-bezier(0.4, 0, 0.2, 1)',
          style({ opacity: 1, transform: 'translateY(0) scale(1)' })
        ),
      ]),
    ]),
  ],
})
export class RegisterComponent {
  private isBrowser: boolean;
  private destroy$ = new Subject<void>();
  @ViewChildren('codeInput') codeInputs!: QueryList<
    ElementRef<HTMLInputElement>
  >;

  // Estado del formulario
  credentials = signal<RegisterCredentials>({
    nombre: '',
    apellido: '',
    email: '',
    password: '',
    confirmPassword: '',
    tipoPerfil: '',
    disciplinasInteres: [],
    fechaNacimiento: '',
    acceptTerms: false,
    acceptMarketing: false,
  });

  // Estados de UI
  isLoading = signal<boolean>(false);
  isSubmitted = signal<boolean>(false);
  showPassword = signal<boolean>(false);
  showConfirmPassword = signal<boolean>(false);

  // Estados de verificación de email
  showEmailVerification = signal<boolean>(false);
  verificationCode = signal<string[]>(['', '', '', '', '', '']);
  filledDigitsCount = signal<number>(0);
  isVerifying = signal<boolean>(false);
  isResending = signal<boolean>(false);
  verificationError = signal<string>('');
  verificationSuccess = signal<boolean>(false);
  resendCooldown = signal<number>(0);
  private resendTimer?: number;

  // Estados de validación
  formTouched = signal<{ [key: string]: boolean }>({});
  formErrors = signal<{ [key: string]: string }>({});

  // 🆕 Estados para tracking de iconos profesionales
  iconInteractions = signal<{ [key: string]: number }>({
    starlife_main: 0,
    zen_spiritual: 0,
    crystal_esoteric: 0,
    balanced_both: 0,
    lightbulb_hints: 0,
    envelope_verification: 0,
  });

  // Disciplinas y signos zodiacales
  disciplinas: Disciplina[] = [
    {
      id: 'tarot',
      name: 'Tarot',
      icon: '🔮',
      description: 'Lectura de cartas',
    },
    {
      id: 'astrologia',
      name: 'Astrología',
      icon: '⭐',
      description: 'Influencia astral',
    },
    {
      id: 'numerologia',
      name: 'Numerología',
      icon: '🔢',
      description: 'Poder de números',
    },
    {
      id: 'runas',
      name: 'Runas',
      icon: '🪨',
      description: 'Símbolos antiguos',
    },
    {
      id: 'cristales',
      name: 'Cristales',
      icon: '💎',
      description: 'Energía mineral',
    },
    {
      id: 'meditacion',
      name: 'Meditación',
      icon: '🧘',
      description: 'Paz interior',
    },
    {
      id: 'chakras',
      name: 'Chakras',
      icon: '🌈',
      description: 'Centros energéticos',
    },
    {
      id: 'reiki',
      name: 'Reiki',
      icon: '✋',
      description: 'Sanación energética',
    },
    {
      id: 'adivinacion',
      name: 'Adivinación',
      icon: '🔭',
      description: 'Predicción',
    },
    {
      id: 'brujeria',
      name: 'Brujería',
      icon: '🌙',
      description: 'Artes mágicas',
    },
  ];

  signosZodiacales: { [key: string]: SignoZodiacal } = {
    aries: {
      name: 'Aries',
      icon: '♈',
      dates: [
        [3, 21],
        [4, 19],
      ],
    },
    tauro: {
      name: 'Tauro',
      icon: '♉',
      dates: [
        [4, 20],
        [5, 20],
      ],
    },
    geminis: {
      name: 'Géminis',
      icon: '♊',
      dates: [
        [5, 21],
        [6, 20],
      ],
    },
    cancer: {
      name: 'Cáncer',
      icon: '♋',
      dates: [
        [6, 21],
        [7, 22],
      ],
    },
    leo: {
      name: 'Leo',
      icon: '♌',
      dates: [
        [7, 23],
        [8, 22],
      ],
    },
    virgo: {
      name: 'Virgo',
      icon: '♍',
      dates: [
        [8, 23],
        [9, 22],
      ],
    },
    libra: {
      name: 'Libra',
      icon: '♎',
      dates: [
        [9, 23],
        [10, 22],
      ],
    },
    escorpio: {
      name: 'Escorpio',
      icon: '♏',
      dates: [
        [10, 23],
        [11, 21],
      ],
    },
    sagitario: {
      name: 'Sagitario',
      icon: '♐',
      dates: [
        [11, 22],
        [12, 21],
      ],
    },
    capricornio: {
      name: 'Capricornio',
      icon: '♑',
      dates: [
        [12, 22],
        [1, 19],
      ],
    },
    acuario: {
      name: 'Acuario',
      icon: '♒',
      dates: [
        [1, 20],
        [2, 18],
      ],
    },
    piscis: {
      name: 'Piscis',
      icon: '♓',
      dates: [
        [2, 19],
        [3, 20],
      ],
    },
  };

  // Estados computados
  passwordStrength = signal<{
    level: 'weak' | 'medium' | 'strong';
    percentage: number;
    feedback: string[];
  }>({
    level: 'weak',
    percentage: 0,
    feedback: [],
  });

  calculatedZodiacSign = signal<{ name: string; icon: string } | null>(null);
  selectedDisciplinesCount = signal<number>(0);

  constructor(
    private router: Router,
    private route: ActivatedRoute,
    private cdr: ChangeDetectorRef,
    @Inject(PLATFORM_ID) platformId: Object
    // private authService: AuthService, // Inyectar cuando esté disponible
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  ngOnInit(): void {
    this.initializeComponent();
    this.setupRouteParams();
    this.trackPageView();

    // Asegurar que el contador de disciplinas esté sincronizado
    this.selectedDisciplinesCount.set(
      this.credentials().disciplinasInteres.length
    );

    // 🆕 Inicializar tracking de iconos profesionales
    this.initializeProfessionalIconTracking();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
    this.clearResendTimer();
  }

  // ============ 🆕 MÉTODOS PARA ICONOS PROFESIONALES ============

  private initializeProfessionalIconTracking(): void {
    if (!this.isBrowser) return;

    // Track cuando se muestran los iconos profesionales (solo una vez)
    this.trackUserInteraction('professional_icons_loaded', {
      icons: [
        'star-of-life_main',
        'spa_zen_spiritual',
        'gem_crystal_esoteric',
        'star-of-life_balanced',
        'lightbulb_hints',
        'envelope_verification',
      ],
      timestamp: new Date().toISOString(),
    });
  }

  private onIconInteraction(iconType: string): void {
    // Incrementar contador de interacciones
    const current = this.iconInteractions();
    current[iconType] = (current[iconType] || 0) + 1;
    this.iconInteractions.set({ ...current });

    // Track la interacción
    this.trackUserInteraction('professional_icon_interaction', {
      iconType,
      interactions: current[iconType],
      timestamp: new Date().toISOString(),
    });

    // Log para debugging
    console.log(`🎨 Interacción con icono profesional: ${iconType}`, current);
  }

  // 🆕 Método para debugging de iconos profesionales
  debugProfessionalIcons(): void {
    if (!this.isBrowser) return;

    const iconElements = {
      mainStarLife: document.querySelector(
        '.mystical-starlife-icon'
      ) as HTMLElement,
      zen: document.querySelector('.zen-icon') as HTMLElement,
      crystal: document.querySelector('.crystal-radio-icon') as HTMLElement,
      balanced: document.querySelector('.balanced-star-icon') as HTMLElement,
      hints: document.querySelectorAll(
        '.hint-bulb-icon, .hint-bulb-icon-small'
      ),
      envelope: document.querySelector(
        '.mystical-envelope-icon'
      ) as HTMLElement,
      sparkles: document.querySelectorAll(
        '.sparkle-secondary, .verification-sparkle-icon'
      ),
    };

    console.log('🔍 Debug de Iconos Profesionales:', {
      elements: iconElements,
      interactions: this.iconInteractions(),
      styles: {
        mainIcon: iconElements.mainStarLife
          ? getComputedStyle(iconElements.mainStarLife)
          : null,
        zenIcon: iconElements.zen ? getComputedStyle(iconElements.zen) : null,
      },
      animations: {
        mainIcon: iconElements.mainStarLife?.style?.animation || 'none',
        zen: iconElements.zen?.style?.animation || 'none',
        crystal: iconElements.crystal?.style?.animation || 'none',
        balanced: iconElements.balanced?.style?.animation || 'none',
        envelope: iconElements.envelope?.style?.animation || 'none',
      },
      computed_styles: {
        mainIcon: iconElements.mainStarLife
          ? getComputedStyle(iconElements.mainStarLife).animation
          : 'none',
        zen: iconElements.zen
          ? getComputedStyle(iconElements.zen).animation
          : 'none',
      },
    });
  }

  // 🆕 Método para verificar si los iconos están renderizados correctamente
  validateProfessionalIcons(): boolean {
    if (!this.isBrowser) return false;

    const requiredIcons = [
      '.mystical-starlife-icon',
      '.zen-icon',
      '.crystal-radio-icon',
      '.balanced-star-icon',
      '.hint-bulb-icon',
      '.mystical-envelope-icon',
    ];

    const missingIcons: string[] = [];

    requiredIcons.forEach((selector) => {
      const element = document.querySelector(selector);
      if (!element) {
        missingIcons.push(selector);
      }
    });

    if (missingIcons.length > 0) {
      console.warn('⚠️ Iconos profesionales faltantes:', missingIcons);
      // 🔥 REMOVIDO: No llamar trackUserInteraction aquí para evitar loop infinito
    }

    return missingIcons.length === 0;
  }

  // ============ INICIALIZACIÓN ============

  private initializeComponent(): void {
    // Pre-llenar email si viene de query params
    const email = this.route.snapshot.queryParams['email'];
    if (email) {
      this.credentials.update((cred) => ({ ...cred, email }));
    }

    // Inicializar estado de errores
    this.clearAllErrors();
  }

  private setupRouteParams(): void {
    // Tracking de origen
    const source = this.route.snapshot.queryParams['source'];
    if (source) {
      this.trackUserInteraction('register_page_view', { source });
    }
  }

  private trackPageView(): void {
    this.trackUserInteraction('register_page_view', {
      timestamp: new Date().toISOString(),
      // 🆕 Incluir información sobre iconos profesionales
      professional_icons_enabled: true,
      icon_system_version: '2.0_professional',
    });
  }

  // ============ VALIDACIONES ============

  private validateField(fieldName: keyof RegisterCredentials): string {
    const creds = this.credentials();

    switch (fieldName) {
      case 'nombre':
        if (!creds.nombre.trim()) return 'El nombre es requerido';
        if (creds.nombre.trim().length < 2)
          return 'El nombre debe tener al menos 2 caracteres';
        return '';

      case 'apellido':
        if (!creds.apellido.trim()) return 'El apellido es requerido';
        if (creds.apellido.trim().length < 2)
          return 'El apellido debe tener al menos 2 caracteres';
        return '';

      case 'email':
        if (!creds.email.trim()) return 'El email es requerido';
        if (!this.isValidEmail(creds.email)) return 'Ingresa un email válido';
        return '';

      case 'password':
        if (!creds.password) return 'La contraseña es requerida';
        if (creds.password.length < 6)
          return 'La contraseña debe tener al menos 6 caracteres';
        return '';

      case 'confirmPassword':
        if (!creds.confirmPassword) return 'Confirma tu contraseña';
        if (creds.confirmPassword !== creds.password)
          return 'Las contraseñas no coinciden';
        return '';

      case 'tipoPerfil':
        if (!creds.tipoPerfil) return 'Selecciona un tipo de perfil';
        return '';

      case 'acceptTerms':
        if (!creds.acceptTerms)
          return 'Debes aceptar los términos y condiciones';
        return '';

      default:
        return '';
    }
  }

  private isValidEmail(email: string): boolean {
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    return emailRegex.test(email);
  }

  // ============ PASSWORD STRENGTH CALCULATION - CORREGIDO ============
  private calculatePasswordStrength(password: string): void {
    console.log('🔍 Calculando fortaleza para:', password);

    if (!password) {
      this.passwordStrength.set({ level: 'weak', percentage: 0, feedback: [] });
      console.log('❌ Contraseña vacía, percentage: 0');
      return;
    }

    let strength = 0;
    const feedback: string[] = [];

    // Criterios de fortaleza
    if (password.length >= 8) {
      strength += 25;
      console.log('✅ +25 por longitud >= 8');
    } else {
      feedback.push('mínimo 8 caracteres');
      console.log('❌ Falta longitud mínima');
    }

    if (/[A-Z]/.test(password)) {
      strength += 25;
      console.log('✅ +25 por mayúscula');
    } else {
      feedback.push('una mayúscula');
      console.log('❌ Falta mayúscula');
    }

    if (/[a-z]/.test(password)) {
      strength += 25;
      console.log('✅ +25 por minúscula');
    } else {
      feedback.push('una minúscula');
      console.log('❌ Falta minúscula');
    }

    if (/[\d\W]/.test(password)) {
      strength += 25;
      console.log('✅ +25 por número/símbolo');
    } else {
      feedback.push('un número o símbolo');
      console.log('❌ Falta número/símbolo');
    }

    let level: 'weak' | 'medium' | 'strong' = 'weak';
    if (strength >= 75) level = 'strong';
    else if (strength >= 50) level = 'medium';

    console.log('🎯 Resultado final - Level:', level, 'Percentage:', strength);

    this.passwordStrength.set({ level, percentage: strength, feedback });
  }

  private calculateZodiacSign(birthDate: string): void {
    if (!birthDate) {
      this.calculatedZodiacSign.set(null);
      return;
    }

    const date = new Date(birthDate);
    const month = date.getMonth() + 1;
    const day = date.getDate();

    for (const [sign, data] of Object.entries(this.signosZodiacales)) {
      const [[startMonth, startDay], [endMonth, endDay]] = data.dates;

      if (
        (month === startMonth && day >= startDay) ||
        (month === endMonth && day <= endDay)
      ) {
        this.calculatedZodiacSign.set({ name: data.name, icon: data.icon });
        this.credentials.update((cred) => ({ ...cred, signoZodiacal: sign }));
        return;
      }
    }

    this.calculatedZodiacSign.set(null);
  }

  // ============ EVENT HANDLERS - CORREGIDOS ============

  onFieldChange(fieldName: keyof RegisterCredentials, value: any): void {
    // Asegurar que el valor no sea null o undefined
    const safeValue = value ?? '';

    console.log('🔄 Campo cambiado:', fieldName, '→', safeValue);

    this.credentials.update((cred) => ({ ...cred, [fieldName]: safeValue }));

    // Validaciones específicas
    if (fieldName === 'password') {
      console.log('🔐 Es campo password, calculando fortaleza...');
      this.calculatePasswordStrength(safeValue);
      // Re-validar confirmPassword si ya fue tocado
      if (this.formTouched()[`confirmPassword`]) {
        this.onFieldBlur('confirmPassword');
      }
    }

    if (fieldName === 'fechaNacimiento') {
      this.calculateZodiacSign(safeValue);
    }

    // Limpiar error si el campo ya fue tocado
    if (this.formTouched()[fieldName]) {
      const error = this.validateField(fieldName);
      this.setFieldError(fieldName, error);
    }
  }

  // Helper functions para manejar eventos de input
  onInputChange(event: Event, fieldName: keyof RegisterCredentials): void {
    const target = event.target as HTMLInputElement | null;
    const value = target?.value || '';
    console.log('📝 Input change event:', fieldName, '→', value);
    this.onFieldChange(fieldName, value);
  }

  onCheckboxToggle(
    event: Event,
    checkboxName: 'acceptTerms' | 'acceptMarketing'
  ): void {
    const target = event.target as HTMLInputElement | null;
    const checked = target?.checked || false;
    this.onCheckboxChange(checkboxName, checked);
  }

  onFieldBlur(fieldName: keyof RegisterCredentials): void {
    this.setFieldTouched(fieldName, true);
    const error = this.validateField(fieldName);
    this.setFieldError(fieldName, error);

    this.trackUserInteraction(`${fieldName}_field_blur`, {
      hasValue: !!this.credentials()[fieldName],
      isValid: !error,
    });
  }

  onProfileSelect(profile: 'espiritual' | 'esoterico' | 'ambos'): void {
    console.log('Profile selected:', profile); // Debug
    this.credentials.update((cred) => ({ ...cred, tipoPerfil: profile }));
    this.clearFieldError('tipoPerfil');

    // 🆕 Track interacción con iconos profesionales según perfil
    let iconType = '';
    switch (profile) {
      case 'espiritual':
        iconType = 'zen_spiritual';
        break;
      case 'esoterico':
        iconType = 'crystal_esoteric';
        break;
      case 'ambos':
        iconType = 'balanced_both';
        break;
    }

    this.trackUserInteraction('profile_type_selected', {
      profile,
      professional_icon_used: iconType,
      timestamp: new Date().toISOString(),
    });

    // Track la interacción específica del icono
    if (iconType) {
      this.onIconInteraction(iconType);
    }
  }

  onDisciplineToggle(disciplineId: string): void {
    console.log('Discipline toggled:', disciplineId); // Debug
    const current = this.credentials().disciplinasInteres;
    let updated: string[];

    if (current.includes(disciplineId)) {
      // Deseleccionar
      updated = current.filter((id) => id !== disciplineId);
    } else if (current.length < 3) {
      // Seleccionar (máximo 3)
      updated = [...current, disciplineId];
    } else {
      // Ya hay 3 seleccionadas, no hacer nada
      return;
    }

    this.credentials.update((cred) => ({
      ...cred,
      disciplinasInteres: updated,
    }));
    this.selectedDisciplinesCount.set(updated.length);

    console.log('Updated disciplines:', updated); // Debug

    this.trackUserInteraction('discipline_selected', {
      discipline: disciplineId,
      action: current.includes(disciplineId) ? 'deselect' : 'select',
      totalSelected: updated.length,
    });
  }

  togglePasswordVisibility(field: 'password' | 'confirmPassword'): void {
    if (field === 'password') {
      this.showPassword.update((show) => !show);
    } else {
      this.showConfirmPassword.update((show) => !show);
    }

    this.trackUserInteraction('password_visibility_toggle', { field });
  }

  onCheckboxChange(
    checkboxName: 'acceptTerms' | 'acceptMarketing',
    checked: boolean | null
  ): void {
    // Asegurar que el valor sea boolean
    const safeChecked = checked ?? false;

    this.credentials.update((cred) => ({
      ...cred,
      [checkboxName]: safeChecked,
    }));

    if (checkboxName === 'acceptTerms') {
      this.clearFieldError('acceptTerms');
    }

    this.trackUserInteraction('checkbox_change', {
      checkbox: checkboxName,
      checked: safeChecked,
    });
  }

  // ============ FORM SUBMISSION ============

  async onSubmit(): Promise<void> {
    this.isSubmitted.set(true);

    // Validar todos los campos
    if (!this.validateAllFields()) {
      this.trackUserInteraction('register_validation_failed', {
        errors: this.formErrors(),
      });
      return;
    }

    this.isLoading.set(true);

    try {
      this.trackUserInteraction('register_attempt', {
        profile: this.credentials().tipoPerfil,
        disciplines: this.credentials().disciplinasInteres,
        hasZodiacSign: !!this.calculatedZodiacSign(),
        acceptMarketing: this.credentials().acceptMarketing,
        // 🆕 Incluir información de iconos profesionales
        professional_icons_interactions: this.iconInteractions(),
        icon_system_version: '2.0_professional',
      });

      const result = await this.performRegistration(this.credentials());

      if (result.success) {
        await this.handleRegistrationSuccess(result);
      } else {
        this.handleRegistrationError(result);
      }
    } catch (error) {
      this.handleRegistrationError({
        success: false,
        message: 'Error de conexión. Por favor, intenta de nuevo.',
      });

      this.trackUserInteraction('register_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      this.isLoading.set(false);
    }
  }

  private validateAllFields(): boolean {
    const requiredFields: (keyof RegisterCredentials)[] = [
      'nombre',
      'apellido',
      'email',
      'password',
      'confirmPassword',
      'tipoPerfil',
      'acceptTerms',
    ];

    let isValid = true;
    const errors: { [key: string]: string } = {};

    requiredFields.forEach((field) => {
      const error = this.validateField(field);
      if (error) {
        errors[field] = error;
        isValid = false;
      }
    });

    this.formErrors.set(errors);
    return isValid;
  }

  private async performRegistration(
    credentials: RegisterCredentials
  ): Promise<RegisterResponse> {
    // Aquí iría la llamada real al AuthService
    // return this.authService.register(credentials);

    // Simulación para demo
    return new Promise((resolve) => {
      setTimeout(() => {
        // Simular verificación de email duplicado
        if (credentials.email === 'test@example.com') {
          resolve({
            success: false,
            message: 'Este email ya está registrado',
            errors: [{ field: 'email', message: 'Este email ya está en uso' }],
          });
        } else {
          resolve({
            success: true,
            user: {
              id: Date.now().toString(),
              email: credentials.email,
              nombre: credentials.nombre,
              apellido: credentials.apellido,
              tipoPerfil: credentials.tipoPerfil,
            },
          });
        }
      }, 2500);
    });
  }

  // ============ MÉTODO CORREGIDO - handleRegistrationSuccess ============
  private async handleRegistrationSuccess(
    result: RegisterResponse
  ): Promise<void> {
    this.trackUserInteraction('register_success', {
      userId: result.user?.id,
      profile: this.credentials().tipoPerfil,
      disciplines: this.credentials().disciplinasInteres.length,
      // 🆕 Track iconos profesionales usados
      professional_icons_interactions: this.iconInteractions(),
    });

    // Track específicamente la transición a verificación con icono profesional
    this.onIconInteraction('envelope_verification');

    // Mostrar sección de verificación de email
    this.showEmailVerification.set(true);

    // Simular envío de código
    console.log(
      '📧 Código de verificación enviado a:',
      this.credentials().email
    );

    // Limpiar estados del formulario
    this.isLoading.set(false);
    this.isSubmitted.set(false);

    // 🔥 FOCUS AUTOMÁTICO AL PRIMER INPUT - SOLUCIÓN PRINCIPAL
    this.focusFirstCodeInput();
  }

  private focusFirstCodeInput(): void {
    setTimeout(() => {
      if (this.isBrowser) {
        const firstInput = document.querySelector(
          '.code-input'
        ) as HTMLInputElement;
        if (firstInput) {
          firstInput.focus();
          firstInput.select();
          console.log('🎯 Auto-focus aplicado al primer input de código');
        }
      }
    }, 100); // Aumenté el delay para dar más tiempo al render
  }

  private handleRegistrationError(result: RegisterResponse): void {
    // Manejar errores específicos de campos
    if (result.errors) {
      const errors: { [key: string]: string } = {};
      result.errors.forEach((error) => {
        errors[error.field] = error.message;
      });
      this.formErrors.set(errors);
    }

    this.trackUserInteraction('register_failed', {
      error: result.message,
      fieldErrors: result.errors,
    });
  }

  // ============ MÉTODO MEJORADO - onCodeDigitInput ============
  onCodeDigitInput(event: Event, index: number): void {
    const target = event.target as HTMLInputElement;
    const digit = target.value.replace(/[^0-9]/g, '').slice(-1);

    target.value = digit;

    // Actualizar signal
    const currentCode = [...this.verificationCode()];
    currentCode[index] = digit;
    this.verificationCode.set(currentCode);

    // 🔥 FORZAR actualización con detección manual
    setTimeout(() => {
      const realCount = this.getFilledDigits();
      this.filledDigitsCount.set(realCount);
      this.cdr.detectChanges(); // 🆕 FORZAR detección de cambios
      console.log(
        '📊 Barra actualizada a:',
        realCount,
        '%:',
        (realCount / 6) * 100
      );
    }, 10);

    // Limpiar errores
    if (this.verificationError()) {
      this.verificationError.set('');
    }

    // Focus al siguiente
    if (digit && index < 5) {
      const nextInput = document.querySelector(
        `input[data-index="${index + 1}"]`
      ) as HTMLInputElement;
      nextInput?.focus();
    }

    // AUTO-VERIFICACIÓN cuando se completan los 6 dígitos
    if (digit && currentCode.every((d) => d !== '')) {
      setTimeout(() => this.onVerifyCode(), 500);
    }
  }

  onCodeKeyDown(event: KeyboardEvent, index: number): void {
    const target = event.target as HTMLInputElement;

    if (event.key === 'Backspace') {
      event.preventDefault();

      const currentCode = [...this.verificationCode()];

      if (target.value) {
        target.value = '';
        currentCode[index] = '';
      } else if (index > 0) {
        const prevInput = document.querySelector(
          `input[data-index="${index - 1}"]`
        ) as HTMLInputElement;
        if (prevInput) {
          prevInput.value = '';
          prevInput.focus();
          currentCode[index - 1] = '';
        }
      }

      this.verificationCode.set(currentCode);

      setTimeout(() => {
        const realCount = this.getFilledDigits();
        this.filledDigitsCount.set(realCount);
        this.cdr.detectChanges(); // 🆕 FORZAR detección
      }, 10);

      // 🆕 ACTUALIZAR: Forzar actualización del contador
      const filledCount = this.getFilledDigits();
      this.filledDigitsCount.set(filledCount);

      if (this.verificationError()) {
        this.verificationError.set('');
      }
      return;
    }
  }

  onCodePaste(event: ClipboardEvent, index: number): void {
    event.preventDefault();

    const pastedText = event.clipboardData?.getData('text') || '';
    const digits = pastedText.replace(/[^0-9]/g, '').slice(0, 6);

    if (digits.length === 0) return;

    const currentCode = [...this.verificationCode()];

    // Poner cada dígito en su input correspondiente
    for (let i = 0; i < digits.length && i < 6; i++) {
      currentCode[i] = digits[i];
      const input = document.querySelectorAll('.code-input')[
        i
      ] as HTMLInputElement;
      if (input) {
        input.value = digits[i];
      }
    }

    this.verificationCode.set(currentCode);

    // Focus al último input llenado
    const focusIndex = Math.min(digits.length, 5);
    const targetInput = document.querySelectorAll('.code-input')[
      focusIndex
    ] as HTMLInputElement;
    if (targetInput) {
      targetInput.focus();
    }

    // Limpiar errores
    if (this.verificationError()) {
      this.verificationError.set('');
    }

    // Auto-verificar si está completo
    if (digits.length === 6) {
      setTimeout(() => this.onVerifyCode(), 500);
    }
  }

  ngAfterViewInit(): void {
    // Simplificar la lógica de ViewChildren
    if (this.codeInputs) {
      this.codeInputs.changes.subscribe(() => {
        if (this.showEmailVerification() && this.codeInputs.length > 0) {
          this.focusFirstCodeInput();
        }
      });
    }

    // 🆕 Validar iconos profesionales UNA SOLA VEZ después del render (sin loop)
    setTimeout(() => {
      const iconsValid = this.validateProfessionalIcons();
      if (iconsValid) {
        console.log('✅ Todos los iconos profesionales cargados correctamente');
      }
    }, 3000); // Dar más tiempo para que se carguen todos los elementos
  }

  onCodeInputFocus(index: number): void {
    const input = document.querySelectorAll('.code-input')[
      index
    ] as HTMLInputElement;
    if (!input) return;

    // Seleccionar el contenido si existe
    if (input.value) {
      setTimeout(() => {
        input.select();
      }, 1);
    }
  }

  private syncInputsWithCode(): void {
    if (!this.isBrowser) return;

    setTimeout(() => {
      const allInputs = document.querySelectorAll(
        '.code-input'
      ) as NodeListOf<HTMLInputElement>;
      const currentCode = this.verificationCode();

      allInputs.forEach((input, index) => {
        if (input.value !== currentCode[index]) {
          input.value = currentCode[index];
        }
      });
    }, 10);
  }

  clearVerificationCode(): void {
  this.verificationCode.set(['', '', '', '', '', '']);
  this.verificationError.set('');
  this.filledDigitsCount.set(0); // 🆕 AGREGAR

  // Limpiar TODOS los inputs del DOM
  for (let i = 0; i < 6; i++) {
    const input = document.querySelector(`input[data-index="${i}"]`) as HTMLInputElement;
    if (input) {
      input.value = '';
    }
  }
}

  async onVerifyCode(): Promise<void> {
    if (!this.isCodeComplete() || this.isVerifying()) return;

    const code = this.verificationCode().join('');
    this.isVerifying.set(true);
    this.verificationError.set('');

    try {
      this.trackUserInteraction('verification_attempt', {
        code: code.length,
        // 🆕 Track icono profesional usado
        professional_verification_icon: true,
      });

      const result = await this.verifyEmailCode(code);

      if (result.success) {
        this.verificationSuccess.set(true);

        this.trackUserInteraction('verification_success', {
          code: code.length,
          attempts: 1, // Se podría trackear intentos
          // 🆕 Track éxito con iconos profesionales
          professional_icons_experience: this.iconInteractions(),
        });

        // Simular proceso de creación de cuenta completa
        setTimeout(() => {
          this.router
            .navigate(['/dashboard'], {
              queryParams: { welcome: 'true' },
            })
            .catch((err) => {
              console.error('Error en redirección:', err);
              this.router.navigate(['/auth/login']);
            });
        }, 2000);
      } else {
        this.verificationError.set(
          result.message || 'Código incorrecto. Inténtalo de nuevo.'
        );
        this.shakeCodeInputs();

        this.trackUserInteraction('verification_failed', {
          error: result.message,
        });
      }
    } catch (error) {
      this.verificationError.set(
        'Error de conexión. Por favor, intenta de nuevo.'
      );
      this.shakeCodeInputs();

      this.trackUserInteraction('verification_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      this.isVerifying.set(false);
    }
  }

  async onResendCode(): Promise<void> {
    if (this.resendCooldown() > 0 || this.isResending()) return;

    this.isResending.set(true);
    this.verificationError.set('');

    try {
      this.trackUserInteraction('resend_code_attempt', {
        // 🆕 Track icono profesional
        professional_envelope_icon: true,
      });

      const result = await this.resendVerificationCode();

      if (result.success) {
        // Limpiar código actual
        this.clearVerificationCode();

        // Iniciar cooldown
        this.startResendCooldown();

        // Focus al primer input después de que Angular actualice la vista
        setTimeout(() => {
          this.focusFirstCodeInput();
        }, 100);

        this.trackUserInteraction('resend_code_success');
      } else {
        this.verificationError.set(
          result.message || 'Error al reenviar código.'
        );
        this.trackUserInteraction('resend_code_failed', {
          error: result.message,
        });
      }
    } catch (error) {
      this.verificationError.set(
        'Error de conexión. Por favor, intenta de nuevo.'
      );
      this.trackUserInteraction('resend_code_error', {
        error: error instanceof Error ? error.message : 'Unknown error',
      });
    } finally {
      this.isResending.set(false);
    }
  }

  onBackToEdit(): void {
    this.showEmailVerification.set(false);
    this.clearVerificationCode();
    this.verificationSuccess.set(false);
    this.isVerifying.set(false);
    this.isResending.set(false);
    this.clearResendTimer();

    // Focus al campo email cuando regrese al formulario
    setTimeout(() => {
      const emailInput = document.getElementById('email') as HTMLInputElement;
      if (emailInput) {
        emailInput.focus();
        emailInput.select();
      }
    }, 100);

    this.trackUserInteraction('back_to_edit_form');
  }

  // ============ EMAIL VERIFICATION UTILITIES ============

  private async verifyEmailCode(
    code: string
  ): Promise<{ success: boolean; message?: string }> {
    // Simulación para demo - aquí iría la llamada real al backend
    return new Promise((resolve) => {
      setTimeout(() => {
        // Código correcto para demo: 123456
        if (code === '123456') {
          resolve({ success: true });
        } else {
          resolve({
            success: false,
            message: 'Código incorrecto. El código demo es: 123456',
          });
        }
      }, 2000);
    });
  }

  private async resendVerificationCode(): Promise<{
    success: boolean;
    message?: string;
  }> {
    // Simulación para demo
    return new Promise((resolve) => {
      setTimeout(() => {
        resolve({ success: true });
      }, 1500);
    });
  }

  private shakeCodeInputs(): void {
    const codeInputs = document.querySelectorAll('.code-input');
    codeInputs.forEach((input) => {
      input.classList.add('error');
      setTimeout(() => {
        input.classList.remove('error');
      }, 600);
    });
  }

  private startResendCooldown(): void {
    this.clearResendTimer();
    this.resendCooldown.set(60); // 60 segundos

    this.resendTimer = window.setInterval(() => {
      const current = this.resendCooldown();
      if (current <= 1) {
        this.clearResendTimer();
      } else {
        this.resendCooldown.set(current - 1);
      }
    }, 1000);
  }

  private clearResendTimer(): void {
    if (this.resendTimer) {
      clearInterval(this.resendTimer);
      this.resendTimer = undefined;
    }
    this.resendCooldown.set(0);
  }

  // ============ EMAIL VERIFICATION GETTERS ============

  getFilledDigits(): number {
    let filledCount = 0;

    // Debug: verificar que encontramos los inputs
    for (let i = 0; i < 6; i++) {
      const input = document.querySelector(
        `input[data-index="${i}"]`
      ) as HTMLInputElement;
      console.log(`Input ${i}:`, input, 'Value:', input?.value); // Debug

      if (input && input.value.trim() !== '') {
        filledCount++;
      }
    }

    console.log('🔢 Total filled:', filledCount); // Debug
    return filledCount;
  }

  isCodeComplete(): boolean {
    // Verificar que todos los inputs DOM tengan valor
    for (let i = 0; i < 6; i++) {
      const input = document.querySelector(
        `input[data-index="${i}"]`
      ) as HTMLInputElement;
      if (!input || input.value.trim() === '') {
        return false;
      }
    }
    return true;
  }

  hasVerificationError(): boolean {
    return !!this.verificationError();
  }

  debugCodeState(): void {
    const domInputs = document.querySelectorAll(
      '.code-input'
    ) as NodeListOf<HTMLInputElement>;
    const domValues = Array.from(domInputs).map((input) => input.value);

    console.log('🐛 Estado completo del código:', {
      signal: this.verificationCode(),
      domValues: domValues,
      filled: this.getFilledDigits(),
      complete: this.isCodeComplete(),
      mismatch: this.verificationCode().some(
        (digit, i) => digit !== domValues[i]
      ),
      // 🆕 Incluir estado de iconos profesionales (simplificado)
      professional_icons: this.iconInteractions(),
    });

    // Si hay un mismatch, forzar sincronización
    const signalValues = this.verificationCode();
    if (signalValues.some((digit, i) => digit !== domValues[i])) {
      console.log('🔄 Sincronizando valores...');
      // Forzar re-render de Angular
      this.verificationCode.set([...signalValues]);
    }

    // 🔧 Debug de iconos comentado para optimización
    // this.debugProfessionalIcons();
  }

  // ============ SOCIAL REGISTRATION ============

  onSocialRegister(provider: 'google' | 'facebook'): void {
    if (this.isLoading()) return;

    this.trackUserInteraction('social_register_attempt', {
      provider,
      // 🆕 Track que se usaron iconos profesionales en el proceso
      professional_icons_before_social: this.iconInteractions(),
    });

    // Implementar registro social
    this.performSocialRegistration(provider);
  }

  private performSocialRegistration(provider: string): void {
    if (!this.isBrowser) return;

    try {
      // Aquí iría la implementación real del registro social
      console.log(`Iniciando registro con ${provider}...`);

      // Para demo, simular proceso
      alert(`Registro con ${provider} no implementado en demo`);
    } catch (error) {
      console.error(`Error en registro social con ${provider}:`, error);
      this.trackUserInteraction('social_register_error', { provider, error });
    }
  }

  // ============ NAVEGACIÓN ============

  onBackToHome(): void {
    this.trackUserInteraction('back_to_home_click', {
      // 🆕 Track iconos usados antes de salir
      professional_icons_interactions: this.iconInteractions(),
    });
    this.router.navigate(['/']).catch((err) => {
      console.error('Error navegando al inicio:', err);
    });
  }

  onGoToLogin(): void {
    this.trackUserInteraction('go_to_login_click', {
      // 🆕 Track iconos usados antes de ir a login
      professional_icons_interactions: this.iconInteractions(),
    });

    // Preservar email si ya fue ingresado
    const email = this.credentials().email;
    const queryParams = email ? { email } : {};

    this.router.navigate(['/auth/login'], { queryParams }).catch((err) => {
      console.error('Error navegando a login:', err);
    });
  }

  // ============ UTILIDADES ============

  private setFieldTouched(field: string, touched: boolean): void {
    this.formTouched.update((current) => ({ ...current, [field]: touched }));
  }

  private setFieldError(field: string, error: string): void {
    const currentErrors = this.formErrors();
    if (error) {
      this.formErrors.set({ ...currentErrors, [field]: error });
    } else {
      const { [field]: removed, ...rest } = currentErrors;
      this.formErrors.set(rest);
    }
  }

  private clearFieldError(field: string): void {
    this.setFieldError(field, '');
  }

  private clearAllErrors(): void {
    this.formErrors.set({});
  }

  // ============ GETTERS - CORREGIDOS ============

  getFieldError(field: string): string {
    return this.formErrors()[field] || '';
  }

  hasFieldError(field: string): boolean {
    return (
      !!this.getFieldError(field) &&
      (this.formTouched()[field] || this.isSubmitted())
    );
  }

  isFormValid(): boolean {
    return this.validateAllFields();
  }

  getDisciplineById(id: string): Disciplina | undefined {
    return this.disciplinas.find((d) => d.id === id);
  }

  isDisciplineSelected(id: string): boolean {
    return this.credentials().disciplinasInteres.includes(id);
  }

  canSelectMoreDisciplines(): boolean {
    return this.credentials().disciplinasInteres.length < 3;
  }

  getPasswordStrengthClass(): string {
    const strength = this.passwordStrength();
    const className = `strength-${strength.level}`;
    console.log(
      '🎨 CSS Class:',
      className,
      'Level:',
      strength.level,
      'Percentage:',
      strength.percentage
    );
    return className;
  }

  getPasswordStrengthText(): string {
    const strength = this.passwordStrength();
    console.log('📝 Strength text for:', strength);

    if (strength.percentage === 100) {
      return '¡Excelente! Contraseña muy segura';
    } else if (strength.percentage >= 75) {
      return 'Buena - Casi perfecta';
    } else if (strength.percentage >= 50) {
      return `Medio - Necesita: ${strength.feedback.join(', ')}`;
    } else if (strength.percentage > 0) {
      return `Débil - Necesita: ${strength.feedback.join(', ')}`;
    }
    return '';
  }

  // ============ ANALYTICS Y TRACKING ============

  private trackUserInteraction(action: string, details: any = {}): void {
    if (!this.isBrowser) return;

    const eventData = {
      action,
      page: 'register',
      timestamp: new Date().toISOString(),
      userAgent: typeof navigator !== 'undefined' ? navigator.userAgent : 'SSR',
      viewport: this.getViewportSize(),
      formProgress: this.calculateFormProgress(),
      // 🆕 Información de iconos profesionales (SIN validación automática para evitar loops)
      professional_icons_system: '2.0',
      professional_icons_interactions: this.iconInteractions(),
      ...details,
    };

    console.log('📊 Register Analytics Event:', eventData);

    // Integración con servicio de analytics
    // this.analyticsService?.track(action, eventData);
  }

  private getViewportSize(): string {
    if (!this.isBrowser) return 'SSR';

    try {
      return `${window.innerWidth}x${window.innerHeight}`;
    } catch {
      return 'unknown';
    }
  }

  private calculateFormProgress(): number {
    const creds = this.credentials();
    const requiredFields = [
      'nombre',
      'apellido',
      'email',
      'password',
      'confirmPassword',
      'tipoPerfil',
      'acceptTerms',
    ];
    const completedFields = requiredFields.filter((field) => {
      const value = creds[field as keyof RegisterCredentials];
      return value !== '' && value !== false;
    });

    return Math.round((completedFields.length / requiredFields.length) * 100);
  }

  // ============ ACCESIBILIDAD ============

  onKeyDown(event: KeyboardEvent): void {
    // Escape limpia errores
    if (event.key === 'Escape') {
      this.clearAllErrors();
    }

    // 🆕 Atajos para debugging de iconos profesionales (solo en desarrollo)
    if (event.key === 'F12' && event.ctrlKey && event.shiftKey) {
      event.preventDefault();
      this.debugProfessionalIcons();
    }
  }

  // ============ CLEANUP ============

  private cleanup(): void {
    this.isLoading.set(false);
    this.clearAllErrors();
  }
}



================================================
File: app/features/camino-magico/camino-magico.component.html
================================================
<p>camino-magico works!</p>



================================================
File: app/features/camino-magico/camino-magico.component.scss
================================================



================================================
File: app/features/camino-magico/camino-magico.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-camino-magico',
  imports: [],
  templateUrl: './camino-magico.component.html',
  styleUrl: './camino-magico.component.scss'
})
export class CaminoMagicoComponent {

}



================================================
File: app/features/cursos-talleres/cursos-talleres.component.html
================================================
<p>cursos-talleres works!</p>



================================================
File: app/features/cursos-talleres/cursos-talleres.component.scss
================================================



================================================
File: app/features/cursos-talleres/cursos-talleres.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-cursos-talleres',
  imports: [],
  templateUrl: './cursos-talleres.component.html',
  styleUrl: './cursos-talleres.component.scss'
})
export class CursosTalleresComponent {

}



================================================
File: app/features/dashboard/dashboard.component.html
================================================
<!-- Contenedor Principal del Dashboard -->
<div class="dashboard-layout" [ngClass]="{ 'mobile-layout': isMobile }">
  <!-- DISEÑO PARA ESCRITORIO -->
  <ng-container *ngIf="!isMobile">
    <!-- Sidebar del Dashboard -->
    <app-sidebar></app-sidebar>

    <!-- Contenido Principal -->
    <div class="main-content">
      <!-- Header Superior -->
      <app-header></app-header>

      <!-- Área de Contenido -->
      <div class="content-area">
        <!-- Contenedor de Contenido Dinámico -->
        <router-outlet></router-outlet>
      </div>
    </div>
  </ng-container>

  <!-- DISEÑO PARA MÓVIL -->
  <ng-container *ngIf="isMobile">
    <!-- Header Móvil -->
    <div class="mobile-header-section" [ngClass]="{'dashboard-home-header': isInDashboardHome}">
    <app-header></app-header>
  </div>

    <!-- Contenido Principal Móvil -->
    <main class="mobile-main-content">
      <!-- Contenedor de Contenido Dinámico (Móvil) -->
      <router-outlet></router-outlet>
    </main>

    <!-- Navegación Inferior Móvil -->
    <div class="mobile-nav-section">
      <app-mobile-navigation></app-mobile-navigation>
    </div>
  </ng-container>
</div>



================================================
File: app/features/dashboard/dashboard.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.3);
}

.dashboard-layout {
  display: flex;
  height: 100vh;
  padding: 1rem;
  gap: 1rem;
  background: #100820;
  box-sizing: border-box;
  overflow: hidden;
  font-family: serif;

  &:not(.mobile-layout) {
    flex-direction: row;
  }

  &.mobile-layout {
    flex-direction: column;
    padding: 0;
    gap: 0;
  }
}

.main-content {
  flex: 1;
  display: flex;
  flex-direction: column;
  overflow: hidden;
  gap: 1rem;
  position: relative;
  z-index: 2;
}

.content-area {
  flex: 1;
  overflow-y: auto;
  padding: 0;
  border-radius: 1rem;
  background: transparent;

  &::-webkit-scrollbar {
    width: 6px;
  }

  &::-webkit-scrollbar-track {
    background: rgba(180, 162, 253, 0.1);
    border-radius: 3px;
  }

  &::-webkit-scrollbar-thumb {
    background: rgba(180, 162, 253, 0.3);
    border-radius: 3px;

    &:hover {
      background: rgba(180, 162, 253, 0.5);
    }
  }
}

.mobile-header-section {
  flex-shrink: 0;
  position: relative;
  top: 0;
  z-index: 100;
  padding: 0.5rem 1rem 0;

  touch-action: none;
  pointer-events: auto;
  overscroll-behavior: none;
  overflow: hidden;

  
  &.dashboard-home-header {
    position: sticky; 
  }
}

.mobile-main-content {
  flex: 1;
  
  padding-left: 1rem;
  padding-right: 1rem;
  padding-bottom: 100px;

  overflow-y: auto;
  overflow-x: hidden;

  overscroll-behavior: contain !important;
  overscroll-behavior-y: contain !important;
  touch-action: pan-y !important;
  isolation: isolate;

  &::-webkit-scrollbar {
    width: 4px;
  }

  &::-webkit-scrollbar-track {
    background: transparent;
  }

  &::-webkit-scrollbar-thumb {
    background: rgba(180, 162, 253, 0.3);
    border-radius: 2px;
  }
}

.mobile-nav-section {
  flex-shrink: 0;
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 1000;

  touch-action: none;
  pointer-events: auto;
  overscroll-behavior: none;
  overflow: hidden;
}

@media (max-width: 768px) {
  .dashboard-layout:not(.mobile-layout) {
    padding: 0.5rem;
    gap: 0.5rem;
  }

  .main-content {
    gap: 0.5rem;
  }
}

@media (max-width: 480px) {
  .dashboard-layout:not(.mobile-layout) {
    padding: 0.25rem;
    gap: 0.25rem;
  }

  .mobile-header-section {
    padding: 0.25rem 0.75rem 0;
  }

  .mobile-main-content {
    padding: 0.5rem 0.75rem;
    padding-bottom: 90px;
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: opacity 0.2s ease !important;
  }
}

@media (prefers-color-scheme: dark) {
  .dashboard-layout {
    color-scheme: dark;
  }
}

@media (prefers-contrast: high) {
  .dashboard-layout {
    --glass-bg: rgba(255, 255, 255, 0.1);
    --glass-border: rgba(255, 255, 255, 0.3);
  }
}



================================================
File: app/features/dashboard/dashboard.component.ts
================================================
import { Component, OnInit, OnDestroy, signal, computed } from '@angular/core';
import { CommonModule } from '@angular/common';
import { NavigationEnd, Router, RouterOutlet } from '@angular/router';
import { Subject } from 'rxjs';
import { filter, takeUntil } from 'rxjs/operators';

import { StorageService } from '../../core/services/storage.service';
import { DeviceDetectionService } from '../../core/services/device-detection.service';
import { DashboardStats, QuickAction, RecentActivity } from '../../core/models/userInterface';
import { HeaderComponent } from '../../shared/header/header.component';
import { SidebarComponent } from '../../shared/sidebar/sidebar.component';
import { MobileNavigationComponent } from '../../shared/mobile-navigation/mobile-navigation.component';

@Component({
  selector: 'app-dashboard',
  standalone: true,
  imports: [
    CommonModule, 
    HeaderComponent, 
    SidebarComponent, 
    MobileNavigationComponent,
    RouterOutlet
  ],
  templateUrl: './dashboard.component.html',
  styleUrls: ['./dashboard.component.scss'],
})
export class DashboardComponent implements OnInit, OnDestroy {
  
  // ========================================
  // PROPIEDADES PRINCIPALES
  // ========================================
  
  private destroy$ = new Subject<void>();
  isMobile = false;
  isInDashboardHome = false;
  
  // Estado del usuario
  private user = signal<any>(null);
  userName = computed(() => this.user()?.name || 'Viajero Espiritual');

  // ========================================
  // DATOS DEL DASHBOARD
  // ========================================

  stats = signal<DashboardStats>({
    completedCourses: 3,
    totalCourses: 12,
    upcomingAppointments: 2,
    favoriteArticles: 8,
  });

  dailyQuote = signal<string>(
    'Las estrellas se alinean para traerte sabiduría y claridad en tu camino.'
  );

  quickActions = signal<QuickAction[]>([
    {
      title: 'Lectura de Tarot',
      description: 'Descubre lo que el universo tiene para ti',
      icon: 'fas fa-cards',
      color: 'bg-purple-600',
      route: '/tarot',
    },
    {
      title: 'Consulta Astral',
      description: 'Conecta con las energías cósmicas',
      icon: 'fas fa-star',
      color: 'bg-blue-600',
      route: '/astrology',
    },
    {
      title: 'Meditación Guiada',
      description: 'Encuentra paz interior y equilibrio',
      icon: 'fas fa-leaf',
      color: 'bg-green-600',
      route: '/meditation',
    },
  ]);

  recentActivity = signal<RecentActivity[]>([
    {
      id: '1',
      title: 'Completaste: Fundamentos del Tarot',
      description: 'Has finalizado el curso básico de Tarot',
      date: new Date('2024-03-15T10:30:00'),
      type: 'course',
      icon: 'fas fa-graduation-cap',
    },
    {
      id: '2',
      title: 'Nueva cita programada para mañana',
      description: 'Consulta de Tarot con especialista',
      date: new Date('2024-03-14T15:45:00'),
      type: 'consultation',
      icon: 'fas fa-calendar',
    },
    {
      id: '3',
      title: 'Guardaste: Cristales para la Prosperidad',
      description: 'Artículo sobre el poder de los cristales',
      date: new Date('2024-03-13T09:20:00'),
      type: 'article',
      icon: 'fas fa-bookmark',
    },
  ]);

  constructor(
    private router: Router,
    private storageService: StorageService,
    private deviceService: DeviceDetectionService
  ) {}

  // ========================================
  // INICIALIZACIÓN Y DESTRUCCIÓN
  // ========================================

  ngOnInit(): void {
    this.loadUserData();
    this.updateDailyQuote();
    this.setupDeviceDetection();
    this.router.events
    .pipe(
      filter(event => event instanceof NavigationEnd),
      takeUntil(this.destroy$)
    )
    .subscribe((event: NavigationEnd) => {
      this.isInDashboardHome = event.url === '/dashboard/home' || event.url === '/home';
    });
  this.isInDashboardHome = this.router.url === '/dashboard/home' || this.router.url === '/home';
}

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // ========================================
  // GESTIÓN DE DISPOSITIVOS
  // ========================================

  private setupDeviceDetection(): void {
    this.deviceService.isMobile$
      .pipe(takeUntil(this.destroy$))
      .subscribe(isMobile => {
        this.isMobile = isMobile;
        console.log('📱 Device changed in Dashboard:', isMobile ? 'Mobile' : 'Desktop');
      });
  }

  // ========================================
  // CARGA DE DATOS
  // ========================================

  private loadUserData(): void {
    const userData = this.storageService.getItem('arcana_user_profile');
    if (userData?.data) {
      this.user.set(userData.data);
    }
  }

  private updateDailyQuote(): void {
    const quotes = [
      'Las estrellas se alinean para traerte sabiduría y claridad en tu camino.',
      'Hoy el universo conspira a tu favor. Confía en tu intuición.',
      'La energía lunar ilumina nuevas oportunidades en tu horizonte.',
      'Tus chakras vibran en armonía. Es momento de manifestar tus deseos.',
      'Los cristales resuenan con tu aura. Abraza la transformación.',
    ];

    const today = new Date().getDate();
    const selectedQuote = quotes[today % quotes.length];
    this.dailyQuote.set(selectedQuote);
  }

  // ========================================
  // ACCIONES DEL USUARIO
  // ========================================

  onQuickAction(action: QuickAction): void {
    console.log('Quick action:', action.title);
    this.router.navigate([action.route]).catch((err) => {
      console.error('Navigation error:', err);
    });
  }

  logout(): void {
    this.storageService.clearAuthData();
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error en logout:', err);
    });
  }

  // ========================================
  // UTILIDADES
  // ========================================

  getRelativeTime(date: Date): string {
    const now = new Date();
    const diffInMs = now.getTime() - date.getTime();
    const diffInMinutes = Math.floor(diffInMs / (1000 * 60));
    const diffInHours = Math.floor(diffInMinutes / 60);

    if (diffInMinutes < 1) {
      return 'Ahora mismo';
    } else if (diffInMinutes < 60) {
      return `Hace ${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''}`;
    } else if (diffInHours < 24) {
      return `Hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;
    } else {
      const diffInDays = Math.floor(diffInHours / 24);
      return `Hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;
    }
  }
}


================================================
File: app/features/dashboard/dashboard.service.ts
================================================



================================================
File: app/features/en-vivo/en-vivo.component.html
================================================
<p>en-vivo works!</p>



================================================
File: app/features/en-vivo/en-vivo.component.scss
================================================



================================================
File: app/features/en-vivo/en-vivo.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-en-vivo',
  imports: [],
  templateUrl: './en-vivo.component.html',
  styleUrl: './en-vivo.component.scss'
})
export class EnVivoComponent {

}



================================================
File: app/features/fases-lunares/fases-lunares.component.html
================================================
<p>fases-lunares works!</p>



================================================
File: app/features/fases-lunares/fases-lunares.component.scss
================================================



================================================
File: app/features/fases-lunares/fases-lunares.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-fases-lunares',
  imports: [],
  templateUrl: './fases-lunares.component.html',
  styleUrl: './fases-lunares.component.scss'
})
export class FasesLunaresComponent {

}



================================================
File: app/features/holistico-espiritualidad/holistico-espiritualidad.component.html
================================================
<p>holistico-espiritualidad works!</p>



================================================
File: app/features/holistico-espiritualidad/holistico-espiritualidad.component.scss
================================================



================================================
File: app/features/holistico-espiritualidad/holistico-espiritualidad.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-holistico-espiritualidad',
  imports: [],
  templateUrl: './holistico-espiritualidad.component.html',
  styleUrl: './holistico-espiritualidad.component.scss'
})
export class HolisticoEspiritualidadComponent {

}



================================================
File: app/features/home/home-interfaces.ts
================================================
// Interfaces para los datos de posts
export interface PostAuthor {
  id: string;
  name: string;
  avatar: string;
  zodiacSign: string;
  isOnline?: boolean;
}

export interface CommentAuthor {
  id: string;
  name: string;
  avatar: string;
  zodiacSign: string;
  isOnline?: boolean;
}

export interface CommentReply {
  id: string;
  author: CommentAuthor;
  content: string;
  createdAt: Date;
  likes: number;
  isLiked: boolean;
}

export interface PostComment {
  id: string;
  author: CommentAuthor;
  content: string;
  createdAt: Date;
  likes: number;
  isLiked: boolean;
  replies: CommentReply[];
  showAllReplies: boolean;
}

export interface Post {
  id: string;
  author: PostAuthor;
  content: string;
  image?: string;
  tags?: string[];
  createdAt: Date;
  likes: number;
  comments: number;
  isLiked?: boolean;
  postComments: PostComment[];
  showComments: boolean;
  showAllComments: boolean;
}

// Interface exacta de la tabla articulos de la BD
export interface Articulo {
  id: string;
  bruja_id: string;
  titulo: string;
  resumen: string;
  contenido: string;
  disciplina_id: string;
  imagen_destacada: string;
  slug: string;
  estado: 'borrador' | 'publicado' | 'archivado';
  fecha_publicacion: Date;
  visualizaciones: number;
  me_gusta: number;
  fecha_creacion: Date;
  fecha_modificacion: Date;
}

// Interface exacta de la tabla eventos de la BD
export interface Evento {
  id: string;
  titulo: string;
  descripcion: string;
  fecha_inicio: Date;
  fecha_fin: Date;
  ubicacion: string;
  url_evento: string;
  organizador_id: string;
  tipo_evento: 'webinar' | 'reunion' | 'retiro' | 'taller' | 'conferencia';
  disciplina_id: string;
  precio: number;
  cupo_maximo: number;
  imagen_evento: string;
  publico: boolean;
  activo: boolean;
  fecha_creacion: Date;
  fecha_modificacion: Date;
}

// Interface exacta de la tabla evento_participantes de la BD
export interface EventoParticipante {
  id: string;
  evento_id: string;
  usuario_id: string;
  fecha_inscripcion: Date;
  precio_pagado: number;
  estado: string;
}

// Interface exacta de la tabla citas de la BD
export interface Cita {
  id: string;
  bruja_id: string;
  usuario_id: string;
  fecha_hora_inicio: Date;
  fecha_hora_fin: Date;
  estado: 'pendiente' | 'confirmada' | 'cancelada' | 'completada';
  metodo: 'zoom' | 'jitsi' | 'phone' | 'presencial';
  url_reunion: string;
  precio_acordado: number;
  notas_bruja: string;
  notas_usuario: string;
  calificacion_bruja: number | null;
  comentario_calificacion: string;
  fecha_creacion: Date;
  fecha_modificacion: Date;
}

// Interface exacta de la tabla cursos de la BD
export interface Curso {
  id: string;
  titulo: string;
  descripcion: string;
  disciplina_id: string;
  nivel: 'principiante' | 'intermedio' | 'avanzado';
  tipo_contenido: 'video' | 'texto' | 'documento' | 'audio';
  imagen_portada: string;
  duracion_total_minutos: number;
  solo_suscripcion: boolean;
  precio_individual: number;
  activo: boolean;
  orden_visualizacion: number;
  fecha_creacion: Date;
  fecha_modificacion: Date;
}

// Interface exacta de la tabla progreso_lecciones de la BD
export interface ProgresoLeccion {
  id: string;
  usuario_id: string;
  leccion_id: string;
  estado: 'pendiente' | 'en_progreso' | 'completada';
  porcentaje_completado: number;
  tiempo_visto_minutos: number;
  fecha_inicio: Date;
  fecha_ultimo_acceso: Date;
  fecha_completado: Date | null;
}

// Interface para combinar curso con progreso del usuario
export interface CursoConProgreso {
  curso: Curso;
  progreso: {
    porcentaje_completado: number;
    estado: 'pendiente' | 'en_progreso' | 'completada';
    fecha_ultimo_acceso: Date;
    fecha_completado: Date | null;
  };
}

// Interface para brujas (tabla relacionada)
export interface Bruja {
  id: string;
  usuario_id: string;
  biografia: string;
  especialidades: string[];
  calificacion_promedio: number;
  total_consultas: number;
  // Campos del usuario relacionado
  nombre: string;
  apellido: string;
  avatar_url: string;
  signo_zodiacal: string;
}

// Interface para organizadores (usuarios)
export interface Organizador {
  id: string;
  nombre: string;
  apellido: string;
  avatar_url: string;
  email: string;
  signo_zodiacal: string;
}

// Interface para disciplinas (tabla relacionada)
export interface Disciplina {
  id: string;
  nombre: string;
  descripcion: string;
  color_hex: string;
}

// Interface para los filtros
export interface FilterOption {
  value: 'posts' | 'articles' | 'events';
  label: string;
  icon: string;
}



================================================
File: app/features/home/home.component.html
================================================
<!-- Contenedor principal del Home -->
<div class="home-container">
  
  <!-- Header del Home con Filtros -->
  <div class="home-header">
    <h1>Bienvenido a tu Feed</h1>
    <p>¿Qué deseas ver hoy?</p>
    
    <!-- Sistema de Filtros -->
    <div class="filter-container">
      <button 
        *ngFor="let filter of filterOptions" 
        class="filter-btn"
        [class.active]="activeFilter() === filter.value"
        (click)="setActiveFilter(filter.value)">
        <i [class]="filter.icon"></i>
        <span>{{ filter.label }}</span>
        <div class="filter-indicator"></div>
      </button>
    </div>
  </div>

  <!-- Grid principal de contenido -->
  <div class="content-grid">
    
    <!-- Columna izquierda: Contenido principal -->
    <div class="main-content">
      
      <!-- Contenedor de Posts (Solo cuando el filtro es 'posts') -->
      <div *ngIf="activeFilter() === 'posts'" class="content-container posts-container">
        <!-- Header del contenedor -->
        <div class="posts-header">
          <h3><i class="hgi-stroke hgi-sparkles"></i> Posts</h3>
          <button class="new-post-btn" (click)="onCreateNewPost()">
            <i class="fas fa-plus"></i>
            <span>Crear Post</span>
          </button>
        </div>

        <!-- Lista de Posts -->
        <div class="posts-list">
          <article 
            *ngFor="let post of posts(); trackBy: trackByPostId" 
            class="post-card">
            
            <div class="post-header">
              <div class="author-info">
                <div class="avatar-container">
                  <img [src]="post.author.avatar" 
                       [alt]="post.author.name" 
                       class="avatar">
                  <div *ngIf="post.author.isOnline" class="online-indicator"></div>
                </div>
                <div class="author-details">
                  <h4 class="author-name">{{ post.author.name }}</h4>
                  <p class="post-time">
                    {{ getRelativeTime(post.createdAt) }} • 
                    <span class="zodiac-sign">{{ post.author.zodiacSign }}</span>
                  </p>
                </div>
              </div>
              <button class="post-menu-btn">
                <i class="fas fa-ellipsis-h"></i>
              </button>
            </div>

            <div class="post-content">
              <p>{{ post.content }}</p>
              
              <div *ngIf="post.image" class="post-image-container">
                <img [src]="post.image" 
                     [alt]="'Imagen de ' + post.author.name" 
                     class="post-image">
              </div>
              
              <div *ngIf="post.tags && post.tags.length > 0" class="post-tags">
                <span *ngFor="let tag of post.tags" class="tag">{{ tag }}</span>
              </div>
            </div>

            <div class="post-actions">
              <button 
                class="action-btn like-btn"
                [class.active]="post.isLiked"
                (click)="onPostLike(post.id)">
                <i [class]="post.isLiked ? 'fas fa-heart' : 'far fa-heart'"></i>
                <span>{{ post.likes }}</span>
              </button>
              
              <button 
                class="action-btn comment-btn"
                [class.active]="post.showComments"
                (click)="onPostComment(post.id)">
                <i class="far fa-comment"></i>
                <span>{{ getTotalCommentsCount(post) }}</span>
              </button>
              
              <button 
                class="action-btn share-btn"
                (click)="onPostShare(post.id)">
                <i class="far fa-share-square"></i>
              </button>
            </div>

            <!-- Sección de Comentarios -->
            <div *ngIf="post.showComments" class="comments-section">
              
              <!-- Lista de Comentarios -->
              <div class="comments-list" *ngIf="post.postComments.length > 0">
                
                <!-- Comentario Individual -->
                <div 
                  *ngFor="let comment of getVisibleComments(post); trackBy: trackByCommentId"
                  class="comment-item">
                  
                  <!-- Header del Comentario -->
                  <div class="comment-header">
                    <div class="comment-author-info">
                      <div class="comment-avatar-container">
                        <img [src]="comment.author.avatar" 
                             [alt]="comment.author.name" 
                             class="comment-avatar">
                        <div *ngIf="comment.author.isOnline" class="comment-online-indicator"></div>
                      </div>
                      
                        <!-- Contenido del Comentario -->
                        <div class="comment-content-wrapper">
                          <div class="comment-bubble">
                            <div class="comment-author-details">
                              <h5 class="comment-author-name">{{ comment.author.name }}</h5>
                              <span class="comment-zodiac">{{ comment.author.zodiacSign }}</span>
                            </div>
                            <p class="comment-text">{{ comment.content }}</p>
                          </div>
                        
                        <!-- Metadata del Comentario -->
                        <div class="comment-metadata">
                          <span class="comment-time">{{ getRelativeTime(comment.createdAt) }}</span>
                          
                          <button 
                            class="comment-like-btn"
                            [class.active]="comment.isLiked"
                            (click)="onCommentLike(post.id, comment.id)">
                            <i [class]="comment.isLiked ? 'fas fa-heart' : 'far fa-heart'"></i>
                            <span *ngIf="comment.likes > 0">{{ comment.likes }}</span>
                          </button>
                          
                          <button 
                            class="comment-reply-btn"
                            (click)="onReplyToComment(post.id, comment.id)">
                            Responder
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>

                  <!-- Respuestas al Comentario -->
                  <div class="comment-replies" *ngIf="comment.replies.length > 0">
                    
                    <!-- Respuesta Individual -->
                    <div 
                      *ngFor="let reply of getVisibleReplies(comment); trackBy: trackByReplyId"
                      class="reply-item">
                      
                      <div class="reply-connector"></div>
                      
                      <div class="reply-content">
                        <div class="reply-author-info">
                          <div class="reply-avatar-container">
                            <img [src]="reply.author.avatar" 
                                 [alt]="reply.author.name" 
                                 class="reply-avatar">
                          </div>
                          
                            <div class="reply-content-wrapper">
                              <div class="reply-bubble">
                                <div class="reply-author-details">
                                  <h6 class="reply-author-name">{{ reply.author.name }}</h6>
                                  <span class="reply-zodiac">{{ reply.author.zodiacSign }}</span>
                                </div>
                                <p class="reply-text">{{ reply.content }}</p>
                              </div>
                            
                            <!-- Metadata de la Respuesta -->
                            <div class="reply-metadata">
                              <span class="reply-time">{{ getRelativeTime(reply.createdAt) }}</span>
                              
                              <button 
                                class="reply-like-btn"
                                [class.active]="reply.isLiked"
                                (click)="onReplyLike(post.id, comment.id, reply.id)">
                                <i [class]="reply.isLiked ? 'fas fa-heart' : 'far fa-heart'"></i>
                                <span *ngIf="reply.likes > 0">{{ reply.likes }}</span>
                              </button>
                              
                              <button 
                                class="reply-reply-btn"
                                (click)="onReplyToComment(post.id, comment.id)">
                                Responder
                              </button>
                            </div>
                          </div>
                        </div>
                      </div>
                    </div>

                    <!-- Botón Ver Más Respuestas -->
                    <div class="show-more-replies" *ngIf="hasMoreReplies(comment)">
                      <button 
                        class="show-more-replies-btn"
                        (click)="onShowMoreReplies(post.id, comment.id)">
                        <div class="replies-connector-line"></div>
                        <div class="show-more-replies-content">
                          <i class="fas fa-chevron-down"></i>
                          <span>Ver {{ getRemainingRepliesCount(comment) }} respuesta{{ getRemainingRepliesCount(comment) > 1 ? 's' : '' }} más</span>
                        </div>
                      </button>
                    </div>
                  </div>
                </div>

                <!-- Botón Ver Más Comentarios -->
                <div class="show-more-comments" *ngIf="hasMoreComments(post)">
                  <button 
                    class="show-more-comments-btn"
                    (click)="onShowMoreComments(post.id)">
                    <i class="fas fa-chevron-down"></i>
                    <span>Ver {{ getRemainingCommentsCount(post) }} comentario{{ getRemainingCommentsCount(post) > 1 ? 's' : '' }} más</span>
                  </button>
                </div>
              </div>

              <!-- Estado vacío de comentarios -->
              <div class="comments-empty" *ngIf="post.postComments.length === 0">
                <i class="far fa-comment-dots"></i>
                <p>Sé el primero en comentar</p>
                <span>Comparte tu sabiduría mística</span>
              </div>

              <!-- Input para nuevo comentario -->
              <div class="comment-input-section">
                <div class="comment-input-container">
                  <div class="current-user-avatar">
                    <img src="https://images.unsplash.com/photo-1535713875002-d1d0cf377fde?w=40&h=40&fit=crop&crop=face" 
                         alt="Tu avatar" 
                         class="input-avatar">
                  </div>
                  <div class="comment-input-wrapper">
                    <textarea 
                      placeholder="Comparte tu intuición..."
                      class="comment-input"
                      rows="2"></textarea>
                    <button class="comment-submit-btn">
                      <i class="fas fa-paper-plane"></i>
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </article>
        </div>

        <!-- Load More Button -->
        <div class="load-more-container">
          <button 
            class="load-more-btn" 
            [disabled]="isLoading()"
            (click)="onLoadMorePosts()">
            <i [class]="isLoading() ? 'fas fa-spinner fa-spin' : 'fas fa-chevron-down'"></i>
            <span>{{ isLoading() ? 'Cargando...' : 'Ver más posts' }}</span>
          </button>
        </div>
      </div>

      <!-- Contenedor de Artículos (Solo cuando el filtro es 'articles') -->
      <div *ngIf="activeFilter() === 'articles'" class="content-container articles-container">
        <div class="articles-header">
          <h3><i class="fas fa-scroll">&nbsp;</i>Artículos</h3>
          <p>Sabiduría ancestral y conocimiento esotérico</p>
        </div>

        <!-- Lista de Artículos -->
        <div class="articles-list">
          <article 
            *ngFor="let articulo of articulos(); trackBy: trackByArticuloId"
            class="article-card"
            (click)="onArticuloView(articulo.id)">
            
            <!-- Imagen destacada del artículo -->
            <div class="article-image-container">
              <img 
                [src]="articulo.imagen_destacada" 
                [alt]="articulo.titulo"
                class="article-image">
              <div class="article-overlay">
                <span class="discipline-badge" [style.background-color]="getDisciplinaInfo(articulo.disciplina_id).color_hex">
                  {{ getDisciplinaInfo(articulo.disciplina_id).nombre }}
                </span>
                <span class="article-status" [class]="'status-' + articulo.estado">
                  {{ articulo.estado }}
                </span>
              </div>
            </div>

            <!-- Contenido del artículo -->
            <div class="article-content">
              <!-- Header con info de la bruja -->
              <div class="article-author">
                <div class="author-avatar-container">
                  <img 
                    [src]="getBrujaInfo(articulo.bruja_id).avatar_url"
                    [alt]="getBrujaInfo(articulo.bruja_id).nombre + ' ' + getBrujaInfo(articulo.bruja_id).apellido"
                    class="author-avatar">
                </div>
                <div class="author-info">
                  <h4 class="author-name">
                    {{ getBrujaInfo(articulo.bruja_id).nombre }} {{ getBrujaInfo(articulo.bruja_id).apellido }}
                  </h4>
                  <div class="author-details">
                    <span class="author-rating">
                      <i class="fas fa-star"></i>
                      {{ getBrujaInfo(articulo.bruja_id).calificacion_promedio }}
                    </span>
                    <span class="author-specialties">
                      {{ getBrujaInfo(articulo.bruja_id).especialidades.join(', ') }}
                    </span>
                  </div>
                </div>
              </div>

              <!-- Título y resumen -->
              <div class="article-text">
                <h3 class="article-titulo">{{ articulo.titulo }}</h3>
                <p class="article-resumen">{{ articulo.resumen }}</p>
              </div>

              <!-- Metadata del artículo -->
              <div class="article-metadata">
                <div class="metadata-row">
                  <span class="publish-date">
                    <i class="far fa-calendar"></i>
                    {{ getFormattedDate(articulo.fecha_publicacion) }}
                  </span>
                  <span class="reading-time">
                    <i class="far fa-clock"></i>
                    {{ getEstimatedReadingTime(articulo.contenido ) }} min
                  </span>
                </div>
              </div>

              <!-- Acciones del artículo -->
              <div class="article-actions">
                <button 
                  class="action-btn like-btn"
                  (click)="onArticuloLike(articulo.id); $event.stopPropagation()">
                  <i class="far fa-heart"></i>
                  <span>{{ articulo.me_gusta }}</span>
                </button>
                
                <span class="action-stat views-stat">
                  <i class="far fa-eye"></i>
                  <span>{{ articulo.visualizaciones }}</span>
                </span>
                
                <button 
                  class="action-btn share-btn"
                  (click)="onArticuloShare(articulo.slug); $event.stopPropagation()">
                  <i class="far fa-share-square"></i>
                </button>
                
                <button class="read-more-btn">
                  <span>Leer más</span>
                  <i class="fas fa-arrow-right"></i>
                </button>
              </div>
            </div>
          </article>
        </div>

        <!-- Load More Button para artículos -->
        <div class="load-more-container">
          <button 
            class="load-more-btn" 
            [disabled]="isLoading()"
            (click)="onLoadMoreArticulos()">
            <i [class]="isLoading() ? 'fas fa-spinner fa-spin' : 'fas fa-chevron-down'"></i>
            <span>{{ isLoading() ? 'Cargando...' : 'Ver más artículos' }}</span>
          </button>
        </div>
      </div>

      <!-- Contenedor de Eventos (Solo cuando el filtro es 'events') -->
      <div *ngIf="activeFilter() === 'events'" class="content-container events-container">
        <div class="events-header">
          <h3><i class="fas fa-calendar-alt">&nbsp;</i> Eventos</h3>
          <p>Rituales, ceremonias y encuentros espirituales</p>
        </div>

        <!-- Lista de Eventos -->
        <div class="events-list">
          <article 
            *ngFor="let evento of eventos(); trackBy: trackByEventoId"
            class="event-card">
            
            <!-- Imagen del evento -->
            <div class="event-image-container">
              <img 
                [src]="evento.imagen_evento" 
                [alt]="evento.titulo"
                class="event-image">
              <div class="event-overlay">
                <span class="event-type-badge" [class]="'type-' + evento.tipo_evento">
                  <i [class]="getEventTypeIcon(evento.tipo_evento)"></i>
                  {{ evento.tipo_evento }}
                </span>
                <span class="event-price-badge" *ngIf="evento.precio > 0">
                  ${{ evento.precio }}
                </span>
                <span class="event-price-badge free" *ngIf="evento.precio === 0">
                  Gratis
                </span>
              </div>
            </div>

            <!-- Contenido del evento -->
            <div class="event-content">
              <!-- Header con fecha y organizador -->
              <div class="event-header">
                <div class="event-date-info">
                  <div class="date-primary">
                    <i class="fas fa-calendar-alt" style="color: beige;"></i>
                    {{ getFormattedEventDate(evento.fecha_inicio) }}
                  </div>
                  <div class="time-duration">
                    <span class="event-time">
                      <i class="far fa-clock" style="color: beige;"></i>
                      {{ getFormattedEventTime(evento.fecha_inicio) }} - {{ getFormattedEventTime(evento.fecha_fin) }}
                    </span>
                    <span class="event-duration" style="color: bisque;">
                      ({{ getEventDuration(evento.fecha_inicio, evento.fecha_fin) }})
                    </span>
                  </div>
                </div>
                
                <div class="organizer-info">
                  <div class="organizer-avatar-container">
                    <img 
                      [src]="getOrganizadorInfo(evento.organizador_id).avatar_url"
                      [alt]="getOrganizadorInfo(evento.organizador_id).nombre + ' ' + getOrganizadorInfo(evento.organizador_id).apellido"
                      class="organizer-avatar">
                  </div>
                  <div class="organizer-details">
                    <h4 class="organizer-name">
                      {{ getOrganizadorInfo(evento.organizador_id).nombre }} {{ getOrganizadorInfo(evento.organizador_id).apellido }}
                    </h4>
                    <span class="organizer-role">Organizador</span>
                  </div>
                </div>
              </div>

              <!-- Título y descripción -->
              <div class="event-text">
                <h3 class="event-titulo">{{ evento.titulo }}</h3>
                <p class="event-descripcion">{{ evento.descripcion }}</p>
              </div>

              <!-- Información adicional -->
              <div class="event-details">
                <div class="detail-item" *ngIf="evento.ubicacion">
                  <i class="fas fa-map-marker-alt"></i>
                  <span>{{ evento.ubicacion }}</span>
                </div>
                
                <div class="detail-item" *ngIf="!evento.ubicacion && evento.url_evento">
                  <i class="fas fa-globe"></i>
                  <span>Evento Virtual</span>
                </div>
                
                <div class="detail-item" *ngIf="evento.cupo_maximo">
                  <i class="fas fa-users"></i>
                  <span>Cupo máximo: {{ evento.cupo_maximo }} personas</span>
                </div>
                
                <div class="detail-item">
                  <span class="discipline-tag" [style.background-color]="getDisciplinaInfo(evento.disciplina_id).color_hex">
                    {{ getDisciplinaInfo(evento.disciplina_id).nombre }}
                  </span>
                </div>
              </div>

              <!-- Acciones del evento -->
              <div class="event-actions">
                <button 
                  class="action-btn primary-btn"
                  (click)="onEventoInscripcion(evento.id)">
                  <i class="fas fa-ticket-alt"></i>
                  <span>{{ evento.precio > 0 ? 'Inscribirse' : 'Inscripción Gratuita' }}</span>
                </button>
                
                <button 
                  class="action-btn secondary-btn"
                  *ngIf="evento.url_evento">
                  <i class="fas fa-external-link-alt"></i>
                  <span>Más info</span>
                </button>
                
                <button 
                  class="action-btn icon-btn"
                  title="Compartir evento">
                  <i class="far fa-share-square"></i>
                </button>
                
                <button 
                  class="action-btn icon-btn"
                  title="Añadir a favoritos">
                  <i class="far fa-heart"></i>
                </button>
              </div>
            </div>
          </article>
        </div>

        <!-- Load More Button para eventos -->
        <div class="load-more-container">
          <button 
            class="load-more-btn" 
            [disabled]="isLoading()"
            (click)="onLoadMoreEventos()">
            <i [class]="isLoading() ? 'fas fa-spinner fa-spin' : 'fas fa-chevron-down'"></i>
            <span>{{ isLoading() ? 'Cargando...' : 'Ver más eventos' }}</span>
          </button>
        </div>
      </div>

    </div>

    <!-- Columna derecha: Sidebar (Solo visible en desktop/tablet) -->
    <div class="sidebar-content">
      
      <!-- Contenedor de Historial de Citas -->
      <div class="content-container appointments-container">
        <div class="container-header">
          <h3><i class="fas fa-calendar-check">&nbsp;&nbsp;</i>Historial de Citas</h3>
          <p>Tus consultas con brujas</p>
        </div>

        <!-- Lista de Citas -->
        <div class="appointments-list" *ngIf="citas().length > 0; else emptyCitas">
          <div 
            *ngFor="let cita of citas(); trackBy: trackByCitaId"
            class="appointment-card">
            
            <!-- Header de la cita -->
            <div class="appointment-header">
              <div class="bruja-info">
                <img 
                  [src]="getBrujaInfo(cita.bruja_id).avatar_url"
                  [alt]="getBrujaInfo(cita.bruja_id).nombre"
                  class="bruja-avatar">
                <div class="bruja-details">
                  <h4 class="bruja-name">{{ getBrujaInfo(cita.bruja_id).nombre }} {{ getBrujaInfo(cita.bruja_id).apellido }}</h4>
                  <span class="appointment-price">${{ cita.precio_acordado }}</span>
                </div>
              </div>
              <span class="appointment-status" [class]="getEstadoClass(cita.estado)">
                {{ cita.estado }}
              </span>
            </div>

            <!-- Información de la cita -->
            <div class="appointment-info">
              <div class="date-time">
                <span class="appointment-date">
                  <i class="far fa-calendar" style="color: bisque;"></i>
                  {{ getFormattedCitaDate(cita.fecha_hora_inicio) }}
                </span>
                <span class="appointment-time">
                  <i class="far fa-clock" ></i>
                  {{ getFormattedCitaTime(cita.fecha_hora_inicio) }}
                </span>
              </div>
              
              <div class="method-rating">
                <span class="appointment-method">
                  <i [class]="getMetodoIcon(cita.metodo)" style="color: beige;"></i>
                  {{ cita.metodo }}
                </span>
                
                <div class="rating" *ngIf="cita.calificacion_bruja">
                  <i class="fas fa-star" *ngFor="let star of [1,2,3,4,5]" 
                     [class.active]="star <= cita.calificacion_bruja!"></i>
                </div>
              </div>
            </div>
          </div>
        </div>

        <!-- Estado vacío -->
        <ng-template #emptyCitas>
          <div class="empty-state">
            <i class="fas fa-calendar-times"></i>
            <p>No tienes citas registradas</p>
            <span class="empty-subtitle">Agenda tu primera consulta</span>
          </div>
        </ng-template>
      </div>

      <!-- Contenedor de Historial de Cursos -->
      <div class="content-container courses-container">
        <div class="container-header">
          <h3><i class="fas fa-graduation-cap"></i> Historial de Cursos</h3>
          <p>Tu progreso de aprendizaje</p>
        </div>

        <!-- Lista de Cursos -->
        <div class="courses-list" *ngIf="cursosConProgreso().length > 0; else emptyCourses">
          <div 
            *ngFor="let cursoProgreso of cursosConProgreso(); trackBy: trackByCursoId"
            class="course-card">
            
            <!-- Imagen del curso -->
            <div class="course-image-container">
              <img 
                [src]="cursoProgreso.curso.imagen_portada"
                [alt]="cursoProgreso.curso.titulo"
                class="course-image">
              <div class="course-overlay">
                <span class="course-level" [class]="getNivelClass(cursoProgreso.curso.nivel)">
                  {{ cursoProgreso.curso.nivel }}
                </span>
                <span class="course-type">
                  <i [class]="getTipoContenidoIcon(cursoProgreso.curso.tipo_contenido)"></i>
                </span>
              </div>
            </div>

            <!-- Contenido del curso -->
            <div class="course-content">
              <!-- Título y disciplina -->
              <div class="course-header">
                <h4 class="course-title">{{ cursoProgreso.curso.titulo }}</h4>
                <span class="course-discipline" [style.background-color]="getDisciplinaInfo(cursoProgreso.curso.disciplina_id).color_hex">
                  {{ getDisciplinaInfo(cursoProgreso.curso.disciplina_id).nombre }}
                </span>
              </div>

              <!-- Progreso -->
              <div class="course-progress">
                <div class="progress-info">
                  <span class="progress-percentage">{{ cursoProgreso.progreso.porcentaje_completado }}%</span>
                  <span class="progress-status" [class]="getProgresoClass(cursoProgreso.progreso.estado)">
                    {{ cursoProgreso.progreso.estado === 'en_progreso' ? 'En curso' : 
                        cursoProgreso.progreso.estado === 'completada' ? 'Completado' : 'Pendiente' }}
                  </span>
                </div>
                <div class="progress-bar">
                  <div class="progress-fill" [style.width.%]="cursoProgreso.progreso.porcentaje_completado"></div>
                </div>
              </div>

              <!-- Información adicional -->
              <div class="course-meta">
                <span class="course-duration">
                  <i class="far fa-clock"></i>
                  {{ getFormattedDuration(cursoProgreso.curso.duracion_total_minutos) }}
                </span>
                
                <span class="last-access">
                  <i class="fas fa-eye"></i>
                  {{ getFormattedLastAccess(cursoProgreso.progreso.fecha_ultimo_acceso) }}
                </span>
                
                <span class="course-price" *ngIf="!cursoProgreso.curso.solo_suscripcion && cursoProgreso.curso.precio_individual > 0">
                  ${{ cursoProgreso.curso.precio_individual }}
                </span>
                
                <span class="course-subscription" *ngIf="cursoProgreso.curso.solo_suscripcion">
                  Premium
                </span>
              </div>
            </div>
          </div>
        </div>

        <!-- Estado vacío -->
        <ng-template #emptyCourses>
          <div class="empty-state">
            <i class="fas fa-graduation-cap"></i>
            <p>No tienes cursos en tu historial</p>
            <span class="empty-subtitle">Explora nuestro catálogo de cursos</span>
          </div>
        </ng-template>
      </div>

    </div>

  </div>

</div>


================================================
File: app/features/home/home.component.scss
================================================
$border-width: 2px;
$border-radius: 8px;
$padding: 1rem;
$gap: 1rem;

.home-container {
  width: 100%;
  max-width: 1200px;
  margin: 0 auto;
  padding: $padding;
}

.home-header {
  margin-bottom: 2rem;
  text-align: center;

  h1 {
    font-size: 2rem;
    margin-bottom: 0.5rem;
    color: #b4a3fd;
    font-weight: 600;
  }

  p {
    color: rgba(192, 186, 183, 0.8);
    font-size: 1rem;
    margin-bottom: 2rem;
  }
}

.filter-container {
  display: flex;
  justify-content: center;
  gap: 0.5rem;
  background: linear-gradient(
    145deg,
    rgba(180, 163, 253, 0.08) 0%,
    rgba(98, 126, 135, 0.05) 50%,
    rgba(29, 24, 122, 0.1) 100%
  );
  padding: 0.5rem;
  border-radius: 25px;
  border: 1px solid rgba(180, 163, 253, 0.2);
  backdrop-filter: blur(10px);
  max-width: 600px;
  margin: 0 auto;

  @media (max-width: 768px) {
    max-width: 100%;
    gap: 0.25rem;
    padding: 0.4rem;
  }
}

.filter-btn {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1.25rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 20px;
  color: rgba(192, 186, 183, 0.7);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  min-width: 120px;
  justify-content: center;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.1),
      rgba(98, 126, 135, 0.08)
    );
    opacity: 0;
    transition: opacity 0.3s ease;
    border-radius: inherit;
  }

  &:hover {
    color: rgba(207, 206, 211, 0.9);
    border-color: rgba(180, 163, 253, 0.3);
    transform: translateY(-1px);

    &::before {
      opacity: 1;
    }
  }

  &.active {
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.2),
      rgba(98, 126, 135, 0.15)
    );
    border-color: rgba(180, 163, 253, 0.4);
    color: #b4a3fd;
    box-shadow: 0 4px 20px rgba(180, 163, 253, 0.2);

    .filter-indicator {
      opacity: 1;
      transform: scaleX(1);
    }
  }

  i {
    font-size: 0.875rem;
    z-index: 2;
    position: relative;
  }

  span {
    z-index: 2;
    position: relative;

    @media (max-width: 480px) {
      display: none;
    }
  }

  @media (max-width: 768px) {
    padding: 0.6rem 1rem;
    min-width: 100px;
    font-size: 0.8rem;
  }

  @media (max-width: 480px) {
    padding: 0.7rem;
    min-width: 50px;
    border-radius: 50%;

    i {
      font-size: 1rem;
    }
  }
}

.filter-indicator {
  position: absolute;
  bottom: 0;
  left: 50%;
  transform: translateX(-50%) scaleX(0);
  width: 80%;
  height: 2px;
  background: linear-gradient(
    90deg,
    rgba(180, 163, 253, 0.8),
    rgba(98, 126, 135, 0.8)
  );
  border-radius: 1px;
  opacity: 0;
  transition: all 0.3s ease;
}

.content-grid {
  display: grid;
  grid-template-columns: 2fr 1fr;
  gap: $gap;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
  }
}

.main-content {
  display: flex;
  flex-direction: column;
  gap: $gap;
}

.sidebar-content {
  display: flex;
  flex-direction: column;
  gap: $gap;
}

.content-container {
  padding: $padding;
  border-radius: $border-radius;
  border: $border-width solid;
  min-height: 120px;

  h3 {
    margin: 0 0 0.5rem 0;
    font-size: 1.2rem;
    font-weight: 600;
  }

  p {
    margin: 0;
    color: #666;
    font-size: 0.9rem;
  }
}

.posts-container {
  border: none;
  background: transparent;
  backdrop-filter: none;
  box-shadow: none;
  padding: 0;

  h3 {
    color: #b4a3fd;
    font-weight: 600;
    margin: 0;
  }

  .posts-header p {
    display: none;
  }
}

.posts-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 2rem;
  padding: 1.5rem;
  background: linear-gradient(
    145deg,
    rgba(180, 163, 253, 0.05) 0%,
    rgba(98, 126, 135, 0.03) 50%,
    rgba(29, 24, 122, 0.08) 100%
  );
  backdrop-filter: blur(10px);
  border: 1px solid rgba(180, 163, 253, 0.2);
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.new-post-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 1rem;
  background: linear-gradient(
    135deg,
    rgba(180, 163, 253, 0.1),
    rgba(98, 126, 135, 0.1)
  );
  border: 1px solid rgba(180, 163, 253, 0.3);
  border-radius: 20px;
  color: rgba(192, 186, 183, 0.9);
  font-size: 0.875rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);

  &:hover {
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.2),
      rgba(98, 126, 135, 0.15)
    );
    border-color: rgba(180, 163, 253, 0.5);
    transform: translateY(-1px);
  }

  i {
    font-size: 0.75rem;
  }

  span {
    @media (max-width: 480px) {
      display: none;
    }
  }
}

.posts-list {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.post-card {
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.12) 0%,
    rgba(207, 206, 211, 0.08) 50%,
    rgba(96, 65, 48, 0.15) 100%
  );
  border: 2px solid rgba(180, 163, 253, 0.25);
  border-radius: 20px;
  padding: 1.5rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(20px);
  position: relative;
  overflow: hidden;
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.2), 0 2px 8px rgba(180, 163, 253, 0.1),
    inset 0 1px 0 rgba(255, 255, 255, 0.1);

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(
      90deg,
      rgba(180, 163, 253, 0.6),
      rgba(98, 126, 135, 0.6),
      rgba(180, 163, 253, 0.6)
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &::after {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.03) 0%,
      transparent 50%,
      rgba(98, 126, 135, 0.03) 100%
    );
    pointer-events: none;
  }

  &:hover {
    border-color: rgba(180, 163, 253, 0.4);
    box-shadow: 0 12px 40px rgba(0, 0, 0, 0.3),
      0 4px 16px rgba(180, 163, 253, 0.2),
      inset 0 1px 0 rgba(255, 255, 255, 0.15);
    transform: translateY(-4px);

    &::before {
      opacity: 1;
    }
  }

  &:hover::after {
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.05) 0%,
      transparent 50%,
      rgba(98, 126, 135, 0.05) 100%
    );
  }
}

.post-header {
  display: flex;
  align-items: center;
  justify-content: space-between;
  margin-bottom: 1rem;
}

.author-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.avatar-container {
  position: relative;
}

.avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid rgba(180, 163, 253, 0.3);
  object-fit: cover;
}

.online-indicator {
  position: absolute;
  bottom: 2px;
  right: 2px;
  width: 10px;
  height: 10px;
  background: #10b981;
  border: 2px solid rgba(16, 8, 32, 0.8);
  border-radius: 50%;
}

.author-details {
  h4 {
    margin: 0;
    font-size: 0.875rem;
    font-weight: 600;
    color: rgba(207, 206, 211, 0.95);
  }

  p {
    margin: 0;
    display: flex !important;
    align-items: center;
    gap: 0.5rem;
    font-size: 0.75rem;
    color: rgba(192, 186, 183, 0.7);
  }
}

.zodiac-sign {
  color: rgba(180, 163, 253, 0.8) !important;
  font-weight: 500;
}

.post-menu-btn {
  padding: 0.5rem;
  background: transparent;
  border: none;
  color: rgba(192, 186, 183, 0.6);
  cursor: pointer;
  border-radius: 8px;
  transition: all 0.2s ease;

  &:hover {
    background: rgba(180, 163, 253, 0.1);
    color: rgba(192, 186, 183, 0.9);
  }
}

.post-content {
  margin-bottom: 1rem;

  p {
    display: block !important;
    margin: 0 0 1rem 0;
    color: rgba(207, 206, 211, 0.9) !important;
    line-height: 1.5;
    font-size: 0.875rem;
  }
}

.post-image-container {
  margin-top: 1rem;
  border-radius: 12px;
  overflow: hidden;

  .post-image {
    width: 100%;
    height: auto;
    display: block;
    transition: transform 0.3s ease;

    &:hover {
      transform: scale(1.02);
    }
  }
}

.post-tags {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  margin-top: 1rem;
}

.tag {
  padding: 0.25rem 0.75rem;
  background: rgba(98, 126, 135, 0.2);
  border: 1px solid rgba(98, 126, 135, 0.3);
  border-radius: 20px;
  color: rgba(192, 186, 183, 0.8);
  font-size: 0.75rem;
  font-weight: 500;
}

.post-actions {
  display: flex;
  align-items: center;
  gap: 1.5rem;
  padding-top: 1rem;
  border-top: 1px solid rgba(192, 186, 183, 0.1);
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.5rem 0.75rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 20px;
  color: rgba(192, 186, 183, 0.7);
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(180, 163, 253, 0.1);
    border-color: rgba(180, 163, 253, 0.2);
    color: rgba(192, 186, 183, 0.9);
  }

  &.active {
    color: #ff6b8a;
    background: rgba(255, 107, 138, 0.1);
    border-color: rgba(255, 107, 138, 0.2);
  }

  &.comment-btn.active {
    color: #b4a3fd;
    background: rgba(180, 163, 253, 0.1);
    border-color: rgba(180, 163, 253, 0.2);
  }

  i {
    font-size: 0.875rem;
  }

  span {
    font-weight: 500;
    min-width: 1rem;
    text-align: center;
  }
}

.comments-section {
  margin-top: 1.5rem;
  padding-top: 1.5rem;
  border-top: 2px solid rgba(180, 163, 253, 0.2);
  background: linear-gradient(
    145deg,
    rgba(29, 24, 122, 0.04) 0%,
    rgba(98, 126, 135, 0.03) 50%,
    rgba(180, 163, 253, 0.05) 100%
  );
  border-radius: 16px;
  padding: 1.25rem;
  backdrop-filter: blur(8px);
  border: 1px solid rgba(180, 163, 253, 0.15);
  box-shadow: inset 0 1px 3px rgba(0, 0, 0, 0.1);
}

.comments-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 1rem;
}

.comment-item {
  position: relative;
  padding-bottom: 0.75rem;

  &:not(:last-child) {
    border-bottom: 1px solid rgba(192, 186, 183, 0.08);
  }
}

.comment-header {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.comment-author-info {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
  width: 100%;
}

.comment-avatar-container {
  position: relative;
  flex-shrink: 0;
}

.comment-avatar {
  width: 36px;
  height: 36px;
  border-radius: 50%;
  border: 2px solid rgba(180, 163, 253, 0.2);
  object-fit: cover;
}

.comment-online-indicator {
  position: absolute;
  bottom: 1px;
  right: 1px;
  width: 8px;
  height: 8px;
  background: #10b981;
  border: 1.5px solid rgba(16, 8, 32, 0.8);
  border-radius: 50%;
}

.comment-content-wrapper {
  flex: 1;
  min-width: 0;
}

.comment-bubble {
  background: linear-gradient(
    135deg,
    rgba(222, 213, 191, 0.1) 0%,
    rgba(207, 206, 211, 0.08) 100%
  );
  border: 1px solid rgba(207, 206, 211, 0.15);
  border-radius: 16px;
  padding: 0.875rem 1rem;
  position: relative;
  backdrop-filter: blur(8px);

  &::before {
    content: "";
    position: absolute;
    left: -8px;
    top: 12px;
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 8px solid rgba(207, 206, 211, 0.15);
  }

  &::after {
    content: "";
    position: absolute;
    left: -7px;
    top: 12px;
    width: 0;
    height: 0;
    border-top: 6px solid transparent;
    border-bottom: 6px solid transparent;
    border-right: 8px solid rgba(222, 213, 191, 0.1);
  }
}

.comment-author-details {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  margin-bottom: 0.5rem;
}

.comment-author-name {
  margin: 0;
  font-size: 0.8rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
}

.comment-zodiac {
  font-size: 0.7rem;
  color: rgba(180, 163, 253, 0.8);
  font-weight: 500;
}

.comment-text {
  margin: 0;
  font-size: 0.875rem;
  line-height: 1.4;
  color: rgba(207, 206, 211, 0.9) !important;
  display: block !important;
}

.comment-metadata {
  display: flex;
  align-items: center;
  gap: 1rem;
  margin-top: 0.5rem;
  padding-left: 0.25rem;
}

.comment-time {
  font-size: 0.7rem;
  color: rgba(192, 186, 183, 0.6);
}

.comment-like-btn,
.comment-reply-btn {
  display: flex;
  align-items: center;
  gap: 0.3rem;
  padding: 0.25rem 0.5rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 12px;
  color: rgba(192, 186, 183, 0.6);
  font-size: 0.7rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(180, 163, 253, 0.08);
    border-color: rgba(180, 163, 253, 0.2);
    color: rgba(192, 186, 183, 0.8);
  }

  &.active {
    color: #ff6b8a;
    background: rgba(255, 107, 138, 0.08);
    border-color: rgba(255, 107, 138, 0.15);
  }

  i {
    font-size: 0.65rem;
  }

  span {
    font-size: 0.65rem;
    min-width: 0.8rem;
    text-align: center;
  }
}

.comment-replies {
  margin-top: 0.75rem;
  margin-left: 3rem;
  position: relative;
}

.reply-item {
  position: relative;
  margin-bottom: 0.75rem;

  &:last-child {
    margin-bottom: 0;
  }
}

.reply-connector {
  position: absolute;
  left: -1.5rem;
  top: 18px;
  width: 16px;
  height: 1px;
  background: rgba(180, 163, 253, 0.3);

  &::before {
    content: "";
    position: absolute;
    left: -1.5rem;
    top: -18px;
    width: 1px;
    height: 20px;
    background: rgba(180, 163, 253, 0.3);
  }
}

.reply-content {
  display: flex;
  align-items: flex-start;
  gap: 0.6rem;
}

.reply-author-info {
  display: flex;
  align-items: flex-start;
  gap: 0.6rem;
  width: 100%;
}

.reply-avatar-container {
  position: relative;
  flex-shrink: 0;
}

.reply-avatar {
  width: 28px;
  height: 28px;
  border-radius: 50%;
  border: 1.5px solid rgba(98, 126, 135, 0.25);
  object-fit: cover;
}

.reply-content-wrapper {
  flex: 1;
  min-width: 0;
}

.reply-bubble {
  background: linear-gradient(
    135deg,
    rgba(98, 126, 135, 0.08) 0%,
    rgba(29, 24, 122, 0.05) 100%
  );
  border: 1px solid rgba(98, 126, 135, 0.15);
  border-radius: 14px;
  padding: 0.7rem 0.875rem;
  position: relative;
  backdrop-filter: blur(6px);

  &::before {
    content: "";
    position: absolute;
    left: -6px;
    top: 10px;
    width: 0;
    height: 0;
    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    border-right: 6px solid rgba(98, 126, 135, 0.15);
  }

  &::after {
    content: "";
    position: absolute;
    left: -5px;
    top: 10px;
    width: 0;
    height: 0;
    border-top: 5px solid transparent;
    border-bottom: 5px solid transparent;
    border-right: 6px solid rgba(98, 126, 135, 0.08);
  }
}

.reply-author-details {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  margin-bottom: 0.4rem;
}

.reply-author-name {
  margin: 0;
  font-size: 0.75rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.9);
}

.reply-zodiac {
  font-size: 0.65rem;
  color: rgba(98, 126, 135, 0.8);
  font-weight: 500;
}

.reply-text {
  margin: 0;
  font-size: 0.8rem;
  line-height: 1.3;
  color: rgba(207, 206, 211, 0.85) !important;
  display: block !important;
}

.reply-metadata {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-top: 0.4rem;
  padding-left: 0.2rem;
}

.reply-time {
  font-size: 0.65rem;
  color: rgba(192, 186, 183, 0.5);
}

.reply-like-btn,
.reply-reply-btn {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  padding: 0.2rem 0.4rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 10px;
  color: rgba(192, 186, 183, 0.5);
  font-size: 0.65rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(98, 126, 135, 0.08);
    border-color: rgba(98, 126, 135, 0.2);
    color: rgba(192, 186, 183, 0.7);
  }

  &.active {
    color: #ff6b8a;
    background: rgba(255, 107, 138, 0.06);
    border-color: rgba(255, 107, 138, 0.12);
  }

  i {
    font-size: 0.6rem;
  }

  span {
    font-size: 0.6rem;
    min-width: 0.6rem;
    text-align: center;
  }
}

.show-more-comments {
  display: flex;
  justify-content: center;
  margin: 1rem 0 0.5rem 0;
  padding-top: 0.75rem;
  border-top: 1px solid rgba(180, 163, 253, 0.1);
}

.show-more-comments-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.6rem 1.25rem;
  background: linear-gradient(
    135deg,
    rgba(180, 163, 253, 0.1),
    rgba(98, 126, 135, 0.08)
  );
  border: 1px solid rgba(180, 163, 253, 0.2);
  border-radius: 20px;
  color: rgba(180, 163, 253, 0.9);
  font-size: 0.8rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.15),
      rgba(98, 126, 135, 0.12)
    );
    border-color: rgba(180, 163, 253, 0.3);
    transform: translateY(-1px);
  }

  i {
    font-size: 0.7rem;
    transition: transform 0.3s ease;
  }

  &:hover i {
    transform: translateY(2px);
  }
}

.show-more-replies {
  position: relative;
  margin: 0.75rem 0 0 -1.5rem;
  padding-left: 1.5rem;
}

.show-more-replies-btn {
  display: flex;
  align-items: center;
  background: transparent;
  border: none;
  cursor: pointer;
  padding: 0.4rem 0;
  width: 100%;
  transition: all 0.3s ease;

  &:hover {
    .show-more-replies-content {
      color: rgba(98, 126, 135, 0.8);
    }

    .replies-connector-line {
      background: rgba(98, 126, 135, 0.4);
    }
  }
}

.replies-connector-line {
  position: absolute;
  left: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 16px;
  height: 1px;
  background: rgba(98, 126, 135, 0.3);
  transition: background 0.3s ease;
}

.show-more-replies-content {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  color: rgba(98, 126, 135, 0.6);
  font-size: 0.7rem;
  font-weight: 500;
  margin-left: 0.5rem;
  transition: color 0.3s ease;

  i {
    font-size: 0.6rem;
    transition: transform 0.3s ease;
  }
}

.show-more-replies-btn:hover .show-more-replies-content i {
  transform: translateY(1px);
}

.comments-empty {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2.5rem 1rem;
  text-align: center;
  border: 1px dashed rgba(180, 163, 253, 0.2);
  border-radius: 12px;
  background: linear-gradient(
    145deg,
    rgba(180, 163, 253, 0.03) 0%,
    rgba(98, 126, 135, 0.02) 100%
  );
  margin-bottom: 1rem;

  i {
    font-size: 2.5rem;
    color: rgba(180, 163, 253, 0.3);
    margin-bottom: 1rem;
  }

  p {
    margin: 0 0 0.5rem 0;
    color: rgba(192, 186, 183, 0.7) !important;
    font-size: 0.9rem;
    font-weight: 500;
    display: block !important;
  }

  span {
    color: rgba(192, 186, 183, 0.5);
    font-size: 0.8rem;
    font-style: italic;
  }
}

.comment-input-section {
  border-top: 1px solid rgba(180, 163, 253, 0.1);
  padding-top: 1rem;
}

.comment-input-container {
  display: flex;
  align-items: flex-start;
  gap: 0.75rem;
}

.current-user-avatar {
  flex-shrink: 0;
}

.input-avatar {
  width: 38px;
  height: 38px;
  border-radius: 50%;
  border: 2px solid rgba(180, 163, 253, 0.3);
  object-fit: cover;
}

.comment-input-wrapper {
  flex: 1;
  position: relative;
  display: flex;
  align-items: flex-end;
  gap: 0.5rem;
}

.comment-input {
  flex: 1;
  padding: 0.75rem 1rem;
  background: linear-gradient(
    135deg,
    rgba(222, 213, 191, 0.08) 0%,
    rgba(207, 206, 211, 0.05) 100%
  );
  border: 1px solid rgba(207, 206, 211, 0.2);
  border-radius: 20px;
  color: rgba(207, 206, 211, 0.9);
  font-size: 0.875rem;
  font-family: inherit;
  resize: vertical;
  min-height: 44px;
  max-height: 120px;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);

  &::placeholder {
    color: rgba(192, 186, 183, 0.5);
    font-style: italic;
  }

  &:focus {
    outline: none;
    border-color: rgba(180, 163, 253, 0.4);
    background: linear-gradient(
      135deg,
      rgba(222, 213, 191, 0.12) 0%,
      rgba(207, 206, 211, 0.08) 100%
    );
    box-shadow: 0 0 0 3px rgba(180, 163, 253, 0.1);
  }
}

.comment-submit-btn {
  padding: 0.75rem;
  background: linear-gradient(
    135deg,
    rgba(180, 163, 253, 0.2),
    rgba(98, 126, 135, 0.15)
  );
  border: 1px solid rgba(180, 163, 253, 0.3);
  border-radius: 50%;
  color: rgba(180, 163, 253, 0.9);
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  display: flex;
  align-items: center;
  justify-content: center;
  min-width: 44px;
  min-height: 44px;

  &:hover {
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.3),
      rgba(98, 126, 135, 0.2)
    );
    border-color: rgba(180, 163, 253, 0.5);
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(180, 163, 253, 0.2);
  }

  &:active {
    transform: translateY(0);
  }

  i {
    font-size: 0.875rem;
  }
}

.load-more-container {
  display: flex;
  justify-content: center;
  margin-top: 2.5rem;
  padding: 2rem 0;
}

.load-more-btn {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 1rem 2rem;
  background: linear-gradient(
    135deg,
    rgba(29, 24, 122, 0.15),
    rgba(0, 46, 38, 0.15)
  );
  border: 2px solid rgba(98, 126, 135, 0.4);
  border-radius: 30px;
  color: rgba(207, 206, 211, 0.95);
  font-weight: 600;
  font-size: 0.9rem;
  cursor: pointer;
  transition: all 0.3s ease;
  backdrop-filter: blur(15px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.2);

  &:hover {
    background: linear-gradient(
      135deg,
      rgba(29, 24, 122, 0.25),
      rgba(0, 46, 38, 0.2)
    );
    border-color: rgba(180, 163, 253, 0.5);
    transform: translateY(-2px);
    box-shadow: 0 6px 25px rgba(180, 163, 253, 0.2);
  }

  &:disabled {
    opacity: 0.6;
    cursor: not-allowed;
    transform: none;
  }

  i {
    transition: transform 0.3s ease;
  }

  &:hover:not(:disabled) i {
    transform: translateY(3px);
  }
}

@media (max-width: 768px) {
  .home-header {
    margin-bottom: 1.5rem;

    h1 {
      font-size: 1.5rem;
    }

    p {
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }
  }

  .filter-container {
    max-width: 100%;
    gap: 0.25rem;
    padding: 0.4rem;
  }

  .placeholder-content {
    padding: 2rem 1rem;
    min-height: 250px;

    i {
      font-size: 3rem;
      margin-bottom: 1rem;
    }

    p {
      font-size: 0.9rem;
      margin-bottom: 1.5rem;
    }
  }

  .coming-soon-btn {
    padding: 0.6rem 1.5rem;
    font-size: 0.9rem;
  }

  .container-header {
    margin-bottom: 1.5rem;

    h3 {
      font-size: 1.2rem;
    }

    p {
      font-size: 0.85rem;
    }
  }
}

@media (max-width: 480px) {
  .home-header {
    h1 {
      font-size: 1.3rem;
    }

    p {
      font-size: 0.85rem;
    }
  }

  .placeholder-content {
    padding: 1.5rem 0.5rem;
    min-height: 200px;

    i {
      font-size: 2.5rem;
    }

    p {
      font-size: 0.85rem;
    }
  }
}

@media (max-width: 768px) {
  .posts-header {
    padding: 1rem;
    margin-bottom: 1.5rem;
    border-radius: 12px;
    flex-direction: column;
    gap: 1rem;

    h3 {
      font-size: 1.1rem;
    }
  }

  .new-post-btn {
    width: 100%;
    justify-content: center;
  }

  .posts-list {
    gap: 1.5rem;
  }

  .post-card {
    padding: 1rem;
    border-radius: 16px;
    border-width: 1.5px;
  }

  .author-info {
    gap: 0.5rem;
  }

  .avatar {
    width: 36px;
    height: 36px;
  }

  .post-actions {
    gap: 1rem;
    flex-wrap: wrap;

    .action-btn {
      padding: 0.5rem;
      flex: 1;
      justify-content: center;
      min-width: 0;
    }
  }

  .comments-section {
    padding: 1rem;
    margin-top: 1rem;
    padding-top: 1rem;
  }

  .load-more-btn {
    padding: 0.875rem 1.5rem;
    font-size: 0.85rem;
  }
}

@media (max-width: 480px) {
  .posts-header {
    padding: 0.875rem;
  }

  .post-card {
    padding: 0.875rem;
    border-radius: 14px;
  }

  .post-content p {
    font-size: 0.8rem;
  }

  .author-details h4 {
    font-size: 0.8rem;
  }

  .author-details p {
    font-size: 0.7rem;
  }

  .action-btn span {
    display: none;
  }

  .action-btn {
    padding: 0.5rem;
    border-radius: 50%;
    width: 40px;
    height: 40px;
    justify-content: center;
  }

  .load-more-btn {
    padding: 0.75rem 1.25rem;
    font-size: 0.8rem;
  }
}

.articles-container {
  border: 1px solid rgba(207, 206, 211, 0.2);
  background: linear-gradient(
    145deg,
    rgba(207, 206, 211, 0.05) 0%,
    rgba(222, 213, 191, 0.03) 50%,
    rgba(96, 65, 48, 0.08) 100%
  );
  backdrop-filter: blur(10px);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.events-container {
  border: 1px solid rgba(222, 213, 191, 0.3);
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.12) 0%,

    rgba(192, 186, 183, 0.08) 50%,

    rgba(207, 206, 211, 0.1) 100%
  );
  backdrop-filter: blur(15px);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.events-header {
  text-align: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(29, 24, 122, 0.2);

  h3 {
    color: #b4a3fd;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    font-size: 1.3rem;
  }

  p {
    color: rgba(192, 186, 183, 0.8) !important;
    margin: 0;
    font-size: 0.9rem;
    font-style: italic;
    display: block !important;
  }
}

.events-list {
  display: flex;
  flex-direction: column;
  gap: 2rem;
}

.event-card {
  display: grid;
  grid-template-columns: 300px 1fr;
  gap: 1.5rem;
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.08) 0%,

    rgba(207, 206, 211, 0.05) 50%,

    rgba(96, 65, 48, 0.08) 100%
  );
  border: 1px solid rgba(207, 206, 211, 0.2);
  border-radius: 16px;
  overflow: hidden;
  transition: all 0.3s ease;
  backdrop-filter: blur(12px);
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(
      90deg,
      rgba(0, 46, 38, 0.6),
      rgba(29, 24, 122, 0.6),
      rgba(98, 126, 135, 0.6)
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &:hover {
    border-color: rgba(29, 24, 122, 0.4);
    box-shadow: 0 12px 40px rgba(29, 24, 122, 0.15);
    transform: translateY(-2px);

    &::before {
      opacity: 1;
    }

    .event-image {
      transform: scale(1.05);
    }
  }

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 0;
  }
}

.event-image-container {
  position: relative;
  height: 100%;
  min-height: 250px;
  overflow: hidden;

  @media (max-width: 768px) {
    min-height: 200px;
  }
}

.event-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.event-overlay {
  position: absolute;
  top: 1rem;
  left: 1rem;
  right: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  flex-wrap: wrap;
  gap: 0.5rem;
}

.event-type-badge {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  padding: 0.4rem 0.8rem;
  border-radius: 20px;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: capitalize;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);

  &.type-webinar {
    background: rgba(29, 24, 122, 0.8);
    color: #ded5bf;
  }

  &.type-reunion {
    background: rgba(98, 126, 135, 0.8);
    color: #ded5bf;
  }

  &.type-retiro {
    background: rgba(0, 46, 38, 0.8);
    color: #ded5bf;
  }

  &.type-taller {
    background: rgba(96, 65, 48, 0.8);
    color: #ded5bf;
  }

  &.type-conferencia {
    background: rgba(180, 163, 253, 0.8);
    color: #1d187a;
  }

  i {
    font-size: 0.7rem;
  }
}

.event-price-badge {
  padding: 0.4rem 0.8rem;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 700;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);

  &:not(.free) {
    background: rgba(222, 213, 191, 0.9);
    color: #1d187a;
  }

  &.free {
    background: rgba(0, 46, 38, 0.8);
    color: #ded5bf;
  }
}

.event-content {
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1.25rem;

  @media (max-width: 768px) {
    padding: 1rem;
  }
}

.event-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  gap: 1rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(207, 206, 211, 0.1);

  @media (max-width: 768px) {
    flex-direction: column;
    gap: 0.75rem;
  }
}

.event-date-info {
  flex: 1;
}

.date-primary {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  color: rgba(222, 213, 191, 0.95);
  font-size: 0.9rem;
  font-weight: 600;
  margin-bottom: 0.5rem;
  text-transform: capitalize;

  i {
    color: rgba(29, 24, 122, 0.8);
    font-size: 0.85rem;
  }
}

.time-duration {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  font-size: 0.8rem;
  color: rgba(192, 186, 183, 0.8);

  @media (max-width: 480px) {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.25rem;
  }
}

.event-time {
  display: flex;
  align-items: center;
  gap: 0.4rem;

  i {
    color: rgba(159, 190, 200, 0.6);
    font-size: 0.75rem;
  }
}

.event-duration {
  color: rgba(96, 65, 48, 0.8);
  font-style: italic;
}

.organizer-info {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.organizer-avatar-container {
  position: relative;
}

.organizer-avatar {
  width: 40px;
  height: 40px;
  border-radius: 50%;
  border: 2px solid rgba(29, 24, 122, 0.3);
  object-fit: cover;
}

.organizer-details {
  display: flex;
  flex-direction: column;
  gap: 0.2rem;
}

.organizer-name {
  margin: 0;
  font-size: 0.85rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
}

.organizer-role {
  font-size: 0.7rem;
  color: rgba(192, 186, 183, 0.7);
  text-transform: uppercase;
  letter-spacing: 0.5px;
}

.event-text {
  flex: 1;
}

.event-titulo {
  margin: 0 0 0.75rem 0;
  font-size: 1.2rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
  line-height: 1.3;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.event-descripcion {
  margin: 0;
  color: rgba(192, 186, 183, 0.8) !important;
  font-size: 0.875rem;
  line-height: 1.5;
  display: -webkit-box !important;
  -webkit-line-clamp: 3;
  line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.event-details {
  display: flex;
  flex-wrap: wrap;
  gap: 1rem;
  padding: 0.75rem 0;
  border-top: 1px solid rgba(207, 206, 211, 0.1);
  border-bottom: 1px solid rgba(207, 206, 211, 0.1);

  @media (max-width: 480px) {
    flex-direction: column;
    gap: 0.5rem;
  }
}

.detail-item {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-size: 0.8rem;
  color: rgba(192, 186, 183, 0.8);

  i {
    color: rgba(98, 126, 135, 0.6);
    font-size: 0.75rem;
    width: 12px;
  }
}

.discipline-tag {
  padding: 0.3rem 0.75rem;
  border-radius: 15px;
  color: white;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: capitalize;
}

.event-actions {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  flex-wrap: wrap;

  @media (max-width: 480px) {
    .primary-btn {
      flex: 1;
    }
  }
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.6rem 1rem;
  border: 1px solid;
  border-radius: 20px;
  font-size: 0.8rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;
  text-decoration: none;

  &.primary-btn {
    background: linear-gradient(
      135deg,
      rgba(0, 46, 38, 0.8),
      rgba(29, 24, 122, 0.8)
    );
    border-color: rgba(0, 46, 38, 0.5);
    color: #ded5bf;

    &:hover {
      background: linear-gradient(
        135deg,
        rgba(0, 46, 38, 1),
        rgba(29, 24, 122, 1)
      );
      border-color: rgba(0, 46, 38, 0.8);
      transform: translateY(-1px);
      box-shadow: 0 4px 15px rgba(0, 46, 38, 0.3);
    }
  }

  &.secondary-btn {
    background: transparent;
    border-color: rgba(98, 126, 135, 0.3);
    color: rgba(192, 186, 183, 0.8);

    &:hover {
      background: rgba(98, 126, 135, 0.1);
      border-color: rgba(98, 126, 135, 0.5);
      color: rgba(222, 213, 191, 0.9);
    }
  }

  &.icon-btn {
    background: transparent;
    border-color: rgba(207, 206, 211, 0.2);
    color: rgba(192, 186, 183, 0.7);
    padding: 0.6rem;
    min-width: 40px;
    justify-content: center;

    &:hover {
      background: rgba(180, 163, 253, 0.1);
      border-color: rgba(180, 163, 253, 0.3);
      color: #b4a3fd;
    }

    span {
      display: none;
    }
  }

  i {
    font-size: 0.75rem;
  }
}

@media (max-width: 768px) {
  .events-container {
    padding: 1rem;
  }

  .events-list {
    gap: 1.5rem;
  }

  .event-card {
    grid-template-columns: 1fr;
  }

  .event-titulo {
    font-size: 1.1rem;
  }

  .event-descripcion {
    font-size: 0.8rem;
    -webkit-line-clamp: 2;
    line-clamp: 2;
  }
}

@media (max-width: 480px) {
  .event-image-container {
    min-height: 180px;
  }

  .event-overlay {
    top: 0.5rem;
    left: 0.5rem;
    right: 0.5rem;
  }

  .event-type-badge,
  .event-price-badge {
    font-size: 0.65rem;
    padding: 0.3rem 0.6rem;
  }

  .organizer-info {
    align-self: flex-start;
  }

  .action-btn:not(.primary-btn) {
    padding: 0.5rem;

    span {
      display: none;
    }
  }
}

.container-header {
  text-align: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(180, 163, 253, 0.1);

  h3 {
    color: #b4a3fd;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    font-size: 1.3rem;
  }

  p {
    color: rgba(192, 186, 183, 0.7) !important;
    margin: 0;
    font-size: 0.9rem;
    font-style: italic;
    display: block !important;
  }
}

.articles-container {
  border: 1px solid rgba(207, 206, 211, 0.2);
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.08) 0%,

    rgba(192, 186, 183, 0.05) 50%,

    rgba(98, 126, 135, 0.06) 100%
  );
  backdrop-filter: blur(15px);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.3);
}

.articles-header {
  text-align: center;
  margin-bottom: 2rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(98, 126, 135, 0.2);

  h3 {
    color: #b4a3fd;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    font-size: 1.3rem;
  }

  p {
    color: rgba(192, 186, 183, 0.8) !important;
    margin: 0;
    font-size: 0.9rem;
    font-style: italic;
    display: block !important;
  }
}

.articles-list {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(350px, 1fr));
  gap: 1.5rem;

  @media (max-width: 768px) {
    grid-template-columns: 1fr;
    gap: 1rem;
  }
}

.article-card {
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.08) 0%,

    rgba(207, 206, 211, 0.05) 50%,

    rgba(96, 65, 48, 0.08) 100%
  );
  border: 1px solid rgba(207, 206, 211, 0.2);
  border-radius: 16px;
  overflow: hidden;
  transition: all 0.3s ease;
  cursor: pointer;
  backdrop-filter: blur(12px);
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    height: 3px;
    background: linear-gradient(
      90deg,
      rgba(98, 126, 135, 0.6),
      rgba(180, 163, 253, 0.6),
      rgba(0, 46, 38, 0.6)
    );
    opacity: 0;
    transition: opacity 0.3s ease;
  }

  &:hover {
    border-color: rgba(98, 126, 135, 0.4);
    box-shadow: 0 12px 40px rgba(98, 126, 135, 0.15);
    transform: translateY(-4px);

    &::before {
      opacity: 1;
    }

    .article-image {
      transform: scale(1.05);
    }
  }
}

.article-image-container {
  position: relative;
  height: 200px;
  overflow: hidden;
}

.article-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.article-overlay {
  position: absolute;
  top: 1rem;
  left: 1rem;
  right: 1rem;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.discipline-badge {
  padding: 0.4rem 0.8rem;
  border-radius: 20px;
  color: white;
  font-size: 0.75rem;
  font-weight: 600;
  text-transform: capitalize;
  backdrop-filter: blur(10px);
  border: 1px solid rgba(255, 255, 255, 0.2);
}

.article-status {
  padding: 0.3rem 0.6rem;
  border-radius: 12px;
  font-size: 0.7rem;
  font-weight: 600;
  text-transform: capitalize;
  backdrop-filter: blur(10px);

  &.status-publicado {
    background: rgba(0, 46, 38, 0.8);
    color: #ded5bf;
    border: 1px solid rgba(0, 46, 38, 0.3);
  }

  &.status-borrador {
    background: rgba(96, 65, 48, 0.8);
    color: #ded5bf;
    border: 1px solid rgba(96, 65, 48, 0.3);
  }

  &.status-archivado {
    background: rgba(192, 186, 183, 0.8);
    color: #1d187a;
    border: 1px solid rgba(192, 186, 183, 0.3);
  }
}

.article-content {
  padding: 1.5rem;
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.article-author {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(207, 206, 211, 0.1);
}

.author-avatar-container {
  position: relative;
}

.author-avatar {
  width: 45px;
  height: 45px;
  border-radius: 50%;
  border: 2px solid rgba(98, 126, 135, 0.3);
  object-fit: cover;
}

.author-info {
  flex: 1;
}

.author-name {
  margin: 0 0 0.25rem 0;
  font-size: 0.9rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
}

.author-details {
  display: flex;
  align-items: center;
  gap: 1rem;
  font-size: 0.75rem;
}

.author-rating {
  display: flex;
  align-items: center;
  gap: 0.25rem;
  color: rgba(98, 126, 135, 0.8);

  i {
    color: #b4a3fd;
    font-size: 0.7rem;
  }
}

.author-specialties {
  color: rgba(192, 186, 183, 0.7);
  text-transform: capitalize;
  font-style: italic;
}

.article-text {
  flex: 1;
}

.article-titulo {
  margin: 0 0 0.75rem 0;
  font-size: 1.1rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
  line-height: 1.3;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.article-resumen {
  margin: 0;
  color: rgba(192, 186, 183, 0.8) !important;
  font-size: 0.875rem;
  line-height: 1.5;
  display: -webkit-box !important;
  -webkit-line-clamp: 3;
  line-clamp: 3;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.article-metadata {
  padding: 0.75rem 0;
  border-top: 1px solid rgba(207, 206, 211, 0.1);
  border-bottom: 1px solid rgba(207, 206, 211, 0.1);
}

.metadata-row {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.75rem;
  color: rgba(192, 186, 183, 0.7);
}

.publish-date,
.reading-time {
  display: flex !important;
  align-items: center;
  gap: 0.4rem;
  color: rgba(192, 186, 183, 0.8) !important;

  i {
    font-size: 0.7rem;
    color: rgba(98, 126, 135, 0.6);
  }

  span {
    display: inline !important;
  }
}

.article-actions {
  display: flex;
  align-items: center;
  justify-content: space-between;
  gap: 1rem;
}

.action-btn {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  padding: 0.5rem 0.75rem;
  background: transparent;
  border: 1px solid rgba(98, 126, 135, 0.2);
  border-radius: 20px;
  color: rgba(192, 186, 183, 0.7);
  font-size: 0.8rem;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: rgba(98, 126, 135, 0.1);
    border-color: rgba(98, 126, 135, 0.4);
    color: rgba(222, 213, 191, 0.9);
  }

  &.like-btn:hover {
    background: rgba(180, 163, 253, 0.1);
    border-color: rgba(180, 163, 253, 0.3);
    color: #b4a3fd;
  }

  i {
    font-size: 0.75rem;
  }
}

.action-stat {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  font-size: 0.8rem;
  color: rgba(192, 186, 183, 0.6);

  i {
    font-size: 0.75rem;
    color: rgba(98, 126, 135, 0.5);
  }
}

.read-more-btn {
  display: flex;
  align-items: center;
  gap: 0.4rem;
  padding: 0.6rem 1rem;
  background: linear-gradient(
    135deg,
    rgba(85, 79, 195, 0.1),
    rgba(0, 46, 38, 0.1)
  );
  border: 1px solid rgba(180, 163, 253, 0.2);
  border-radius: 20px;
  color: rgba(222, 213, 191, 0.9);
  font-size: 0.8rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.3s ease;

  &:hover {
    background: linear-gradient(
      135deg,
      rgba(29, 24, 122, 0.2),
      rgba(0, 46, 38, 0.15)
    );
    border-color: rgba(180, 163, 253, 0.2);
    transform: translateX(2px);
  }

  i {
    font-size: 0.7rem;
    transition: transform 0.3s ease;
  }

  &:hover i {
    transform: translateX(3px);
  }
}

@media (max-width: 768px) {
  .articles-container {
    padding: 1rem;
  }

  .articles-list {
    grid-template-columns: 1fr;
    gap: 1rem;
  }

  .article-content {
    padding: 1rem;
    gap: 0.75rem;
  }

  .article-titulo {
    font-size: 1rem;
  }

  .article-resumen {
    font-size: 0.8rem;
    -webkit-line-clamp: 2;
    line-clamp: 2;
  }

  .article-actions {
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .read-more-btn {
    order: -1;
    width: 100%;
    justify-content: center;
  }
}

@media (max-width: 480px) {
  .article-image-container {
    height: 180px;
  }

  .article-overlay {
    top: 0.5rem;
    left: 0.5rem;
    right: 0.5rem;
  }

  .discipline-badge,
  .article-status {
    font-size: 0.65rem;
    padding: 0.3rem 0.6rem;
  }

  .author-details {
    flex-direction: column;
    align-items: flex-start;
    gap: 0.25rem;
  }

  .metadata-row {
    flex-direction: column;
    gap: 0.5rem;
    align-items: flex-start;
  }
}

.appointments-container {
  border: 1px solid rgba(222, 213, 191, 0.3);
  background: linear-gradient(
    145deg,
    rgba(222, 213, 191, 0.08) 0%,

    rgba(192, 186, 183, 0.05) 50%,

    rgba(96, 65, 48, 0.06) 100%
  );
  backdrop-filter: blur(12px);
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
}

.container-header {
  text-align: center;
  margin-bottom: 1.5rem;
  padding-bottom: 1rem;
  border-bottom: 1px solid rgba(222, 213, 191, 0.2);

  h3 {
    color: #b4a3fd;
    font-weight: 600;
    margin: 0 0 0.5rem 0;
    font-size: 1.1rem;
  }

  p {
    color: rgba(192, 186, 183, 0.8);
    margin: 0;
    font-size: 0.8rem;
    font-style: italic;
  }
}

.appointments-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-height: 400px;
  overflow-y: auto;
  padding-right: 4px;

  &::-webkit-scrollbar {
    width: 4px;
  }

  &::-webkit-scrollbar-track {
    background: rgba(222, 213, 191, 0.1);
    border-radius: 2px;
  }

  &::-webkit-scrollbar-thumb {
    background: rgba(98, 126, 135, 0.4);
    border-radius: 2px;

    &:hover {
      background: rgba(98, 126, 135, 0.6);
    }
  }
}

.appointment-card {
  background: linear-gradient(
    135deg,
    rgba(207, 206, 211, 0.08) 0%,

    rgba(222, 213, 191, 0.05) 100%
  );
  border: 1px solid rgba(207, 206, 211, 0.2);
  border-radius: 12px;
  padding: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);

  &:hover {
    border-color: rgba(222, 213, 191, 0.4);
    box-shadow: 0 4px 15px rgba(222, 213, 191, 0.1);
    transform: translateY(-1px);
  }
}

.appointment-header {
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
  margin-bottom: 0.75rem;
}

.bruja-info {
  display: flex;
  align-items: center;
  gap: 0.6rem;
  flex: 1;
}

.bruja-avatar {
  width: 32px;
  height: 32px;
  border-radius: 50%;
  border: 1px solid rgba(98, 126, 135, 0.3);
  object-fit: cover;
}

.bruja-details {
  flex: 1;
  min-width: 0;
}

.bruja-name {
  margin: 0 0 0.2rem 0;
  font-size: 0.8rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
  white-space: nowrap;
  overflow: hidden;
  text-overflow: ellipsis;
}

.appointment-price {
  font-size: 0.7rem;
  color: rgba(230, 207, 195, 0.8);
  font-weight: 500;
}

.appointment-status {
  padding: 0.3rem 0.6rem;
  border-radius: 12px;
  font-size: 0.65rem;
  font-weight: 600;
  text-transform: capitalize;

  &.estado-pendiente {
    background: rgba(207, 215, 47, 0.2);
    color: rgba(210, 217, 135, 0.9);
    border: 1px solid rgba(222, 213, 191, 0.3);
  }

  &.estado-confirmada {
    background: rgba(21, 163, 83, 0.25);
    color: rgba(152, 216, 146, 0.95);
    border: 1px solid rgba(98, 126, 135, 0.4);
  }

  &.estado-completada {
    background: rgba(87, 178, 209, 0.2);
    color: rgba(141, 181, 194, 0.9);
    border: 1px solid rgba(98, 126, 135, 0.3);
  }

  &.estado-cancelada {
    background: rgba(201, 55, 79, 0.2);
    color: rgba(211, 110, 122, 0.9);
    border: 1px solid rgba(180, 163, 253, 0.3);
  }
}

.appointment-info {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  font-size: 0.7rem;
}

.date-time {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.appointment-date,
.appointment-time {
  display: flex;
  align-items: center;
  gap: 0.3rem;
  color: rgba(192, 186, 183, 0.8);

  i {
    color: rgba(98, 126, 135, 0.6);
    font-size: 0.65rem;
  }
}

.method-rating {
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.appointment-method {
  display: flex;
  align-items: center;
  gap: 0.3rem;
  color: rgba(192, 186, 183, 0.8);
  text-transform: capitalize;

  i {
    color: rgba(29, 24, 122, 0.6);
    font-size: 0.65rem;
  }
}

.rating {
  display: flex;
  gap: 0.15rem;

  i {
    font-size: 0.6rem;
    color: rgba(222, 213, 191, 0.3);

    &.active {
      color: rgba(222, 213, 191, 0.9);
    }
  }
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem 1rem;
  text-align: center;

  i {
    font-size: 2.5rem;
    color: rgba(192, 186, 183, 0.4);
    margin-bottom: 1rem;
  }

  p {
    margin: 0 0 0.5rem 0;
    color: rgba(192, 186, 183, 0.8);
    font-size: 0.85rem;
    font-weight: 500;
  }

  .empty-subtitle {
    color: rgba(192, 186, 183, 0.6);
    font-size: 0.75rem;
    font-style: italic;
  }
}

.courses-container {
  border: 1px solid rgba(98, 126, 135, 0.3);
  background: linear-gradient(
    145deg,
    rgba(98, 126, 135, 0.08) 0%,

    rgba(29, 24, 122, 0.05) 50%,

    rgba(0, 46, 38, 0.06) 100%
  );
  backdrop-filter: blur(12px);
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
}

.courses-container {
  border: 1px solid rgba(98, 126, 135, 0.3);
  background: linear-gradient(
    145deg,
    rgba(98, 126, 135, 0.08) 0%,

    rgba(29, 24, 122, 0.05) 50%,

    rgba(180, 163, 253, 0.06) 100%
  );
  backdrop-filter: blur(12px);
  box-shadow: 0 6px 25px rgba(0, 0, 0, 0.2);
}

.courses-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  max-height: 450px;
  overflow-y: auto;
  padding-right: 4px;

  &::-webkit-scrollbar {
    width: 4px;
  }

  &::-webkit-scrollbar-track {
    background: rgba(98, 126, 135, 0.1);
    border-radius: 2px;
  }

  &::-webkit-scrollbar-thumb {
    background: rgba(180, 163, 253, 0.4);
    border-radius: 2px;

    &:hover {
      background: rgba(180, 163, 253, 0.6);
    }
  }
}

.course-card {
  display: grid;
  grid-template-columns: 80px 1fr;
  gap: 0.75rem;
  background: linear-gradient(
    135deg,
    rgba(207, 206, 211, 0.06) 0%,

    rgba(222, 213, 191, 0.04) 100%
  );
  border: 1px solid rgba(98, 126, 135, 0.2);
  border-radius: 12px;
  padding: 0.75rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(8px);

  &:hover {
    border-color: rgba(180, 163, 253, 0.4);
    box-shadow: 0 4px 15px rgba(180, 163, 253, 0.1);
    transform: translateY(-1px);
  }
}

.course-image-container {
  position: relative;
  height: 60px;
  border-radius: 8px;
  overflow: hidden;
}

.course-image {
  width: 100%;
  height: 100%;
  object-fit: cover;
  transition: transform 0.3s ease;
}

.course-overlay {
  position: absolute;
  top: 0.25rem;
  left: 0.25rem;
  right: 0.25rem;
  display: flex;
  justify-content: space-between;
  align-items: flex-start;
}

.course-level {
  padding: 0.15rem 0.4rem;
  border-radius: 8px;
  font-size: 0.6rem;
  font-weight: 600;
  text-transform: capitalize;
  backdrop-filter: blur(8px);

  &.nivel-principiante {
    background: rgba(98, 126, 135, 0.8);
    color: #ded5bf;
  }

  &.nivel-intermedio {
    background: rgba(222, 213, 191, 0.8);
    color: #1d187a;
  }

  &.nivel-avanzado {
    background: rgba(180, 163, 253, 0.8);
    color: #1d187a;
  }
}

.course-type {
  padding: 0.15rem;
  background: rgba(29, 24, 122, 0.8);
  border-radius: 6px;
  backdrop-filter: blur(8px);

  i {
    font-size: 0.6rem;
    color: #ded5bf;
  }
}

.course-content {
  display: flex;
  flex-direction: column;
  gap: 0.5rem;
  min-width: 0;
}

.course-header {
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
}

.course-title {
  margin: 0;
  font-size: 0.8rem;
  font-weight: 600;
  color: rgba(222, 213, 191, 0.95);
  line-height: 1.2;
  display: -webkit-box;
  -webkit-line-clamp: 2;
  line-clamp: 2;
  -webkit-box-orient: vertical;
  overflow: hidden;
}

.course-discipline {
  align-self: flex-start;
  padding: 0.15rem 0.5rem;
  border-radius: 10px;
  color: white;
  font-size: 0.6rem;
  font-weight: 600;
  text-transform: capitalize;
}

.course-progress {
  display: flex;
  flex-direction: column;
  gap: 0.3rem;
}

.progress-info {
  display: flex;
  justify-content: space-between;
  align-items: center;
  font-size: 0.65rem;
}

.progress-percentage {
  color: rgba(222, 213, 191, 0.9);
  font-weight: 600;
}

.progress-status {
  padding: 0.15rem 0.4rem;
  border-radius: 8px;
  font-size: 0.6rem;
  font-weight: 600;
  text-transform: uppercase;

  &.progreso-en-curso {
    background: rgba(87, 178, 209, 0.2);
    color: rgba(141, 181, 194, 0.9);
    border: 1px solid rgba(98, 126, 135, 0.3);
  }

  &.progreso-completado {
    background: rgba(21, 163, 83, 0.25);
    color: rgba(152, 216, 146, 0.95);
    border: 1px solid rgba(98, 126, 135, 0.4);
  }

  &.progreso-pendiente {
    background: rgba(207, 215, 47, 0.2);
    color: rgba(210, 217, 135, 0.9);
    border: 1px solid rgba(222, 213, 191, 0.3);
  }
}

.progress-bar {
  width: 100%;
  height: 4px;
  background: rgba(192, 186, 183, 0.3);
  border-radius: 2px;
  overflow: hidden;
}

.progress-fill {
  height: 100%;
  background: linear-gradient(
    90deg,
    rgba(98, 126, 135, 0.8),
    rgba(180, 163, 253, 0.8)
  );
  border-radius: 2px;
  transition: width 0.3s ease;
}

.course-meta {
  display: flex;
  flex-wrap: wrap;
  gap: 0.5rem;
  font-size: 0.6rem;
  color: rgba(192, 186, 183, 0.8);
}

.course-duration,
.last-access {
  display: flex;
  align-items: center;
  gap: 0.2rem;

  i {
    color: rgba(98, 126, 135, 0.6);
    font-size: 0.55rem;
  }
}

.course-price {
  padding: 0.1rem 0.3rem;
  background: rgba(96, 65, 48, 0.2);
  color: rgba(222, 213, 191, 0.9);
  border-radius: 6px;
  font-weight: 600;
}

.course-subscription {
  padding: 0.1rem 0.3rem;
  background: rgba(180, 163, 253, 0.2);
  color: rgba(29, 24, 122, 0.9);
  border-radius: 6px;
  font-weight: 600;
}

@media (max-width: 1024px) {
  .course-card {
    padding: 0.6rem;
    gap: 0.6rem;
  }

  .course-title {
    font-size: 0.75rem;
  }

  .course-meta {
    font-size: 0.55rem;
  }
}

@media (max-width: 768px) {
  .courses-list {
    max-height: 350px;
  }

  .course-card {
    grid-template-columns: 70px 1fr;
  }

  .course-image-container {
    height: 50px;
  }

  .course-title {
    -webkit-line-clamp: 1;
    line-clamp: 1;
  }
}

.empty-state {
  display: flex;
  flex-direction: column;
  align-items: center;
  justify-content: center;
  padding: 2rem 1rem;
  text-align: center;

  i {
    font-size: 2.5rem;
    color: rgba(98, 126, 135, 0.4);
    margin-bottom: 1rem;
  }

  p {
    margin: 0 0 0.5rem 0;
    color: rgba(192, 186, 183, 0.8);
    font-size: 0.85rem;
    font-weight: 500;
  }

  .empty-subtitle {
    color: rgba(192, 186, 183, 0.6);
    font-size: 0.75rem;
    font-style: italic;
  }
}

@media (max-width: 1024px) {
  .container-header {
    h3 {
      font-size: 1rem;
    }

    p {
      font-size: 0.75rem;
    }
  }

  .appointment-card {
    padding: 0.8rem;
  }

  .bruja-name {
    font-size: 0.75rem;
  }

  .appointment-price,
  .appointment-info {
    font-size: 0.65rem;
  }
}

@media (max-width: 768px) {
  .appointments-list {
    max-height: 300px;
  }

  .empty-state {
    padding: 1.5rem 0.5rem;

    i {
      font-size: 2rem;
    }

    p {
      font-size: 0.8rem;
    }

    .empty-subtitle {
      font-size: 0.7rem;
    }
  }
}

@media (max-width: 768px) {
  .sidebar-content {
    display: none;
  }

  .main-content {
    width: 100%;
  }

  .content-grid {
    grid-template-columns: 1fr !important;
  }

  .home-container {
    padding: 0.5rem;
  }

  .home-header {
    h1 {
      font-size: 1.5rem;
    }

    p {
      font-size: 0.9rem;
    }
  }

  .content-container {
    min-height: 100px;

    h3 {
      font-size: 1.1rem;
    }

    p {
      font-size: 0.8rem;
    }
  }

  .comments-section {
    padding: 0.75rem;
  }

  .comment-author-info {
    gap: 0.5rem;
  }

  .comment-avatar {
    width: 32px;
    height: 32px;
  }

  .comment-bubble {
    padding: 0.75rem 0.875rem;
    border-radius: 14px;
  }

  .comment-author-name {
    font-size: 0.75rem;
  }

  .comment-zodiac {
    font-size: 0.65rem;
  }

  .comment-text {
    font-size: 0.8rem;
  }

  .comment-replies {
    margin-left: 2.5rem;
  }

  .reply-avatar {
    width: 24px;
    height: 24px;
  }

  .reply-bubble {
    padding: 0.6rem 0.75rem;
    border-radius: 12px;
  }

  .reply-author-name {
    font-size: 0.7rem;
  }

  .reply-text {
    font-size: 0.75rem;
  }

  .comment-input-container {
    gap: 0.5rem;
  }

  .input-avatar {
    width: 32px;
    height: 32px;
  }

  .comment-input {
    font-size: 0.8rem;
    padding: 0.6rem 0.875rem;
    min-height: 40px;
  }

  .comment-submit-btn {
    min-width: 40px;
    min-height: 40px;
    padding: 0.6rem;

    i {
      font-size: 0.8rem;
    }
  }

  .show-more-comments-btn {
    padding: 0.5rem 1rem;
    font-size: 0.75rem;
  }

  .show-more-replies-content {
    font-size: 0.65rem;
  }

  .comments-empty {
    padding: 2rem 1rem;

    i {
      font-size: 2rem;
    }

    p {
      font-size: 0.85rem;
    }

    span {
      font-size: 0.75rem;
    }
  }
}

@media (max-width: 480px) {
  .comment-metadata {
    gap: 0.75rem;
    flex-wrap: wrap;
  }

  .comment-like-btn,
  .comment-reply-btn {
    padding: 0.3rem 0.4rem;
    font-size: 0.65rem;

    i {
      font-size: 0.6rem;
    }

    span {
      font-size: 0.6rem;
    }
  }

  .reply-metadata {
    gap: 0.5rem;
    flex-wrap: wrap;
  }

  .reply-like-btn,
  .reply-reply-btn {
    padding: 0.25rem 0.35rem;
    font-size: 0.6rem;

    i {
      font-size: 0.55rem;
    }

    span {
      font-size: 0.55rem;
    }
  }

  .comment-input-wrapper {
    flex-direction: column;
    gap: 0.5rem;
  }

  .comment-submit-btn {
    align-self: flex-end;
  }
}

@media (max-width: 768px) {
  .comment-input-container {
    gap: 0.5rem;
  }

  .comment-input-wrapper {
    width: 100%;
    min-width: 0;
  }

  .comment-input {
    width: 100%;
    min-width: 0;
    font-size: 0.8rem;
    padding: 0.6rem 0.875rem;
    min-height: 40px;

    resize: none;
    max-height: 100px;
  }

  .comment-submit-btn {
    min-width: 40px;
    min-height: 40px;
    padding: 0.6rem;

    flex-shrink: 0;

    i {
      font-size: 0.8rem;
    }
  }
}

@media (max-width: 480px) {
  .comment-input-wrapper {
    flex-direction: row;
    gap: 0.5rem;
    width: 100%;
    align-items: flex-end;
  }

  .comment-input {
    flex: 1;
    width: 100%;
    box-sizing: border-box;
    min-height: 44px;
    padding: 0.75rem 1rem;
    font-size: 0.85rem;
    border-radius: 18px;
  }

  .comment-submit-btn {
    flex-shrink: 0;
    min-width: 44px;
    min-height: 44px;
    padding: 0.75rem;

    i {
      font-size: 0.85rem;
    }
  }

  .input-avatar {
    width: 34px;
    height: 34px;
  }
}

@media (max-width: 360px) {
  .comment-input-container {
    gap: 0.4rem;
  }

  .comment-input {
    min-height: 46px;
    padding: 0.8rem 1rem;
    font-size: 0.9rem;
  }

  .comment-submit-btn {
    min-width: 46px;
    min-height: 46px;
    padding: 0.8rem;

    i {
      font-size: 0.9rem;
    }
  }
}

@media (max-width: 768px) {
  .comment-input:focus {
    outline: none;
    border-color: rgba(180, 163, 253, 0.5);
    background: linear-gradient(
      135deg,
      rgba(222, 213, 191, 0.15) 0%,
      rgba(207, 206, 211, 0.1) 100%
    );
    box-shadow: 0 0 0 3px rgba(180, 163, 253, 0.15);
    transform: none;
  }

  .comment-input::placeholder {
    color: rgba(192, 186, 183, 0.6);
    font-style: italic;
  }

  .comment-input-section {
    border-top: 1px solid rgba(180, 163, 253, 0.1);
    padding-top: 1rem;
    margin-top: 0.5rem;
  }
}

@media (hover: none) and (pointer: coarse) {
  .comment-submit-btn {
    min-width: 44px;
    min-height: 44px;

    transform: scale(1);
    transition: transform 0.15s ease, background 0.15s ease;
  }

  .comment-submit-btn:active {
    transform: scale(0.95);
    background: linear-gradient(
      135deg,
      rgba(180, 163, 253, 0.4),
      rgba(98, 126, 135, 0.25)
    );
  }
}

@media (max-width: 768px) {
  .load-more-container {
    display: flex;
    justify-content: center;
    margin-top: 1.5rem;
    padding: 1.5rem 1rem 3rem 1rem;

    position: relative;
    z-index: 10;

    margin-bottom: 2rem;
  }

  .load-more-btn {
    padding: 0.875rem 1.5rem;
    font-size: 0.85rem;

    min-height: 48px;
    width: auto;
    max-width: 280px;
  }

  .comments-section {
    padding: 0.75rem;
    margin-bottom: 1rem;
  }

  .comment-input-section {
    border-top: 1px solid rgba(180, 163, 253, 0.1);
    padding-top: 1rem;
    margin-top: 0.5rem;

    max-width: 100%;
    overflow: hidden;
  }
}

@media (max-width: 480px) {
  .load-more-container {
    margin-top: 1rem;
    padding: 1rem 0.75rem 4rem 0.75rem;
    margin-bottom: 3rem;
  }

  .load-more-btn {
    padding: 0.75rem 1.25rem;
    font-size: 0.8rem;
    min-height: 44px;

    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.3);
  }

  .post-card {
    margin-bottom: 1rem;
  }

  .posts-list .post-card:last-child {
    margin-bottom: 2rem;
  }
}

@media (max-width: 360px) {
  .load-more-container {
    padding: 1rem 0.5rem 5rem 0.5rem;
    margin-bottom: 4rem;
  }

  .load-more-btn {
    font-size: 0.75rem;
    padding: 0.7rem 1rem;
    min-height: 42px;
  }
}

@media (min-width: 769px) and (max-width: 1024px) {
  .content-grid {
    grid-template-columns: 3fr 2fr;
  }

  .comment-replies {
    margin-left: 2.75rem;
  }

  .comment-avatar {
    width: 34px;
    height: 34px;
  }

  .reply-avatar {
    width: 26px;
    height: 26px;
  }

  .comment-input {
    font-size: 0.85rem;
  }
}



================================================
File: app/features/home/home.component.ts
================================================
import { Component, OnInit, signal } from '@angular/core';
import { CommonModule } from '@angular/common';
import { Articulo, Bruja, Cita, CommentReply, CursoConProgreso, Evento, FilterOption, Organizador, Post, PostAuthor, PostComment, CommentAuthor, Disciplina } from './home-interfaces';

@Component({
  selector: 'app-home',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './home.component.html',
  styleUrl: './home.component.scss'
})
export class HomeComponent implements OnInit {

  // Signals para manejar el estado
  posts = signal<Post[]>([]);
  articulos = signal<Articulo[]>([]);
  eventos = signal<Evento[]>([]);
  citas = signal<Cita[]>([]);
  cursosConProgreso = signal<CursoConProgreso[]>([]);
  isLoading = signal<boolean>(false);
  activeFilter = signal<'posts' | 'articles' | 'events'>('posts');

  // Opciones de filtro
  filterOptions: FilterOption[] = [
    {
      value: 'posts',
      label: 'Posts',
      icon: 'fas fa-comments'
    },
    {
      value: 'articles',
      label: 'Artículos',
      icon: 'fas fa-scroll'
    },
    {
      value: 'events',
      label: 'Eventos',
      icon: 'fas fa-calendar-alt'
    }
  ];

  constructor() { }

  ngOnInit(): void {
    console.log('Home Component iniciado');
    this.loadInitialPosts();
    this.loadInitialArticulos();
    this.loadInitialEventos();
    this.loadInitialCitas();
    this.loadInitialCursos();
  }

  // Cambiar filtro activo
  setActiveFilter(filter: 'posts' | 'articles' | 'events'): void {
    this.activeFilter.set(filter);
    console.log(`Filtro cambiado a: ${filter}`);
    
    // Aquí puedes cargar datos específicos según el filtro
    switch(filter) {
      case 'posts':
        this.loadPosts();
        break;
      case 'articles':
        this.loadArticles();
        break;
      case 'events':
        this.loadEvents();
        break;
    }
  }

  // Cargar posts iniciales (simulados)
  loadInitialPosts(): void {
    const mockPosts: Post[] = [
      {
        id: '1',
        author: {
          id: '1',
          name: 'Luna Mística',
          avatar: 'https://ix-marketing.imgix.net/focalpoint.png?auto=format,compress&w=1678',
          zodiacSign: '♓ Piscis',
          isOnline: true
        },
        content: 'Las energías de esta luna llena en Escorpio nos invitan a una profunda transformación. Es momento de soltar lo que ya no nos sirve y abrazar nuestro poder interior.',
        image: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=500&h=300&fit=crop',
        createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000), // Hace 2 horas
        likes: 24,
        comments: 0, // Se calculará dinámicamente
        isLiked: false,
        showComments: false,
        showAllComments: false,
        postComments: [
          {
            id: 'c1',
            author: {
              id: '4',
              name: 'Astro Sage',
              avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♊ Géminis',
              isOnline: true
            },
            content: '¡Exactamente! Esta energía escorpiana es perfecta para el trabajo de sombras y la liberación emocional. Gracias por recordárnoslo <i class="hgi-stroke hgi-praying-hands"></i>',
            createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000),
            likes: 5,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r1',
                author: {
                  id: '1',
                  name: 'Luna Mística',
                  avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♓ Piscis'
                },
                content: 'Así es, hermano del aire. Es momento de mergirse en las profundidades del ser <i class="hgi-stroke hgi-sparkles"></i>',
                createdAt: new Date(Date.now() - 45 * 60 * 1000),
                likes: 2,
                isLiked: true
              },
              {
                id: 'r2',
                author: {
                  id: '5',
                  name: 'Mystic Rose',
                  avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♏ Escorpio'
                },
                content: 'Como escorpiana, siento estas energías muy intensas. Perfect timing para mi ritual de renovación <i class="hgi-stroke hgi-moon-02"></i>',
                createdAt: new Date(Date.now() - 30 * 60 * 1000),
                likes: 3,
                isLiked: false
              },
              {
                id: 'r3',
                author: {
                  id: '11',
                  name: 'Shadow Walker',
                  avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♏ Escorpio'
                },
                content: 'Los scorpios estamos sintiendo esta energía desde hace días. Es momento de enfrentar nuestras sombras <i class="hgi-stroke hgi-bug-01"></i>',
                createdAt: new Date(Date.now() - 25 * 60 * 1000),
                likes: 7,
                isLiked: false
              }
            ]
          },
          {
            id: 'c2',
            author: {
              id: '6',
              name: 'Crystal Witch',
              avatar: 'https://images.unsplash.com/photo-1534528741775-53994a69daeb?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♍ Virgo'
            },
            content: 'He preparado un altar especial con obsidiana y granate para esta luna. ¿Alguien más está trabajando con piedras oscuras?',
            createdAt: new Date(Date.now() - 30 * 60 * 1000),
            likes: 8,
            isLiked: true,
            showAllReplies: false,
            replies: [
              {
                id: 'r4',
                author: {
                  id: '7',
                  name: 'Stone Guardian',
                  avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♑ Capricornio'
                },
                content: 'Turmalina negra y cuarzo ahumado aquí! Perfectos para la transmutación <i class="hgi-stroke hgi-diamond-01"></i>',
                createdAt: new Date(Date.now() - 20 * 60 * 1000),
                likes: 4,
                isLiked: false
              },
              {
                id: 'r5',
                author: {
                  id: '12',
                  name: 'Earth Mother',
                  avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♉ Tauro'
                },
                content: 'Labradorita para la protección psíquica y hematita para el grounding. Esta combinación me tiene muy centrada <i class="hgi-stroke hgi-earth"></i>',
                createdAt: new Date(Date.now() - 18 * 60 * 1000),
                likes: 6,
                isLiked: true
              }
            ]
          },
          {
            id: 'c3',
            author: {
              id: '8',
              name: 'Lunar Oracle',
              avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♋ Cáncer'
            },
            content: 'Hermosa reflexión. Las cartas me han estado hablando de transformación toda la semana <i class="hgi-stroke hgi-star"></i>',
            createdAt: new Date(Date.now() - 15 * 60 * 1000),
            likes: 3,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r6',
                author: {
                  id: '13',
                  name: 'Tarot Mystic',
                  avatar: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♓ Piscis'
                },
                content: 'A mí me salió La Torre tres veces esta semana. Definitivamente algo grande se viene <i class="hgi-stroke hgi-lightning-01"></i>',
                createdAt: new Date(Date.now() - 12 * 60 * 1000),
                likes: 9,
                isLiked: true
              }
            ]
          },
          {
            id: 'c4',
            author: {
              id: '14',
              name: 'Moon Dancer',
              avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♌ Leo',
              isOnline: true
            },
            content: 'Perfecto momento para un baño de luna con sal marina y aceites esenciales. Cleansing total! <i class="hgi-stroke hgi-bathtub-01"></i><i class="hgi-stroke hgi-moon-02"></i>',
            createdAt: new Date(Date.now() - 10 * 60 * 1000),
            likes: 12,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r7',
                author: {
                  id: '15',
                  name: 'Sea Witch',
                  avatar: 'https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♓ Piscis'
                },
                content: '¡Sal del Mar Muerto + lavanda + romero! Mi combo favorito para limpiezas energéticas profundas <i class="hgi-stroke hgi-salt"></i>',
                createdAt: new Date(Date.now() - 8 * 60 * 1000),
                likes: 5,
                isLiked: false
              }
            ]
          },
          {
            id: 'c5',
            author: {
              id: '16',
              name: 'Cosmic Dreamer',
              avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♒ Acuario'
            },
            content: 'Mis sueños han estado súper vívidos desde que empezó esta fase lunar. Alguien más está experimentando sueños proféticos? <i class="hgi-stroke hgi-shooting-star"></i>',
            createdAt: new Date(Date.now() - 5 * 60 * 1000),
            likes: 15,
            isLiked: true,
            showAllReplies: false,
            replies: []
          },
          {
            id: 'c6',
            author: {
              id: '27',
              name: 'Shadow Healer',
              avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♏ Escorpio'
            },
            content: 'Esta luna está perfecta para trabajar con el shadow work. He estado journaling sobre patrones que necesito liberar <i class="hgi-stroke hgi-note-03"></i><i class="hgi-stroke hgi-sparkles"></i>',
            createdAt: new Date(Date.now() - 3 * 60 * 1000),
            likes: 19,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r16',
                author: {
                  id: '28',
                  name: 'Inner Work',
                  avatar: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♍ Virgo'
                },
                content: 'El journaling es tan poderoso para el shadow work. ¿Usas alguna técnica específica? <i class="hgi-stroke hgi-edit-02"></i>',
                createdAt: new Date(Date.now() - 2 * 60 * 1000),
                likes: 4,
                isLiked: true
              }
            ]
          },
          {
            id: 'c7',
            author: {
              id: '29',
              name: 'Ritual Queen',
              avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♌ Leo',
              isOnline: true
            },
            content: 'Preparando mi ritual de liberación para esta noche. Velas negras, incienso de copal y mis intenciones bien claras <i class="hgi-stroke hgi-candle-02"></i>',
            createdAt: new Date(Date.now() - 1 * 60 * 1000),
            likes: 25,
            isLiked: true,
            showAllReplies: false,
            replies: []
          }
        ]
      },
      {
        id: '2',
        author: {
          id: '2',
          name: 'Sage Astral',
          avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face',
          zodiacSign: '♌ Leo'
        },
        content: 'Terminé mi primera lectura de tarot de la semana y las cartas hablan de nuevos comienzos. El Loco me salió en posición central... ¿alguien más siente estas energías de cambio? <i class="hgi-stroke hgi-magic-wand-01"></i>',
        createdAt: new Date(Date.now() - 5 * 60 * 60 * 1000), // Hace 5 horas
        likes: 47,
        comments: 0, // Se calculará dinámicamente
        isLiked: true,
        showComments: false,
        showAllComments: false,
        postComments: [
          {
            id: 'c6',
            author: {
              id: '9',
              name: 'Tarot Master',
              avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♐ Sagitario'
            },
            content: 'El Loco es mi carta favorita! Representa el coraje de dar el salto hacia lo desconocido. ¿Qué otras cartas acompañaron esta lectura?',
            createdAt: new Date(Date.now() - 4 * 60 * 60 * 1000),
            likes: 12,
            isLiked: true,
            showAllReplies: false,
            replies: [
              {
                id: 'r8',
                author: {
                  id: '2',
                  name: 'Sage Astral',
                  avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♌ Leo'
                },
                content: 'Salieron La Estrella y El Sol! Una combinación muy poderosa de esperanza y éxito <i class="hgi-stroke hgi-sun-03"></i><i class="hgi-stroke hgi-star"></i>',
                createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000),
                likes: 8,
                isLiked: false
              },
              {
                id: 'r9',
                author: {
                  id: '17',
                  name: 'Card Reader',
                  avatar: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♊ Géminis'
                },
                content: '¡Qué combinación más hermosa! El Loco + La Estrella + El Sol = nuevo ciclo lleno de bendiciones <i class="hgi-stroke hgi-sparkles"></i>',
                createdAt: new Date(Date.now() - 2.5 * 60 * 60 * 1000),
                likes: 15,
                isLiked: true
              }
            ]
          },
          {
            id: 'c7',
            author: {
              id: '18',
              name: 'Arcana Wisdom',
              avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♍ Virgo',
              isOnline: true
            },
            content: 'El Loco en posición central sugiere que estás en el momento perfecto para comenzar una nueva aventura espiritual. Trust the process! <i class="hgi-stroke hgi-theater"></i>',
            createdAt: new Date(Date.now() - 3.5 * 60 * 60 * 1000),
            likes: 22,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r10',
                author: {
                  id: '19',
                  name: 'Journey Seeker',
                  avatar: 'https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♈ Aries'
                },
                content: 'Totalmente de acuerdo. El Loco nos recuerda que a veces hay que saltar sin red para encontrar nuestro verdadero camino <i class="hgi-stroke hgi-star"></i>',
                createdAt: new Date(Date.now() - 3 * 60 * 60 * 1000),
                likes: 11,
                isLiked: false
              }
            ]
          },
          {
            id: 'c8',
            author: {
              id: '20',
              name: 'Mystic Guide',
              avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♓ Piscis'
            },
            content: 'Yo también he sentido estas energías de cambio! Mis cartas han estado muy "chatty" últimamente, como si quisieran contarme todos los secretos del universo <i class="hgi-stroke hgi-square-arrow-data-transfer-diagonal"></i>',
            createdAt: new Date(Date.now() - 2 * 60 * 60 * 1000),
            likes: 18,
            isLiked: true,
            showAllReplies: false,
            replies: [
              {
                id: 'r11',
                author: {
                  id: '21',
                  name: 'Oracle Speaker',
                  avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♌ Leo'
                },
                content: '¡Sí! Es como si el velo entre dimensiones estuviera más delgado estos días. Mis lecturas han sido súper precisas <i class="hgi-stroke hgi-diamond-01"></i>',
                createdAt: new Date(Date.now() - 1.5 * 60 * 60 * 1000),
                likes: 14,
                isLiked: true
              },
              {
                id: 'r12',
                author: {
                  id: '22',
                  name: 'Intuition Master',
                  avatar: 'https://images.unsplash.com/photo-1500648767791-00dcc994a43e?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♏ Escorpio'
                },
                content: 'Definitivamente hay algo en el aire cósmico. Mis clientes han estado recibiendo mensajes muy profundos <i class="hgi-stroke hgi-shooting-star"></i>',
                createdAt: new Date(Date.now() - 1 * 60 * 60 * 1000),
                likes: 9,
                isLiked: false
              }
            ]
          },
          {
            id: 'c9',
            author: {
              id: '23',
              name: 'Cosmic Leo',
              avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♌ Leo',
              isOnline: true
            },
            content: 'Como fellow Leo, totally feeling this energy! Nuestro signo está siendo super activado por estas energías de renovación <i class="hgi-stroke hgi-lion"></i><i class="hgi-stroke hgi-sparkles"></i>',
            createdAt: new Date(Date.now() - 45 * 60 * 1000),
            likes: 13,
            isLiked: false,
            showAllReplies: false,
            replies: []
          }
        ]
      },
      {
        id: '3',
        author: {
          id: '3',
          name: 'Crystal Healer',
          avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',
          zodiacSign: '♍ Virgo'
        },
        content: 'Sesión de meditación matutina completada <i class="hgi-stroke hgi-yoga-03"></i> Los cristales de amatista han estado vibrando con una energía increíble últimamente. ¿Alguien más lo ha notado?',
        tags: ['#meditación', '#cristales', '#amatista'],
        createdAt: new Date(Date.now() - 24 * 60 * 60 * 1000), // Hace 1 día
        likes: 12,
        comments: 0, // Se calculará dinámicamente
        isLiked: false,
        showComments: false,
        showAllComments: false,
        postComments: [
          {
            id: 'c10',
            author: {
              id: '10',
              name: 'Amethyst Dream',
              avatar: 'https://images.unsplash.com/photo-1544005313-94ddf0286df2?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♒ Acuario'
            },
            content: '¡Sí! Mis amatistas también han estado muy activas. Creo que están ayudando con la transición energética del planeta <i class="hgi-stroke hgi-heart-add"></i>',
            createdAt: new Date(Date.now() - 20 * 60 * 60 * 1000),
            likes: 5,
            isLiked: false,
            showAllReplies: false,
            replies: [
              {
                id: 'r13',
                author: {
                  id: '24',
                  name: 'Purple Mystic',
                  avatar: 'https://images.unsplash.com/photo-1517841905240-472988babdf9?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♓ Piscis'
                },
                content: 'La amatista es perfecta para estos tiempos de cambio. Su vibración nos ayuda a mantener la claridad mental <i class="hgi-stroke hgi-diamond-01"></i>',
                createdAt: new Date(Date.now() - 18 * 60 * 60 * 1000),
                likes: 8,
                isLiked: true
              }
            ]
          },
          {
            id: 'c11',
            author: {
              id: '25',
              name: 'Meditation Master',
              avatar: 'https://images.unsplash.com/photo-1494790108755-2616b612b786?w=40&h=40&fit=crop&crop=face',
              zodiacSign: '♌ Leo'
            },
            content: 'Hermosa práctica! Yo combino amatista con cuarzo rosa para equilibrar el corazón y la mente durante mis meditaciones <i class="hgi-stroke hgi-heart-check"></i>',
            createdAt: new Date(Date.now() - 19 * 60 * 60 * 1000),
            likes: 11,
            isLiked: true,
            showAllReplies: false,
            replies: [
              {
                id: 'r14',
                author: {
                  id: '26',
                  name: 'Heart Chakra',
                  avatar: 'https://images.unsplash.com/photo-1529626455594-4ff0802cfb7e?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♎ Libra'
                },
                content: '¡Qué combinación más hermosa! El cuarzo rosa abre el corazón y la amatista eleva la consciencia. Perfect balance <i class="hgi-stroke hgi-scale-01"></i><i class="hgi-stroke hgi-diamond-01"></i>',
                createdAt: new Date(Date.now() - 17 * 60 * 60 * 1000),
                likes: 7,
                isLiked: false
              },
              {
                id: 'r15',
                author: {
                  id: '3',
                  name: 'Crystal Healer',
                  avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=40&h=40&fit=crop&crop=face',
                  zodiacSign: '♍ Virgo'
                },
                content: '¡Exacto! Esa combinación es una de mis favoritas. Voy a probarla en mi próxima sesión <i class="hgi-stroke hgi-praying-hands"></i>',
                createdAt: new Date(Date.now() - 16 * 60 * 60 * 1000),
                likes: 6,
                isLiked: true
              }
            ]
          }
        ]
      }
    ];

    // Calcular el total de comentarios para cada post
    mockPosts.forEach(post => {
      post.comments = this.getTotalCommentsCount(post);
    });

    this.posts.set(mockPosts);
  }

  // Cargar artículos iniciales (simulados con datos exactos de la BD)
  loadInitialArticulos(): void {
    const mockArticulos: Articulo[] = [
      {
        id: '550e8400-e29b-41d4-a716-446655440001',
        bruja_id: '550e8400-e29b-41d4-a716-446655440010',
        titulo: 'Los Secretos de la Luna Llena en Escorpio',
        resumen: 'Descubre cómo esta poderosa luna llena puede transformar tu vida espiritual y emocional.',
        contenido: 'La luna llena en Escorpio trae consigo energías intensas de transformación y renacimiento. Durante este periodo, las emociones se intensifican y los secretos salen a la luz...',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440020',
        imagen_destacada: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=600&h=400&fit=crop',
        slug: 'secretos-luna-llena-escorpio',
        estado: 'publicado',
        fecha_publicacion: new Date('2024-01-15T10:30:00Z'),
        visualizaciones: 1250,
        me_gusta: 89,
        fecha_creacion: new Date('2024-01-10T08:00:00Z'),
        fecha_modificacion: new Date('2024-01-15T10:30:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440002',
        bruja_id: '550e8400-e29b-41d4-a716-446655440011',
        titulo: 'Cristales para la Protección Energética',
        resumen: 'Una guía completa sobre los cristales más poderosos para proteger tu aura y energía personal.',
        contenido: 'Los cristales han sido utilizados durante milenios para la protección energética. En este artículo exploraremos las propiedades de la turmalina negra, la obsidiana y el cuarzo ahumado...',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440021',
        imagen_destacada: 'https://images.unsplash.com/photo-1518281361980-b26bfd556770?w=600&h=400&fit=crop',
        slug: 'cristales-proteccion-energetica',
        estado: 'publicado',
        fecha_publicacion: new Date('2024-01-12T14:20:00Z'),
        visualizaciones: 890,
        me_gusta: 67,
        fecha_creacion: new Date('2024-01-08T16:45:00Z'),
        fecha_modificacion: new Date('2024-01-12T14:20:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440003',
        bruja_id: '550e8400-e29b-41d4-a716-446655440010',
        titulo: 'Interpretación Avanzada del Tarot: El Arcano Mayor',
        resumen: 'Profundiza en los secretos de los 22 Arcanos Mayores y su significado en las tiradas contemporáneas.',
        contenido: 'Los Arcanos Mayores representan el viaje del alma a través de la vida. Cada carta cuenta una historia, desde El Loco hasta El Mundo, simbolizando diferentes etapas de crecimiento espiritual...',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440022',
        imagen_destacada: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=600&h=400&fit=crop',
        slug: 'interpretacion-avanzada-tarot-arcano-mayor',
        estado: 'publicado',
        fecha_publicacion: new Date('2024-01-08T09:15:00Z'),
        visualizaciones: 2100,
        me_gusta: 156,
        fecha_creacion: new Date('2024-01-05T11:30:00Z'),
        fecha_modificacion: new Date('2024-01-08T09:15:00Z')
      }
    ];

    this.articulos.set(mockArticulos);
  }

  // Cargar eventos iniciales (simulados con datos exactos de la BD)
  loadInitialEventos(): void {
    const mockEventos: Evento[] = [
      {
        id: '550e8400-e29b-41d4-a716-446655440050',
        titulo: 'Ritual de Luna Llena: Liberación y Manifestación',
        descripcion: 'Únete a este poderoso ritual de luna llena donde aprenderás técnicas ancestrales de liberación de energías negativas y manifestación de deseos. Incluye meditación guiada, trabajo con cristales y creación de agua lunar.',
        fecha_inicio: new Date('2024-02-15T19:00:00Z'),
        fecha_fin: new Date('2024-02-15T21:30:00Z'),
        ubicacion: 'Jardín Místico - Centro Holístico Arcana',
        url_evento: 'https://zoom.us/j/1234567890',
        organizador_id: '550e8400-e29b-41d4-a716-446655440100',
        tipo_evento: 'retiro',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440020',
        precio: 45.00,
        cupo_maximo: 20,
        imagen_evento: 'https://images.unsplash.com/photo-1506905925346-21bda4d32df4?w=600&h=400&fit=crop',
        publico: true,
        activo: true,
        fecha_creacion: new Date('2024-01-10T10:00:00Z'),
        fecha_modificacion: new Date('2024-01-15T14:30:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440051',
        titulo: 'Webinar: Introducción al Tarot para Principiantes',
        descripcion: 'Descubre los fundamentos del Tarot en este webinar interactivo. Aprenderás sobre los 78 arcanos, cómo hacer tu primera tirada y conectar con la energía de las cartas. Incluye PDF descargable.',
        fecha_inicio: new Date('2024-02-20T18:00:00Z'),
        fecha_fin: new Date('2024-02-20T20:00:00Z'),
        ubicacion: '',
        url_evento: 'https://zoom.us/j/0987654321',
        organizador_id: '550e8400-e29b-41d4-a716-446655440101',
        tipo_evento: 'webinar',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440022',
        precio: 25.00,
        cupo_maximo: 50,
        imagen_evento: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=600&h=400&fit=crop',
        publico: true,
        activo: true,
        fecha_creacion: new Date('2024-01-08T16:20:00Z'),
        fecha_modificacion: new Date('2024-01-12T09:45:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440052',
        titulo: 'Taller: Sanación con Cristales y Chakras',
        descripcion: 'Aprende a trabajar con la energía de los cristales para equilibrar tus chakras. Este taller práctico incluye kit de cristales básicos, técnicas de limpieza energética y meditaciones específicas para cada chakra.',
        fecha_inicio: new Date('2024-02-25T10:00:00Z'),
        fecha_fin: new Date('2024-02-25T16:00:00Z'),
        ubicacion: 'Sala de Sanación - Centro Arcana, Piso 2',
        url_evento: '',
        organizador_id: '550e8400-e29b-41d4-a716-446655440102',
        tipo_evento: 'taller',
        disciplina_id: '550e8400-e29b-41d4-a716-446655440021',
        precio: 85.00,
        cupo_maximo: 15,
        imagen_evento: 'https://images.unsplash.com/photo-1518281361980-b26bfd556770?w=600&h=400&fit=crop',
        publico: true,
        activo: true,
        fecha_creacion: new Date('2024-01-05T12:15:00Z'),
        fecha_modificacion: new Date('2024-01-18T11:20:00Z')
      }
    ];

    this.eventos.set(mockEventos);
  }

  // Cargar citas iniciales (simuladas con datos exactos de la BD)
  loadInitialCitas(): void {
    const mockCitas: Cita[] = [
      {
        id: '550e8400-e29b-41d4-a716-446655440070',
        bruja_id: '550e8400-e29b-41d4-a716-446655440010',
        usuario_id: '550e8400-e29b-41d4-a716-446655440200', // Usuario actual
        fecha_hora_inicio: new Date('2024-01-20T15:00:00Z'),
        fecha_hora_fin: new Date('2024-01-20T16:00:00Z'),
        estado: 'completada',
        metodo: 'zoom',
        url_reunion: 'https://zoom.us/j/1234567890',
        precio_acordado: 65.00,
        notas_bruja: 'Lectura de tarot sobre decisiones de carrera',
        notas_usuario: 'Consulta muy reveladora, muy satisfecho',
        calificacion_bruja: 5,
        comentario_calificacion: 'Excelente lectura, muy precisa y empática',
        fecha_creacion: new Date('2024-01-15T10:30:00Z'),
        fecha_modificacion: new Date('2024-01-20T16:05:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440071',
        bruja_id: '550e8400-e29b-41d4-a716-446655440011',
        usuario_id: '550e8400-e29b-41d4-a716-446655440200',
        fecha_hora_inicio: new Date('2024-02-28T18:30:00Z'),
        fecha_hora_fin: new Date('2024-02-28T19:30:00Z'),
        estado: 'confirmada',
        metodo: 'presencial',
        url_reunion: '',
        precio_acordado: 80.00,
        notas_bruja: '',
        notas_usuario: 'Consulta sobre sanación energética',
        calificacion_bruja: null,
        comentario_calificacion: '',
        fecha_creacion: new Date('2024-02-20T14:20:00Z'),
        fecha_modificacion: new Date('2024-02-25T11:15:00Z')
      },
      {
        id: '550e8400-e29b-41d4-a716-446655440072',
        bruja_id: '550e8400-e29b-41d4-a716-446655440010',
        usuario_id: '550e8400-e29b-41d4-a716-446655440200',
        fecha_hora_inicio: new Date('2024-01-05T14:00:00Z'),
        fecha_hora_fin: new Date('2024-01-05T15:00:00Z'),
        estado: 'completada',
        metodo: 'jitsi',
        url_reunion: 'https://meet.jit.si/consulta-arcana-123',
        precio_acordado: 70.00,
        notas_bruja: 'Primera consulta, excelente conexión energética',
        notas_usuario: 'Mi primera experiencia con lecturas, superó expectativas',
        calificacion_bruja: 4,
        comentario_calificacion: 'Muy buena orientación espiritual',
        fecha_creacion: new Date('2023-12-28T09:45:00Z'),
        fecha_modificacion: new Date('2024-01-05T15:10:00Z')
      }
    ];

    this.citas.set(mockCitas);
  }

  // Cargar cursos con progreso iniciales (simulados con datos exactos de la BD)
  loadInitialCursos(): void {
    const mockCursosConProgreso: CursoConProgreso[] = [
      {
        curso: {
          id: '550e8400-e29b-41d4-a716-446655440080',
          titulo: 'Fundamentos del Tarot: De Principiante a Lector',
          descripcion: 'Aprende a leer las cartas del tarot desde cero, incluyendo significados, tiradas y interpretación intuitiva.',
          disciplina_id: '550e8400-e29b-41d4-a716-446655440022', // tarot
          nivel: 'principiante',
          tipo_contenido: 'video',
          imagen_portada: 'https://images.unsplash.com/photo-1578662996442-48f60103fc96?w=300&h=200&fit=crop',
          duracion_total_minutos: 480, // 8 horas
          solo_suscripcion: false,
          precio_individual: 89.99,
          activo: true,
          orden_visualizacion: 1,
          fecha_creacion: new Date('2023-11-15T10:00:00Z'),
          fecha_modificacion: new Date('2024-01-10T14:30:00Z')
        },
        progreso: {
          porcentaje_completado: 100,
          estado: 'completada',
          fecha_ultimo_acceso: new Date('2024-01-25T16:45:00Z'),
          fecha_completado: new Date('2024-01-25T16:45:00Z')
        }
      },
      {
        curso: {
          id: '550e8400-e29b-41d4-a716-446655440081',
          titulo: 'Cristales y Chakras: Sanación Energética',
          descripcion: 'Descubre cómo usar cristales para equilibrar tus chakras y mejorar tu bienestar energético.',
          disciplina_id: '550e8400-e29b-41d4-a716-446655440021', // cristales
          nivel: 'intermedio',
          tipo_contenido: 'video',
          imagen_portada: 'https://images.unsplash.com/photo-1518281361980-b26bfd556770?w=300&h=200&fit=crop',
          duracion_total_minutos: 360, // 6 horas
          solo_suscripcion: true,
          precio_individual: 0.00,
          activo: true,
          orden_visualizacion: 2,
          fecha_creacion: new Date('2024-01-05T09:20:00Z'),
          fecha_modificacion: new Date('2024-02-01T11:15:00Z')
        },
        progreso: {
          porcentaje_completado: 65,
          estado: 'en_progreso',
          fecha_ultimo_acceso: new Date('2024-02-20T19:30:00Z'),
          fecha_completado: null
        }
      },
      {
        curso: {
          id: '550e8400-e29b-41d4-a716-446655440082',
          titulo: 'Astrología Básica: Tu Carta Natal',
          descripcion: 'Interpreta tu carta natal y comprende cómo los astros influyen en tu personalidad y destino.',
          disciplina_id: '550e8400-e29b-41d4-a716-446655440020', // astrologia
          nivel: 'principiante',
          tipo_contenido: 'video',
          imagen_portada: 'https://images.unsplash.com/photo-1502134249126-9f3755a50d78?w=300&h=200&fit=crop',
          duracion_total_minutos: 540, // 9 horas
          solo_suscripcion: false,
          precio_individual: 129.99,
          activo: true,
          orden_visualizacion: 3,
          fecha_creacion: new Date('2024-01-20T13:45:00Z'),
          fecha_modificacion: new Date('2024-02-15T10:20:00Z')
        },
        progreso: {
          porcentaje_completado: 25,
          estado: 'en_progreso',
          fecha_ultimo_acceso: new Date('2024-02-18T20:15:00Z'),
          fecha_completado: null
        }
      }
    ];

    this.cursosConProgreso.set(mockCursosConProgreso);
  }

  // Obtener información de bruja por artículo (simulado)
  getBrujaInfo(bruja_id: string): Bruja {
    const brujas: { [key: string]: Bruja } = {
      '550e8400-e29b-41d4-a716-446655440010': {
        id: '550e8400-e29b-41d4-a716-446655440010',
        usuario_id: '550e8400-e29b-41d4-a716-446655440100',
        biografia: 'Maestra en artes místicas con 15 años de experiencia',
        especialidades: ['astrologia', 'tarot'],
        calificacion_promedio: 4.8,
        total_consultas: 245,
        nombre: 'Luna',
        apellido: 'Silvestra',
        avatar_url: 'https://www.allprodad.com/wp-content/uploads/2021/03/05-12-21-happy-people.jpg',
        signo_zodiacal: 'piscis'
      },
      '550e8400-e29b-41d4-a716-446655440011': {
        id: '550e8400-e29b-41d4-a716-446655440011',
        usuario_id: '550e8400-e29b-41d4-a716-446655440101',
        biografia: 'Sanadora energética especializada en cristales',
        especialidades: ['cristales', 'reiki'],
        calificacion_promedio: 4.9,
        total_consultas: 189,
        nombre: 'Minerva',
        apellido: 'Cristalina',
        avatar_url: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=60&h=60&fit=crop&crop=face',
        signo_zodiacal: 'virgo'
      }
    };

    return brujas[bruja_id] || brujas['550e8400-e29b-41d4-a716-446655440010'];
  }

  // Obtener información de disciplina por artículo (simulado)
  getDisciplinaInfo(disciplina_id: string): Disciplina {
    const disciplinas: { [key: string]: Disciplina } = {
      '550e8400-e29b-41d4-a716-446655440020': {
        id: '550e8400-e29b-41d4-a716-446655440020',
        nombre: 'astrologia',
        descripcion: 'Estudio de la influencia de los astros',
        color_hex: '#4B0082'
      },
      '550e8400-e29b-41d4-a716-446655440021': {
        id: '550e8400-e29b-41d4-a716-446655440021',
        nombre: 'cristales',
        descripcion: 'Propiedades energéticas de minerales',
        color_hex: '#9370DB'
      },
      '550e8400-e29b-41d4-a716-446655440022': {
        id: '550e8400-e29b-41d4-a716-446655440022',
        nombre: 'tarot',
        descripcion: 'Lectura e interpretación de cartas del tarot',
        color_hex: '#8B4513'
      }
    };

    return disciplinas[disciplina_id] || disciplinas['550e8400-e29b-41d4-a716-446655440020'];
  }

  // Obtener información de organizador por evento (simulado)
  getOrganizadorInfo(organizador_id: string): Organizador {
    const organizadores: { [key: string]: Organizador } = {
      '550e8400-e29b-41d4-a716-446655440100': {
        id: '550e8400-e29b-41d4-a716-446655440100',
        nombre: 'Luna',
        apellido: 'Silvestra',
        avatar_url: 'https://ix-marketing.imgix.net/focalpoint.png?auto=format,compress&w=1678',
        email: 'luna.silvestra@arcana.com',
        signo_zodiacal: 'piscis'
      },
      '550e8400-e29b-41d4-a716-446655440101': {
        id: '550e8400-e29b-41d4-a716-446655440101',
        nombre: 'Sage',
        apellido: 'Moonheart',
        avatar_url: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=60&h=60&fit=crop&crop=face',
        email: 'sage.moonheart@arcana.com',
        signo_zodiacal: 'leo'
      },
      '550e8400-e29b-41d4-a716-446655440102': {
        id: '550e8400-e29b-41d4-a716-446655440102',
        nombre: 'Minerva',
        apellido: 'Cristalina',
        avatar_url: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=60&h=60&fit=crop&crop=face',
        email: 'minerva.cristalina@arcana.com',
        signo_zodiacal: 'virgo'
      }
    };

    return organizadores[organizador_id] || organizadores['550e8400-e29b-41d4-a716-446655440100'];
  }

  // Calcular total de comentarios + respuestas
  getTotalCommentsCount(post: Post): number {
    let total = post.postComments.length; // Comentarios principales
    
    // Sumar todas las respuestas
    post.postComments.forEach(comment => {
      total += comment.replies.length;
    });
    
    return total;
  }

  // Actualizar contador de comentarios en un post
  updatePostCommentsCount(postId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          comments: this.getTotalCommentsCount(post)
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
  }

  // Método para formatear el tiempo relativo
  getRelativeTime(date: Date): string {
    const now = new Date();
    const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);
    
    if (diffInSeconds < 60) return 'Hace unos segundos';
    
    const diffInMinutes = Math.floor(diffInSeconds / 60);
    if (diffInMinutes < 60) return `Hace ${diffInMinutes} minuto${diffInMinutes > 1 ? 's' : ''}`;
    
    const diffInHours = Math.floor(diffInMinutes / 60);
    if (diffInHours < 24) return `Hace ${diffInHours} hora${diffInHours > 1 ? 's' : ''}`;
    
    const diffInDays = Math.floor(diffInHours / 24);
    return `Hace ${diffInDays} día${diffInDays > 1 ? 's' : ''}`;
  }

  // Formatear fecha de publicación
  getFormattedDate(date: Date): string {
    return new Intl.DateTimeFormat('es-ES', {
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    }).format(new Date(date));
  }

  // Calcular tiempo estimado de lectura basado en el contenido
  getEstimatedReadingTime(contenido: string): number {
    const wordsPerMinute = 200;
    const wordCount = contenido.split(' ').length;
    return Math.ceil(wordCount / wordsPerMinute);
  }

  // Formatear fecha y hora del evento
  getFormattedEventDate(fecha: Date): string {
    return new Intl.DateTimeFormat('es-ES', {
      weekday: 'long',
      day: 'numeric',
      month: 'long',
      year: 'numeric'
    }).format(new Date(fecha));
  }

  getFormattedEventTime(fecha: Date): string {
    return new Intl.DateTimeFormat('es-ES', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    }).format(new Date(fecha));
  }

  // Calcular duración del evento en horas
  getEventDuration(fecha_inicio: Date, fecha_fin: Date): string {
    const startTime = new Date(fecha_inicio).getTime();
    const endTime = new Date(fecha_fin).getTime();
    const diffMs = endTime - startTime;
    const diffHours = diffMs / (1000 * 60 * 60);
    
    if (diffHours < 1) {
      const diffMinutes = Math.round(diffMs / (1000 * 60));
      return `${diffMinutes} min`;
    } else if (diffHours === 1) {
      return '1 hora';
    } else {
      return `${diffHours.toFixed(1)} horas`;
    }
  }

  // Obtener icono por tipo de evento
  getEventTypeIcon(tipo_evento: string): string {
    const iconMap: { [key: string]: string } = {
      'webinar': 'fas fa-desktop',
      'reunion': 'fas fa-users',
      'retiro': 'fas fa-mountain',
      'taller': 'fas fa-tools',
      'conferencia': 'fas fa-microphone-alt'
    };
    
    return iconMap[tipo_evento] || 'fas fa-calendar-alt';
  }

  // Formatear fecha y hora para las citas
  getFormattedCitaDate(fecha: Date): string {
    return new Intl.DateTimeFormat('es-ES', {
      day: 'numeric',
      month: 'short',
      year: 'numeric'
    }).format(new Date(fecha));
  }

  getFormattedCitaTime(fecha: Date): string {
    return new Intl.DateTimeFormat('es-ES', {
      hour: '2-digit',
      minute: '2-digit',
      hour12: false
    }).format(new Date(fecha));
  }

  // Obtener icono por método de reunión
  getMetodoIcon(metodo: string): string {
    const iconMap: { [key: string]: string } = {
      'zoom': 'fas fa-video',
      'jitsi': 'fas fa-video',
      'phone': 'fas fa-phone',
      'presencial': 'fas fa-map-marker-alt'
    };
    
    return iconMap[metodo] || 'fas fa-calendar-alt';
  }

  // Obtener clase CSS por estado de cita
  getEstadoClass(estado: string): string {
    const classMap: { [key: string]: string } = {
      'pendiente': 'estado-pendiente',
      'confirmada': 'estado-confirmada',
      'cancelada': 'estado-cancelada',
      'completada': 'estado-completada'
    };
    
    return classMap[estado] || 'estado-pendiente';
  }

  // Formatear duración del curso
  getFormattedDuration(minutos: number): string {
    const horas = Math.floor(minutos / 60);
    const mins = minutos % 60;
    
    if (horas === 0) {
      return `${mins}min`;
    } else if (mins === 0) {
      return `${horas}h`;
    } else {
      return `${horas}h ${mins}min`;
    }
  }

  // Obtener clase CSS por nivel
  getNivelClass(nivel: string): string {
    const classMap: { [key: string]: string } = {
      'principiante': 'nivel-principiante',
      'intermedio': 'nivel-intermedio',
      'avanzado': 'nivel-avanzado'
    };
    
    return classMap[nivel] || 'nivel-principiante';
  }

  // Obtener clase CSS por estado de progreso
  getProgresoClass(estado: string): string {
    const classMap: { [key: string]: string } = {
      'pendiente': 'progreso-pendiente',
      'en_progreso': 'progreso-en-curso',
      'completada': 'progreso-completado'
    };
    
    return classMap[estado] || 'progreso-pendiente';
  }

  // Obtener icono por tipo de contenido
  getTipoContenidoIcon(tipo: string): string {
    const iconMap: { [key: string]: string } = {
      'video': 'fas fa-play-circle',
      'texto': 'fas fa-file-alt',
      'documento': 'fas fa-file-pdf',
      'audio': 'fas fa-volume-up'
    };
    
    return iconMap[tipo] || 'fas fa-play-circle';
  }

  // Formatear fecha de último acceso
  getFormattedLastAccess(fecha: Date): string {
    const now = new Date();
    const diffInDays = Math.floor((now.getTime() - fecha.getTime()) / (1000 * 60 * 60 * 24));
    
    if (diffInDays === 0) return 'Hoy';
    if (diffInDays === 1) return 'Ayer';
    if (diffInDays < 7) return `Hace ${diffInDays} días`;
    if (diffInDays < 30) return `Hace ${Math.floor(diffInDays / 7)} semanas`;
    return `Hace ${Math.floor(diffInDays / 30)} meses`;
  }

  // Manejar like de un post
  onPostLike(postId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          isLiked: !post.isLiked,
          likes: post.isLiked ? post.likes - 1 : post.likes + 1
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Post ${postId} ${currentPosts.find(p => p.id === postId)?.isLiked ? 'unliked' : 'liked'}`);
  }

  // Manejar comentario de un post
  onPostComment(postId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          showComments: !post.showComments
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Toggle comentarios para post ${postId}`);
  }

  // Manejar like de comentario
  onCommentLike(postId: string, commentId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        const updatedComments = post.postComments.map(comment => {
          if (comment.id === commentId) {
            return {
              ...comment,
              isLiked: !comment.isLiked,
              likes: comment.isLiked ? comment.likes - 1 : comment.likes + 1
            };
          }
          return comment;
        });
        
        return {
          ...post,
          postComments: updatedComments
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Comment ${commentId} ${currentPosts.find(p => p.id === postId)?.postComments.find(c => c.id === commentId)?.isLiked ? 'unliked' : 'liked'}`);
  }

  // Manejar like de respuesta
  onReplyLike(postId: string, commentId: string, replyId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        const updatedComments = post.postComments.map(comment => {
          if (comment.id === commentId) {
            const updatedReplies = comment.replies.map(reply => {
              if (reply.id === replyId) {
                return {
                  ...reply,
                  isLiked: !reply.isLiked,
                  likes: reply.isLiked ? reply.likes - 1 : reply.likes + 1
                };
              }
              return reply;
            });
            
            return {
              ...comment,
              replies: updatedReplies
            };
          }
          return comment;
        });
        
        return {
          ...post,
          postComments: updatedComments
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Reply ${replyId} liked/unliked`);
  }

  // Mostrar más comentarios
  onShowMoreComments(postId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        return {
          ...post,
          showAllComments: true
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Mostrar todos los comentarios para post ${postId}`);
  }

  // Mostrar más respuestas
  onShowMoreReplies(postId: string, commentId: string): void {
    const currentPosts = this.posts();
    const updatedPosts = currentPosts.map(post => {
      if (post.id === postId) {
        const updatedComments = post.postComments.map(comment => {
          if (comment.id === commentId) {
            return {
              ...comment,
              showAllReplies: true
            };
          }
          return comment;
        });
        
        return {
          ...post,
          postComments: updatedComments
        };
      }
      return post;
    });
    
    this.posts.set(updatedPosts);
    console.log(`Mostrar todas las respuestas para comentario ${commentId}`);
  }

  // Responder a un comentario
  onReplyToComment(postId: string, commentId: string): void {
    console.log(`Responder al comentario ${commentId} en post ${postId}`);
    // Aquí implementarías la lógica para abrir el modal/form de respuesta
  }

  // Obtener comentarios visibles (limitados)
  getVisibleComments(post: Post): PostComment[] {
    const limit = 2; // Mostrar solo 2 comentarios inicialmente
    return post.showAllComments ? post.postComments : post.postComments.slice(0, limit);
  }

  // Obtener respuestas visibles (limitadas)
  getVisibleReplies(comment: PostComment): CommentReply[] {
    const limit = 1; // Mostrar solo 1 respuesta inicialmente
    return comment.showAllReplies ? comment.replies : comment.replies.slice(0, limit);
  }

  // Verificar si hay más comentarios para mostrar
  hasMoreComments(post: Post): boolean {
    return !post.showAllComments && post.postComments.length > 2;
  }

  // Verificar si hay más respuestas para mostrar
  hasMoreReplies(comment: PostComment): boolean {
    return !comment.showAllReplies && comment.replies.length > 1;
  }

  // Contar comentarios restantes
  getRemainingCommentsCount(post: Post): number {
    const limit = 2;
    return Math.max(0, post.postComments.length - limit);
  }

  // Contar respuestas restantes
  getRemainingRepliesCount(comment: PostComment): number {
    const limit = 1;
    return Math.max(0, comment.replies.length - limit);
  }

  // Compartir post
  onPostShare(postId: string): void {
    console.log(`Compartir post ${postId}`);
    // Aquí implementarías la lógica para compartir
  }

  // Crear nuevo post
  onCreateNewPost(): void {
    console.log('Crear nuevo post');
    // Aquí implementarías la lógica para abrir el modal de crear post
  }

  // Cargar más posts
  onLoadMorePosts(): void {
    console.log('Cargar más posts');
    this.isLoading.set(true);
    
    // Simular carga de más posts
    setTimeout(() => {
      // Aquí harías la llamada a la API para cargar más posts
      console.log('Más posts cargados');
      this.isLoading.set(false);
    }, 1500);
  }

  // Manejar me_gusta de un artículo
  onArticuloLike(articuloId: string): void {
    const currentArticulos = this.articulos();
    const updatedArticulos = currentArticulos.map(articulo => {
      if (articulo.id === articuloId) {
        return {
          ...articulo,
          me_gusta: articulo.me_gusta + 1
        };
      }
      return articulo;
    });
    
    this.articulos.set(updatedArticulos);
    console.log(`Artículo ${articuloId} liked`);
  }

  // Incrementar visualizaciones de un artículo
  onArticuloView(articuloId: string): void {
    const currentArticulos = this.articulos();
    const updatedArticulos = currentArticulos.map(articulo => {
      if (articulo.id === articuloId) {
        return {
          ...articulo,
          visualizaciones: articulo.visualizaciones + 1
        };
      }
      return articulo;
    });
    
    this.articulos.set(updatedArticulos);
    console.log(`Artículo ${articuloId} viewed`);
  }

  // Compartir artículo
  onArticuloShare(slug: string): void {
    console.log(`Compartir artículo: ${slug}`);
    // Aquí implementarías la lógica para compartir
  }

  // Cargar más artículos
  onLoadMoreArticulos(): void {
    console.log('Cargar más artículos');
    this.isLoading.set(true);
    
    // Simular carga de más artículos
    setTimeout(() => {
      console.log('Más artículos cargados');
      this.isLoading.set(false);
    }, 1500);
  }

  // Manejar inscripción a un evento
  onEventoInscripcion(eventoId: string): void {
    console.log(`Inscribirse al evento: ${eventoId}`);
    // Aquí implementarías la lógica para inscribirse al evento
  }

  // Cargar más eventos
  onLoadMoreEventos(): void {
    console.log('Cargar más eventos');
    this.isLoading.set(true);
    
    // Simular carga de más eventos
    setTimeout(() => {
      console.log('Más eventos cargados');
      this.isLoading.set(false);
    }, 1500);
  }

  // Track by function para optimizar ngFor
  trackByPostId = (index: number, post: Post): string => {
    return post.id;
  };

  // Track by function para optimizar ngFor de comentarios
  trackByCommentId = (index: number, comment: PostComment): string => {
    return comment.id;
  };

  // Track by function para optimizar ngFor de respuestas
  trackByReplyId = (index: number, reply: CommentReply): string => {
    return reply.id;
  };

  // Track by function para optimizar ngFor de artículos
  trackByArticuloId = (index: number, articulo: Articulo): string => {
    return articulo.id;
  };

  // Track by function para optimizar ngFor de citas
  trackByCitaId = (index: number, cita: Cita): string => {
    return cita.id;
  };

  // Track by function para optimizar ngFor de cursos
  trackByCursoId = (index: number, cursoConProgreso: CursoConProgreso): string => {
    return cursoConProgreso.curso.id;
  };

  // Track by function para optimizar ngFor de eventos
  trackByEventoId = (index: number, evento: Evento): string => {
    return evento.id;
  };

  // Métodos que usaremos después para cargar datos reales de la BD
  loadPosts(): void {
    console.log('Cargando posts...');
    // Futura implementación para cargar posts
  }

  loadArticles(): void {
    console.log('Cargando artículos...');
    // Futura implementación para cargar artículos de la BD
    this.loadInitialArticulos();
  }

  loadEvents(): void {
    console.log('Cargando eventos...');
    // Futura implementación para cargar eventos de la BD
    this.loadInitialEventos();
  }

  loadAppointmentsHistory(): void {
    console.log('Cargando historial de citas...');
    // Futura implementación para cargar citas de la tabla 'citas'
    this.loadInitialCitas();
  }

  loadCurrentCourses(): void {
    console.log('Cargando talleres en curso...');
    // Futura implementación para cargar cursos en progreso del usuario
    this.loadInitialCursos();
  }
}





================================================
File: app/features/magia-esoterismo/magia-esoterismo.component.html
================================================
<p>magia-esoterismo works!</p>



================================================
File: app/features/magia-esoterismo/magia-esoterismo.component.scss
================================================



================================================
File: app/features/magia-esoterismo/magia-esoterismo.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-magia-esoterismo',
  imports: [],
  templateUrl: './magia-esoterismo.component.html',
  styleUrl: './magia-esoterismo.component.scss'
})
export class MagiaEsoterismoComponent {

}



================================================
File: app/features/tarot/tarot.component.html
================================================
<p>tarot works!</p>



================================================
File: app/features/tarot/tarot.component.scss
================================================



================================================
File: app/features/tarot/tarot.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-tarot',
  imports: [],
  templateUrl: './tarot.component.html',
  styleUrl: './tarot.component.scss'
})
export class TarotComponent {

}



================================================
File: app/features/tienda/tienda.component.html
================================================
<p>tienda works!</p>



================================================
File: app/features/tienda/tienda.component.scss
================================================



================================================
File: app/features/tienda/tienda.component.ts
================================================
import { Component } from '@angular/core';

@Component({
  selector: 'app-tienda',
  imports: [],
  templateUrl: './tienda.component.html',
  styleUrl: './tienda.component.scss'
})
export class TiendaComponent {

}



================================================
File: app/features/welcome/welcome-interfaces.ts
================================================
export interface Service {
  id: string;
  name: string;
  icon: string;
  description: string;
  features: string[];
}

export interface Testimonial {
  name: string;
  text: string;
  stars: number;
  specialty: string;
}

export interface TrustIndicators {
  members: string;
  rating: string;
}

export interface PricingInfo {
  amount: string;
  period: string;
  trial: string;
  cancellation: string;
}

export interface WelcomeData {
  title: string;
  description: string;
}

export interface FinalCTA {
  description: string;
  buttonText: string;
  disclaimer: string;
}


================================================
File: app/features/welcome/welcome-routing.module.ts
================================================
import { NgModule } from '@angular/core';
import { RouterModule, Routes } from '@angular/router';

const routes: Routes = [
  {
    path: '',
    loadComponent: () => import('./welcome/welcome.component').then(m => m.WelcomeComponent)
  }
];

@NgModule({
  imports: [RouterModule.forChild(routes)],
  exports: [RouterModule]
})
export class WelcomeRoutingModule { }



================================================
File: app/features/welcome/.DS_Store
================================================
[Non-text file]


================================================
File: app/features/welcome/welcome/welcome.component.html
================================================
<div
  class="min-h-screen w-full font-serif relative"
  style="background-color: #100820; color: #b4a2fd"
>
  <!-- Animated Stars Background -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <!-- Large Stars -->
    <div
      class="star large"
      style="top: 5%; left: 15%; animation-delay: 0s"
    ></div>
    <div
      class="star large"
      style="top: 12%; left: 85%; animation-delay: 1s"
    ></div>
    <div
      class="star large"
      style="top: 25%; left: 8%; animation-delay: 2s"
    ></div>
    <div
      class="star large"
      style="top: 35%; left: 92%; animation-delay: 1.5s"
    ></div>
    <div
      class="star large"
      style="top: 55%; left: 12%; animation-delay: 3s"
    ></div>
    <div
      class="star large"
      style="top: 70%; left: 88%; animation-delay: 2.5s"
    ></div>
    <div
      class="star large"
      style="top: 85%; left: 20%; animation-delay: 1.8s"
    ></div>
    <div
      class="star large"
      style="top: 95%; left: 75%; animation-delay: 0.7s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Medium Stars -->
    <div
      class="star medium"
      style="top: 8%; left: 45%; animation-delay: 0.5s"
    ></div>
    <div
      class="star medium"
      style="top: 15%; left: 60%; animation-delay: 2.5s"
    ></div>
    <div
      class="star medium"
      style="top: 22%; left: 25%; animation-delay: 1.3s"
    ></div>
    <div
      class="star medium"
      style="top: 30%; left: 70%; animation-delay: 3.2s"
    ></div>
    <div
      class="star medium"
      style="top: 40%; left: 35%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 48%; left: 80%; animation-delay: 2.1s"
    ></div>
    <div
      class="star medium"
      style="top: 58%; left: 25%; animation-delay: 1.6s"
    ></div>
    <div
      class="star medium"
      style="top: 65%; left: 65%; animation-delay: 2.8s"
    ></div>
    <div
      class="star medium"
      style="top: 75%; left: 45%; animation-delay: 0.4s"
    ></div>
    <div
      class="star medium"
      style="top: 82%; left: 55%; animation-delay: 2.3s"
    ></div>
    <div
      class="star medium"
      style="top: 90%; left: 40%; animation-delay: 1.9s"
    ></div>
    <div
      class="star medium"
      style="top: 97%; left: 85%; animation-delay: 3.1s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Small Stars -->
    <div
      class="star small"
      style="top: 3%; left: 30%; animation-delay: 1.2s"
    ></div>
    <div
      class="star small"
      style="top: 7%; left: 75%; animation-delay: 2.8s"
    ></div>
    <div
      class="star small"
      style="top: 13%; left: 50%; animation-delay: 0.3s"
    ></div>
    <div
      class="star small"
      style="top: 18%; left: 90%; animation-delay: 1.7s"
    ></div>
    <div
      class="star small"
      style="top: 28%; left: 5%; animation-delay: 2.4s"
    ></div>
    <div
      class="star small"
      style="top: 33%; left: 55%; animation-delay: 0.9s"
    ></div>
    <div
      class="star small"
      style="top: 38%; left: 20%; animation-delay: 2.6s"
    ></div>
    <div
      class="star small"
      style="top: 43%; left: 85%; animation-delay: 1.1s"
    ></div>
    <div
      class="star small"
      style="top: 52%; left: 40%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 62%; left: 75%; animation-delay: 0.6s"
    ></div>
    <div
      class="star small"
      style="top: 68%; left: 10%; animation-delay: 2.2s"
    ></div>
    <div
      class="star small"
      style="top: 78%; left: 85%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 88%; left: 15%; animation-delay: 2.7s"
    ></div>
    <div
      class="star small"
      style="top: 93%; left: 65%; animation-delay: 0.8s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 10%; left: 35%; animation-delay: 0.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 16%; left: 80%; animation-delay: 1.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 24%; left: 15%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 75%; animation-delay: 0.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 45%; left: 30%; animation-delay: 1.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 90%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 60%; left: 50%; animation-delay: 1.1s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 25%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 80%; left: 70%; animation-delay: 0.5s"
    ></div>
    <div
      class="sparkle"
      style="top: 87%; left: 35%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 94%; left: 60%; animation-delay: 2.3s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 10%; left: 35%; animation-delay: 0.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 16%; left: 80%; animation-delay: 1.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 24%; left: 15%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 75%; animation-delay: 0.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 45%; left: 30%; animation-delay: 1.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 90%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 60%; left: 50%; animation-delay: 1.1s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 25%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 80%; left: 70%; animation-delay: 0.5s"
    ></div>
    <div
      class="sparkle"
      style="top: 87%; left: 35%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 94%; left: 60%; animation-delay: 2.3s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 10%; left: 35%; animation-delay: 0.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 16%; left: 80%; animation-delay: 1.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 24%; left: 15%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 75%; animation-delay: 0.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 45%; left: 30%; animation-delay: 1.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 90%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 60%; left: 50%; animation-delay: 1.1s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 25%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 80%; left: 70%; animation-delay: 0.5s"
    ></div>
    <div
      class="sparkle"
      style="top: 87%; left: 35%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 94%; left: 60%; animation-delay: 2.3s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 10%; left: 35%; animation-delay: 0.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 16%; left: 80%; animation-delay: 1.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 24%; left: 15%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 75%; animation-delay: 0.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 45%; left: 30%; animation-delay: 1.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 90%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 60%; left: 50%; animation-delay: 1.1s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 25%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 80%; left: 70%; animation-delay: 0.5s"
    ></div>
    <div
      class="sparkle"
      style="top: 87%; left: 35%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 94%; left: 60%; animation-delay: 2.3s"
    ></div>

    <!-- Sparkles -->
    <div
      class="sparkle"
      style="top: 10%; left: 35%; animation-delay: 0.7s"
    ></div>
    <div
      class="sparkle"
      style="top: 16%; left: 80%; animation-delay: 1.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 24%; left: 15%; animation-delay: 2.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 32%; left: 75%; animation-delay: 0.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 45%; left: 30%; animation-delay: 1.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 90%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 60%; left: 50%; animation-delay: 1.1s"
    ></div>
    <div
      class="sparkle"
      style="top: 72%; left: 25%; animation-delay: 2.9s"
    ></div>
    <div
      class="sparkle"
      style="top: 80%; left: 70%; animation-delay: 0.5s"
    ></div>
    <div
      class="sparkle"
      style="top: 87%; left: 35%; animation-delay: 1.8s"
    ></div>
    <div
      class="sparkle"
      style="top: 94%; left: 60%; animation-delay: 2.3s"
    ></div>

    <!-- Floating sparkles -->
    <div
      class="floating-sparkle"
      style="top: 20%; left: 65%; animation-delay: 1.3s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 35%; left: 40%; animation-delay: 2.7s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 55%; left: 80%; animation-delay: 0.9s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 75%; left: 15%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 90%; animation-delay: 1.5s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 20%; left: 65%; animation-delay: 1.3s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 35%; left: 40%; animation-delay: 2.7s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 55%; left: 80%; animation-delay: 0.9s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 75%; left: 15%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 90%; animation-delay: 1.5s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 20%; left: 65%; animation-delay: 1.3s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 35%; left: 40%; animation-delay: 2.7s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 55%; left: 80%; animation-delay: 0.9s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 75%; left: 15%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 90%; animation-delay: 1.5s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 20%; left: 65%; animation-delay: 1.3s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 35%; left: 40%; animation-delay: 2.7s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 55%; left: 80%; animation-delay: 0.9s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 75%; left: 15%; animation-delay: 2.1s"
    ></div>
    <div
      class="floating-sparkle"
      style="top: 85%; left: 90%; animation-delay: 1.5s"
    ></div>
  </div>

  <!-- Contenedor Principal de la Página de Bienvenida -->
  <div class="relative z-10">
    <!-- Barra de Navegación Superior -->
    <nav
      class="navbar-container px-4 lg:px-8 py-4 lg:py-6 border-b"
      style="border-color: #3a3a5a"
    >
      <!-- Enlaces de Navegación (Izquierda) -->
      <div class="navbar-left">
        <div class="flex flex-wrap justify-start space-x-4 lg:space-x-8">
          <!-- <a
            class="hover:text-white hover:underline transition-all duration-300 cursor-pointer text-sm lg:text-base"
            style="color: #b4a2fd"
            (click)="onNavigate('/daily-guidance')"
          >
            Guía Diaria
          </a>
          <a
            class="hover:text-white hover:underline transition-all duration-300 cursor-pointer text-sm lg:text-base"
            style="color: #b4a2fd"
            (click)="onNavigate('/community')"
          >
            Comunidad
          </a>
          <a
            class="hover:text-white hover:underline transition-all duration-300 cursor-pointer flex items-center text-sm lg:text-base"
            style="color: #b4a2fd"
            (click)="onNavigate('/courses')"
          >
            Cursos
          </a> -->
        </div>
      </div>

      <!-- Logo Central -->
      <div class="navbar-center">
        <div class="logo-container">
          <img
            src="../../../../assets/logo/logo-arcana.png"
            alt="Arcana Logo"
            class="logo-image"
          />
        </div>
      </div>

      <!-- Botones de Autenticación (Derecha) -->
      <div class="navbar-right">
        <div
          class="flex flex-wrap justify-end items-center space-x-2 lg:space-x-4"
        >
          <a
            class="text-sm lg:text-base px-3 py-2 hover:text-white hover:bg-opacity-20 hover:bg-purple-500 rounded-md transition-all duration-300 cursor-pointer flex items-center"
            style="color: #b4a2fd"
            (click)="onNavigate('/membership')"
          >
            <i class="fas fa-crown mr-1 text-xs"></i>
            Membresías
          </a>

          <div class="hidden lg:block w-px h-6 bg-purple-400 opacity-30"></div>

          <button
            class="text-sm lg:text-base px-4 py-2 hover:text-white transition-all duration-300 cursor-pointer auth-button-secondary"
            style="color: #b4a2fd"
            (click)="onLogin()"
          >
            Iniciar Sesión
          </button>

          <button
            class="text-sm lg:text-base px-4 py-2 border border-purple-400 hover:bg-purple-500 hover:bg-opacity-20 rounded-md transition-all duration-300 cursor-pointer auth-button-primary"
            style="color: #b4a2fd; border-color: #b4a2fd"
            (click)="onRegister()"
          >
            Crear Cuenta
          </button>
        </div>
      </div>
    </nav>

    <!-- Sección Principal Hero -->
    <section
      class="flex flex-col items-center text-center px-4 lg:px-8 py-8 lg:py-16 max-w-6xl mx-auto"
    >
      <!-- Cristal Principal con Efectos -->
      <div class="mb-6 lg:mb-10 relative crystal-container">
        <div class="relative inline-block">
          <img src="../../../../assets/welcomeImages/esfera.png" alt="" />
          <!-- Partículas Místicas -->
          <div class="mystical-particles">
            <div class="particle particle-1"></div>
            <div class="particle particle-2"></div>
            <div class="particle particle-3"></div>
            <div class="particle particle-4"></div>
          </div>
        </div>
      </div>

      <!-- Título Principal -->
      <h1
        class="text-3xl lg:text-6xl xl:text-7xl leading-tight font-normal max-w-4xl mb-6 lg:mb-8 text-glow"
        style="color: #b4a2fd"
      >
        <!-- Icono de Luna -->
        <img
          src="../../../../assets/welcomeImages/moon.png"
          alt="Luna"
          class="inline-block align-middle w-8 h-8 lg:w-20 lg:h-20"
        />
        Despierta tu
        <em class="italic font-normal"> sabiduría interior</em>
        con la plataforma más completa de
        <br class="hidden sm:block" />
        <em class="italic font-normal">esoterismo</em>
        y crecimiento espiritual
        <!-- Icono de Estrellas -->
        <img
          src="../../../../assets/welcomeImages/stars.png"
          alt="Luna"
          class="inline-block align-middle mr-4 w-8 h-8 lg:w-15 lg:h-20"
        />
      </h1>

      <!-- Descripción -->
      <p
        class="text-sm lg:text-lg xl:text-xl leading-relaxed max-w-3xl font-light mb-8"
        style="color: #b4a2fd"
      >
        {{ welcomeData().description }}
      </p>

      <!-- Botones de Acción Principales -->
      <div
        class="flex flex-col sm:flex-row gap-4 justify-center items-center mb-6"
      >
        <button
          class="px-8 py-4 font-semibold text-lg transition-all duration-300 hover:scale-105 primary-cta cursor-pointer flex items-center gap-2"
          (click)="onStartFreeTrial()"
        >
          <i class="fas fa-magic"></i>
          Comenzar Prueba Gratuita
        </button>

        <button
          class="px-8 py-4 border-2 font-medium text-lg hover:bg-opacity-20 transition-all duration-300 secondary-cta cursor-pointer flex items-center gap-2"
          (click)="onViewPlans()"
        >
          <i class="fas fa-crown"></i>
          Ver Planes Premium
        </button>
      </div>

      <!-- Accesos Rápidos -->
      <div
        class="flex flex-col sm:flex-row items-center gap-4 text-sm mb-8 quick-access"
        style="color: #b4a2fd"
      >
        <span class="opacity-70">¿Ya tienes cuenta?</span>
        <button
          class="underline hover:text-white transition-all duration-300 cursor-pointer flex items-center gap-1"
          (click)="onLogin()"
        >
          <i class="fas fa-sign-in-alt text-xs"></i>
          Ingresa aquí →
        </button>
        <span class="hidden sm:inline opacity-40">|</span>
        <span class="opacity-70">¿Necesitas más información?</span>
        <button
          class="underline hover:text-white transition-all duration-300 cursor-pointer flex items-center gap-1"
          (click)="onViewPlans()"
        >
          <i class="fas fa-info-circle text-xs"></i>
          Ver todas las membresías
        </button>
      </div>

      <!-- Indicadores de Confianza -->
      <div
        class="flex flex-wrap justify-center items-center gap-8 text-sm trust-indicators"
        style="color: #b4a2fd"
      >
        <div class="flex items-center opacity-80">
          <i class="fas fa-users mr-2 text-base"></i>
          <span>+{{ trustIndicators().members }} miembros activos</span>
        </div>
        <div class="flex items-center opacity-80">
          <i class="fas fa-star mr-2 text-base"></i>
          <span>{{ trustIndicators().rating }}/5 estrellas</span>
        </div>
        <div class="flex items-center opacity-80">
          <i class="fas fa-certificate mr-2 text-base"></i>
          <span>Certificado por maestros</span>
        </div>
      </div>
    </section>

    <!-- Pestañas de Servicios -->
    <div
      class="grid grid-cols-2 lg:grid-cols-4 text-sm lg:text-base border-t border-b"
      style="border-color: #3a3a5a; color: #b4a2fd"
    >
      <button
        *ngFor="let service of services(); let i = index"
        class="border-r py-4 lg:py-6 px-3 lg:px-6 flex flex-col justify-center items-center hover:text-white transition-all duration-300 font-medium cursor-pointer service-tab"
        [class.active]="activeService() === service.id"
        [class.last]="i === services().length - 1"
        [style.backgroundColor]="
          activeService() === service.id ? '#1a1760' : 'transparent'
        "
        [style.border-color]="'#3a3a5a'"
        [style.color]="activeService() === service.id ? 'white' : '#b4a2fd'"
        (click)="setActiveService(service.id)"
      >
        <i [class]="service.icon + ' text-2xl mb-2 service-icon'"></i>
        <span class="text-center">{{ service.name }}</span>
      </button>
    </div>

    <!-- Contenido de Servicios -->
    <section
      class="grid grid-cols-1 lg:grid-cols-2 p-6 lg:p-12 gap-6 lg:gap-12 min-h-[50vh]"
      style="background-color: #b4a2fd; color: #100820"
    >
      <!-- Columna Izquierda - Detalles del Servicio -->
      <div
        class="lg:border-r lg:pr-8 xl:pr-12"
        style="border-color: rgba(16, 8, 32, 0.2)"
      >
        <h2
          class="text-3xl lg:text-4xl xl:text-5xl font-normal mb-6 lg:mb-8"
          style="color: #100820"
        >
          {{ getActiveService().name }}
        </h2>

        <ul
          class="list-disc list-inside text-base lg:text-lg xl:text-xl space-y-2 lg:space-y-3 mb-8 lg:mb-12 leading-relaxed"
          style="color: #100820"
        >
          <li *ngFor="let feature of getActiveService().features">
            {{ feature }}
          </li>
        </ul>

        <div class="flex justify-center">
          <i
            [class]="
              getActiveService().icon +
              ' text-8xl opacity-50 service-display-icon'
            "
            style="color: #100820"
          ></i>
        </div>
      </div>

      <!-- Divisor simple solo para móviles -->
      <hr *ngIf="isMobile" class="mobile-only-divider" />

      <!-- Columna Derecha - Beneficios Premium -->
      <div class="lg:pl-8 xl:pl-12">
        <h2
          class="text-3xl lg:text-4xl xl:text-5xl font-normal mb-6 lg:mb-8"
          style="color: #100820"
        >
          Membresía Premium
        </h2>

        <div class="flex justify-center mb-6 lg:mb-8">
          <i
            class="fas fa-crown text-6xl lg:text-8xl opacity-60 premium-crown-icon"
            style="color: #100820"
          ></i>
        </div>

        <ul
          class="list-disc list-inside text-base lg:text-lg xl:text-xl space-y-2 lg:space-y-3 mb-6 lg:mb-8 leading-relaxed"
          style="color: #100820"
        >
          <li *ngFor="let benefit of premiumBenefits()">{{ benefit }}</li>
        </ul>

        <!-- Sección de CTA Premium -->
        <div class="space-y-4 premium-cta-section">
          <div class="text-center">
            <div class="text-4xl font-bold mb-2">
              {{ pricing().amount
              }}<span class="text-lg opacity-70">{{ pricing().period }}</span>
            </div>
          </div>

          <button
            class="w-full text-base lg:text-lg xl:text-xl font-normal bg-transparent border-2 py-3 cursor-pointer transition-all duration-300 hover:translate-y-1 premium-cta-button flex items-center justify-center gap-2"
            style="color: #100820; border-color: #100820"
            type="button"
            (click)="onStartPremium()"
          >
            <i class="fas fa-magic"></i>
            <strong class="font-bold">Comenzar Premium</strong>
            <i class="fas fa-arrow-right"></i>
          </button>

          <div class="text-center">
            <p class="text-sm opacity-70 mb-2">¿No tienes cuenta aún?</p>
            <button
              class="text-sm underline hover:no-underline transition-all duration-300 flex items-center justify-center gap-1"
              (click)="onRegister()"
            >
              <i class="fas fa-user-plus text-xs"></i>
              Regístrate gratis primero
            </button>
          </div>
        </div>
      </div>
    </section>

    <!-- Sección de Testimonios -->
    <section class="py-20 px-6">
      <div class="max-w-4xl mx-auto text-center">
        <h2
          class="text-4xl md:text-5xl font-normal mb-16"
          style="color: #b4a2fd"
        >
          Lo Que Dicen Nuestros Miembros
        </h2>

        <!-- Contenedor de Testimonios -->
        <div
          class="relative overflow-hidden rounded-2xl p-8 border testimonials-container"
          style="
            background-color: rgba(180, 162, 253, 0.1);
            border-color: #3a3a5a;
          "
        >
          <!-- Slider de Testimonios -->
          <div
            class="flex transition-transform duration-500 ease-in-out testimonials-slider"
            [style.transform]="
              'translateX(-' + currentTestimonial() * 100 + '%)'
            "
          >
            <div
              *ngFor="
                let testimonial of testimonials();
                let i = index;
                trackBy: trackByTestimonialIndex
              "
              class="w-full flex-shrink-0 px-4 testimonial-slide"
            >
              <!-- Estrellas de Calificación -->
              <div class="flex justify-center mb-4">
                <i
                  *ngFor="let star of getStarArray(testimonial.stars)"
                  class="fas fa-star w-6 h-6 mr-1 testimonial-star"
                  style="color: #ffd700"
                ></i>
              </div>

              <!-- Texto del Testimonio -->
              <p
                class="text-xl mb-6 leading-relaxed italic"
                style="color: #b4a2fd"
              >
                "{{ testimonial.text }}"
              </p>

              <!-- Información del Usuario -->
              <div>
                <p
                  class="font-semibold text-lg flex items-center justify-center gap-2"
                  style="color: #b4a2fd"
                >
                  <i class="fas fa-user-circle"></i>
                  {{ testimonial.name }}
                </p>
                <p
                  class="opacity-70 flex items-center justify-center gap-2"
                  style="color: #b4a2fd"
                >
                  <i class="fas fa-magic text-sm"></i>
                  {{ testimonial.specialty }}
                </p>
              </div>
            </div>
          </div>

          <!-- Indicadores de Testimonios -->
          <div
            class="flex justify-center mt-8 space-x-2 testimonial-indicators"
          >
            <button
              *ngFor="let testimonial of testimonials(); let i = index"
              class="w-3 h-3 rounded-full transition-all duration-300 testimonial-dot"
              [style.backgroundColor]="
                i === currentTestimonial() ? '#b4a2fd' : '#3a3a5a'
              "
              (click)="setCurrentTestimonial(i)"
            ></button>
          </div>
        </div>
      </div>
    </section>

    <!-- Llamada a la Acción Final -->
    <section
      class="py-20 px-6 border-t final-cta-section"
      style="border-color: #3a3a5a"
    >
      <div class="max-w-4xl mx-auto text-center">
        <!-- Icono Principal -->
        <i
          class="fas fa-moon text-6xl mb-8 final-moon-icon"
          style="color: #b4a2fd"
        ></i>

        <!-- Título Final -->
        <h2
          class="text-4xl md:text-5xl font-normal mb-6"
          style="color: #b4a2fd"
        >
          Tu Despertar Espiritual Te Espera
        </h2>

        <!-- Descripción Final -->
        <p
          class="text-xl leading-relaxed mb-8 opacity-80"
          style="color: #b4a2fd"
        >
          {{ finalCTA().description }}
        </p>

        <!-- Botones de Acción Final -->
        <div
          class="flex flex-col sm:flex-row gap-6 justify-center items-center mb-8"
        >
          <button
            class="px-8 py-4 text-lg font-semibold transition-all duration-300 hover:scale-105 final-cta-button flex items-center gap-2"
            style="background-color: #b4a2fd; color: #100820; cursor: pointer"
            (click)="onStartTransformation()"
          >
            <i class="fas fa-rocket"></i>
            {{ finalCTA().buttonText }}
          </button>

          <button
            class="px-8 py-4 border-2 text-lg font-medium hover:bg-opacity-20 transition-all duration-300 flex items-center gap-2"
            style="color: #b4a2fd; border-color: #b4a2fd; cursor: pointer"
            (click)="onLogin()"
          >
            <i class="fas fa-sign-in-alt"></i>
            Ya soy miembro
          </button>
        </div>

        <!-- Opciones Adicionales -->
        <div
          class="grid grid-cols-1 md:grid-cols-3 gap-6 text-sm"
          style="color: #b4a2fd"
        >
          <div class="text-center">
            <p class="opacity-70 mb-2 flex items-center justify-center gap-2">
              <i class="fas fa-eye text-xs"></i>
              ¿Quieres explorar primero?
            </p>
            <button
              class="underline hover:text-white transition-all duration-300 flex items-center justify-center gap-1"
              (click)="onViewDemo()"
            >
              <i class="fas fa-play-circle text-xs"></i>
              Ver contenido gratuito
            </button>
          </div>

          <div class="text-center">
            <p class="opacity-70 mb-2 flex items-center justify-center gap-2">
              <i class="fas fa-question-circle text-xs"></i>
              ¿Tienes preguntas?
            </p>
            <button
              class="underline hover:text-white transition-all duration-300 flex items-center justify-center gap-1"
              (click)="onContactSupport()"
            >
              <i class="fas fa-comments text-xs"></i>
              Hablar con un experto
            </button>
          </div>

          <div class="text-center">
            <p class="opacity-70 mb-2 flex items-center justify-center gap-2">
              <i class="fas fa-balance-scale text-xs"></i>
              ¿Necesitas comparar?
            </p>
            <button
              class="underline hover:text-white transition-all duration-300 flex items-center justify-center gap-1"
              (click)="onViewPlans()"
            >
              <i class="fas fa-list-ul text-xs"></i>
              Ver todos los planes
            </button>
          </div>
        </div>
      </div>
    </section>
  </div>
</div>



================================================
File: app/features/welcome/welcome/welcome.component.scss
================================================
:root {
  --font-serif: "Playfair Display", serif;
  --star-color: #b4a2fd;
  --sparkle-color: rgba(180, 162, 253, 0.8);
  --background-color: #100820;
  --border-color: #3a3a5a;
  --text-color: #b4a2fd;
  --inverted-bg: #b4a2fd;
  --inverted-text: #100820;
}

.welcome-container {
  font-family: var(--font-serif);
  background: radial-gradient(
      ellipse at 10% 20%,
      rgba(180, 162, 253, 0.03) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 80% 80%,
      rgba(180, 162, 253, 0.02) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 40% 40%,
      rgba(180, 162, 253, 0.04) 0%,
      transparent 50%
    );
}

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes twinkle-slow {
  0%,
  100% {
    opacity: 0.2;
    transform: scale(0.8);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.1);
  }
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 5px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.6),
      0 0 30px rgba(180, 162, 253, 0.4);
  }
}

@keyframes crystal-float {
  0%,
  100% {
    transform: translateY(0px) rotateX(0deg) rotateY(0deg) translateZ(0);
  }
  25% {
    transform: translateY(-15px) rotateX(2deg) rotateY(5deg) translateZ(0);
  }
  50% {
    transform: translateY(-10px) rotateX(-1deg) rotateY(-3deg) translateZ(0);
  }
  75% {
    transform: translateY(8px) rotateX(1deg) rotateY(2deg) translateZ(0);
  }
}

@keyframes subtle-drift {
  0% {
    transform: translateX(0px) translateY(0px);
  }
  25% {
    transform: translateX(3px) translateY(-4px);
  }
  50% {
    transform: translateX(-2px) translateY(-6px);
  }
  75% {
    transform: translateX(-4px) translateY(-2px);
  }
  100% {
    transform: translateX(0px) translateY(0px);
  }
}

@keyframes gentle-float {
  0%,
  100% {
    transform: translateY(0px) translateX(0px);
  }
  33% {
    transform: translateY(-5px) translateX(2px);
  }
  66% {
    transform: translateY(3px) translateX(-1px);
  }
}

@keyframes mystical-pulse {
  0%,
  100% {
    opacity: 0.7;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.1);
  }
}

@keyframes fade-in-up {
  from {
    opacity: 0;
    transform: translateY(30px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

@keyframes mystical-blink {
  0%,
  90%,
  100% {
    opacity: 0.5;
  }
  5%,
  85% {
    opacity: 0.8;
  }
  10%,
  80% {
    opacity: 0.5;
  }
  15%,
  75% {
    opacity: 0.7;
  }
}

@keyframes celestial-rotate {
  0% {
    transform: rotate(0deg);
    opacity: 0.5;
  }
  25% {
    opacity: 0.7;
  }
  50% {
    transform: rotate(180deg);
    opacity: 0.6;
  }
  75% {
    opacity: 0.8;
  }
  100% {
    transform: rotate(360deg);
    opacity: 0.5;
  }
}

@keyframes zen-pulse {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  25% {
    opacity: 0.7;
    transform: scale(1.02);
  }
  50% {
    opacity: 0.6;
    transform: scale(1.05);
  }
  75% {
    opacity: 0.8;
    transform: scale(1.03);
  }
}

@keyframes lunar-phase {
  0%,
  100% {
    opacity: 0.3;
    filter: brightness(0.8);
  }
  25% {
    opacity: 0.6;
    filter: brightness(1);
  }
  50% {
    opacity: 0.8;
    filter: brightness(1.2);
  }
  75% {
    opacity: 0.5;
    filter: brightness(0.9);
  }
}

@keyframes crown-glow {
  0%,
  100% {
    opacity: 0.6;
    filter: drop-shadow(0 0 10px rgba(255, 215, 0, 0.2));
  }
  50% {
    opacity: 0.8;
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.4));
  }
}

@keyframes moon-pulse {
  0%,
  100% {
    opacity: 0.8;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

@keyframes star-twinkle {
  0%,
  100% {
    opacity: 0.7;
    transform: scale(1) rotate(0deg);
  }
  25% {
    opacity: 1;
    transform: scale(1.1) rotate(5deg);
  }
  75% {
    opacity: 0.9;
    transform: scale(1.05) rotate(-5deg);
  }
}

@keyframes star-shimmer {
  0%,
  100% {
    opacity: 0.8;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

@keyframes border-glow {
  0%,
  100% {
    opacity: 0.5;
  }
  50% {
    opacity: 1;
  }
}

@keyframes shimmer {
  0% {
    background-position: -200% 0;
  }
  100% {
    background-position: 200% 0;
  }
}

@keyframes pulse {
  0%,
  100% {
    opacity: 0.4;
  }
  50% {
    opacity: 1;
  }
}

@keyframes typing {
  from {
    width: 0;
  }
  to {
    width: 100%;
  }
}

@keyframes blink-caret {
  from,
  to {
    border-color: transparent;
  }
  50% {
    border-color: rgba(180, 162, 253, 0.7);
  }
}

@keyframes subtle-glow {
  0%,
  100% {
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.1);
  }
  50% {
    box-shadow: 0 0 30px rgba(180, 162, 253, 0.2);
  }
}

@keyframes logo-glow {
  0%,
  100% {
    filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.3));
  }
  50% {
    filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.6));
  }
}

@keyframes fadeInDown {
  from {
    opacity: 0;
    transform: translateY(-20px);
  }
  to {
    opacity: 1;
    transform: translateY(0);
  }
}

.star {
  position: absolute;
  background: var(--star-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: var(--star-color);
    border-radius: 50%;
    opacity: 0.7;
  }

  &::after {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    background: linear-gradient(
      45deg,
      transparent 30%,
      var(--star-color) 50%,
      transparent 70%
    );
    opacity: 0.5;
  }
}

.star.large {
  width: 3px;
  height: 3px;
  animation: twinkle 4s ease-in-out infinite,
    subtle-drift 12s ease-in-out infinite;

  &::before {
    width: 12px;
    height: 1px;
  }

  &::after {
    width: 1px;
    height: 12px;
  }
}

.star.medium {
  width: 2px;
  height: 2px;
  animation: twinkle 3s ease-in-out infinite,
    gentle-float 10s ease-in-out infinite;

  &::before {
    width: 8px;
    height: 1px;
  }

  &::after {
    width: 1px;
    height: 8px;
  }
}

.star.small {
  width: 1px;
  height: 1px;
  animation: twinkle-slow 5s ease-in-out infinite,
    subtle-drift 15s ease-in-out infinite;

  &::before {
    width: 6px;
    height: 0.5px;
  }

  &::after {
    width: 0.5px;
    height: 6px;
  }
}

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: var(--sparkle-color);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
  box-shadow: 0 0 4px rgba(180, 162, 253, 0.8);

  &::before,
  &::after {
    content: "";
    position: absolute;
    background: var(--sparkle-color);
  }

  &::before {
    top: -2px;
    left: 50%;
    transform: translateX(-50%);
    width: 0.5px;
    height: 6px;
  }

  &::after {
    left: -2px;
    top: 50%;
    transform: translateY(-50%);
    width: 6px;
    height: 0.5px;
  }
}

.floating-sparkle {
  position: absolute;
  width: 1.5px;
  height: 1.5px;
  background: rgba(180, 162, 253, 0.9);
  border-radius: 50%;
  animation: floating-sparkle 8s ease-in-out infinite;
  box-shadow: 0 0 3px rgba(180, 162, 253, 0.6);

  &::before,
  &::after {
    content: "";
    position: absolute;
    background: rgba(180, 162, 253, 0.7);
  }

  &::before {
    top: -1.5px;
    left: 50%;
    transform: translateX(-50%);
    width: 0.3px;
    height: 4.5px;
  }

  &::after {
    left: -1.5px;
    top: 50%;
    transform: translateY(-50%);
    width: 4.5px;
    height: 0.3px;
  }
}

.text-glow {
  animation: pulse-glow 4s ease-in-out infinite;
}

.moon-glow {
  animation: pulse-glow 6s ease-in-out infinite;
  filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.5));
}

.star-glow {
  animation: pulse-glow 5s ease-in-out infinite;
  filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.4));
}

.crystal-float {
  animation: crystal-float 6s ease-in-out infinite;
  filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.3));
}

.mystical-symbol {
  animation: mystical-pulse 5s ease-in-out infinite;
}

.crystal-container {
  position: relative;
  z-index: 1;
}

.crystal-container img {
  width: 120px;
  height: 120px;
  transform: translateZ(0);

  @media (min-width: 640px) {
    width: 150px;
    height: 150px;
  }

  @media (min-width: 1024px) {
    width: 200px;
    height: 200px;
  }

  @media (min-width: 1280px) {
    width: 240px;
    height: 240px;
  }

  @media (min-width: 1536px) {
    width: 280px;
    height: 280px;
  }
}

.main-crystal {
  color: var(--star-color);
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.4));
}

.floating-sparkle-hero {
  color: var(--star-color);
  animation: floating-sparkle 4s ease-in-out infinite;
}

.primary-cta {
  background-color: var(--star-color);
  color: var(--background-color);
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(180, 162, 253, 0.3);

  &:hover {
    box-shadow: 0 6px 20px rgba(180, 162, 253, 0.4);
    transform: translateY(-2px);
  }

  i {
    transition: all 0.3s ease;
    color: #100820;
  }

  &:hover i {
    transform: scale(1.2);
  }
}

.secondary-cta {
  border-color: var(--star-color);
  color: var(--star-color);
  border-radius: 0.5rem;

  &:hover {
    background-color: rgba(180, 162, 253, 0.1);
  }

  i {
    transition: all 0.3s ease;
    color: #b4a2fd;
  }

  &:hover i {
    transform: scale(1.2);
  }
}

.premium-cta-button {
  border-radius: 0.5rem;

  &:hover {
    background-color: rgba(16, 8, 32, 0.1);
  }
}

.final-cta-button {
  border-radius: 0.5rem;
  box-shadow: 0 4px 15px rgba(180, 162, 253, 0.3);
  transition: all 0.3s ease;

  i {
    transition: all 0.3s ease;
  }

  &:hover {
    box-shadow: 0 6px 20px rgba(180, 162, 253, 0.4);
    transform: translateY(-2px) scale(1.02);
  }

  &:hover i {
    transform: scale(1.2);
  }
}

.trust-indicators {
  animation: fade-in-up 1s ease-out 0.5s both;

  i {
    color: #b4a2fd;
    transition: all 0.3s ease;

    &:hover {
      color: #ffffff;
      transform: scale(1.1);
    }
  }
}

.service-tab {
  position: relative;
  transition: all 0.3s ease;

  &:hover {
    background-color: rgba(180, 162, 253, 0.1) !important;
  }

  &.active {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      bottom: 0;
      left: 0;
      right: 0;
      height: 3px;
      background: linear-gradient(
        90deg,
        transparent,
        var(--star-color),
        transparent
      );
    }

    &::after {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 0;
      background: linear-gradient(
        135deg,
        rgba(255, 255, 255, 0.1) 0%,
        transparent 50%,
        rgba(255, 255, 255, 0.05) 100%
      );
      pointer-events: none;
    }

    .service-icon {
      color: white !important;
      transform: scale(1.1);
      filter: drop-shadow(0 3px 6px rgba(0, 0, 0, 0.3))
        drop-shadow(0 0 15px rgba(255, 255, 255, 0.3));
    }
  }

  &.last {
    @media (min-width: 1024px) {
      border-right: none !important;
    }
  }

  &:focus {
    outline: 2px solid rgba(180, 162, 253, 0.6);
    outline-offset: 2px;
    border-radius: 4px;

    .service-icon {
      transform: scale(1.1);
    }
  }

  &.loading {
    .service-icon {
      animation: pulse 1.5s ease-in-out infinite;
    }
  }

  &.disabled {
    opacity: 0.5;
    cursor: not-allowed;

    &:hover {
      background-color: transparent !important;

      .service-icon {
        transform: none !important;
      }
    }
  }
}

.service-icon {
  transition: all 0.3s ease;
  color: inherit;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));

  &.fas.fa-eye {
    color: #9370db;
  }

  &.fas.fa-star-and-crescent {
    color: #ffd700;
  }

  &.fas.fa-spa {
    color: #20b2aa;
  }

  &.fas.fa-moon {
    color: #e6e6fa;
  }

  .service-tab:hover & {
    transform: scale(1.2) translateY(-2px);
    filter: drop-shadow(0 4px 8px rgba(0, 0, 0, 0.2))
      drop-shadow(0 0 12px rgba(180, 162, 253, 0.4));
  }
}

.service-display-icon {
  transition: all 0.4s ease;
  opacity: 0.5;

  &.fas.fa-eye {
    animation: mystical-blink 4s ease-in-out infinite;
  }

  &.fas.fa-star-and-crescent {
    animation: celestial-rotate 8s linear infinite;
  }

  &.fas.fa-spa {
    animation: zen-pulse 6s ease-in-out infinite;
  }

  &.fas.fa-moon {
    animation: lunar-phase 10s ease-in-out infinite;
  }

  &:hover {
    opacity: 0.7;
    transform: scale(1.1);
  }
}

.premium-cta-section {
  position: relative;

  &::before {
    content: "";
    position: absolute;
    top: -20px;
    left: 50%;
    transform: translateX(-50%);
    width: 60px;
    height: 3px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--inverted-text),
      transparent
    );
  }
}

.mobile-only-divider {
  border: none;
  height: 2px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(16, 8, 32, 0.4) 20%,
    rgba(16, 8, 32, 0.7) 50%,
    rgba(16, 8, 32, 0.4) 80%,
    transparent
  );
  margin: 1.5rem 0;
  grid-column: 1 / -1;
}

.premium-crown-icon {
  animation: crown-glow 5s ease-in-out infinite;
  transition: all 0.3s ease;

  &:hover {
    opacity: 0.8 !important;
    transform: scale(1.05);
    filter: drop-shadow(0 0 20px rgba(255, 215, 0, 0.4));
  }
}

.testimonials-container {
  backdrop-filter: blur(10px);
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: -2px;
    left: -2px;
    right: -2px;
    bottom: -2px;
    background: linear-gradient(
      45deg,
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent
    );
    border-radius: inherit;
    z-index: -1;
    animation: border-glow 4s ease-in-out infinite;
  }

  &:hover {
    .testimonial-star {
      animation-duration: 2s;
    }
  }

  &.error {
    border-color: rgba(220, 38, 127, 0.3);
    background-color: rgba(220, 38, 127, 0.05);

    &::before {
      background: linear-gradient(
        45deg,
        transparent,
        rgba(220, 38, 127, 0.1),
        transparent
      );
    }
  }
}

.testimonials-slider {
  will-change: transform;
}

.testimonial-slide {
  animation: fade-in-up 0.6s ease-out;

  &.loading {
    .testimonial-star {
      animation: pulse 1s ease-in-out infinite;
    }
  }
}

.testimonial-dot {
  cursor: pointer;

  &:hover {
    transform: scale(1.2);
  }

  &:focus {
    outline: 2px solid rgba(180, 162, 253, 0.6);
    outline-offset: 3px;
    border-radius: 4px;
  }
}

.testimonial-indicators {
  z-index: 10;
  position: relative;
}

.testimonial-star {
  color: #ffd700;
  filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.4));
  animation: star-shimmer 3s ease-in-out infinite;
  transition: all 0.3s ease;

  &:hover {
    transform: scale(1.2);
    filter: drop-shadow(0 0 8px rgba(255, 215, 0, 0.6));
  }

  &:nth-child(1) {
    animation-delay: 0s;
  }
  &:nth-child(2) {
    animation-delay: 0.2s;
  }
  &:nth-child(3) {
    animation-delay: 0.4s;
  }
  &:nth-child(4) {
    animation-delay: 0.6s;
  }
  &:nth-child(5) {
    animation-delay: 0.8s;
  }
}

.testimonial-text-typing {
  overflow: hidden;
  white-space: nowrap;
  animation: typing 3s steps(40, end), blink-caret 0.75s step-end infinite;
  border-right: 2px solid rgba(180, 162, 253, 0.7);
}

.final-cta-section {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 50%;
    transform: translateX(-50%);
    width: 100px;
    height: 1px;
    background: linear-gradient(
      90deg,
      transparent,
      var(--star-color),
      transparent
    );
    opacity: 0.6;
  }

  &::after {
    content: "";
    position: absolute;
    top: 10%;
    right: 10%;
    width: 4px;
    height: 4px;
    background: #b4a2fd;
    border-radius: 50%;
    animation: gentle-float 6s ease-in-out infinite;
    opacity: 0.3;
  }

  .grid > div {
    transition: all 0.3s ease;
    padding: 1rem;
    border-radius: 0.5rem;

    &:hover {
      background-color: rgba(180, 162, 253, 0.05);
      transform: translateY(-2px);
    }

    p,
    button {
      i {
        transition: all 0.3s ease;
        opacity: 0.7;
      }

      &:hover i {
        opacity: 1;
        transform: scale(1.1);
      }
    }

    .fa-eye,
    .fa-play-circle {
      color: #9370db;
    }

    .fa-question-circle,
    .fa-comments {
      color: #20b2aa;
    }

    .fa-balance-scale,
    .fa-list-ul {
      color: #ffd700;
    }
  }
}

.final-moon-icon {
  animation: mystical-pulse 4s ease-in-out infinite;
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.4));
  transition: all 0.3s ease;

  &:hover {
    transform: scale(1.1);
    filter: drop-shadow(0 0 30px rgba(180, 162, 253, 0.6));
  }
}

* {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

.star,
.sparkle,
.floating-sparkle,
.crystal-float,
.text-glow,
.moon-glow,
.star-glow,
.mystical-symbol,
.main-crystal,
.floating-sparkle-hero,
.final-moon-icon {
  will-change: transform, opacity;
  transform: translateZ(0);
}

.star:nth-child(odd) {
  animation-direction: reverse;
}

.sparkle:nth-child(3n) {
  animation-delay: 1.5s;
}

.floating-sparkle:nth-child(even) {
  animation-direction: alternate;
}

@media (max-width: 768px) {
  .star {
    animation-duration: 5s;
  }

  .sparkle {
    animation-duration: 7s;
  }

  .floating-sparkle {
    animation-duration: 9s;
  }

  .crystal-float {
    animation-duration: 8s;
  }

  .star:nth-child(3n),
  .sparkle:nth-child(2n) {
    display: none;
  }

  .main-crystal {
    font-size: 4rem;
  }

  .service-tab {
    padding: 1rem 0.5rem;

    .service-icon {
      font-size: 1.5rem;
    }
  }

  .service-display-icon {
    font-size: 4rem !important;
  }

  .premium-crown-icon {
    font-size: 3rem !important;
  }

  .premium-cta-section {
    margin-top: 2rem;
  }

  .testimonial-star {
    margin-right: 0.125rem;
    font-size: 1.25rem;
  }

  .final-moon-icon {
    font-size: 3rem !important;
  }

  .final-cta-section {
    padding: 2rem 1rem !important;

    .grid {
      grid-template-columns: 1fr !important;
      gap: 2rem !important;
      max-width: 300px;
      margin: 0 auto;
    }

    .grid > div {
      padding: 0.75rem;

      p {
        font-size: 0.9rem !important;
        margin-bottom: 1rem !important;
      }

      button {
        display: block !important;
        width: 100% !important;
        padding: 0.75rem 1rem !important;
        font-size: 0.9rem !important;
        margin: 0 auto 0.5rem auto !important;
        border-radius: 8px !important;
        transition: all 0.3s ease !important;

        &:hover {
          transform: translateY(-2px) !important;
          box-shadow: 0 4px 12px rgba(180, 162, 253, 0.3) !important;
        }
      }
    }
  }
}

@media (max-width: 480px) {
  .service-tab {
    .service-icon {
      font-size: 1.25rem;
      margin-bottom: 0.5rem;
    }
  }

  .testimonials-container {
    padding: 1.5rem;
    margin: 0 0.5rem;
  }

  .final-cta-button {
    padding: 0.75rem 1.5rem;
    font-size: 1rem;

    i {
      font-size: 0.875rem;
    }
  }

  .final-cta-section {
    padding: 1.5rem 0.75rem !important;

    .grid {
      gap: 1.5rem !important;
      max-width: 280px;
    }

    .grid > div {
      p {
        font-size: 0.85rem !important;
      }

      button {
        font-size: 0.85rem !important;
        padding: 0.65rem 0.75rem !important;
      }
    }
  }
}

@media (min-width: 1536px) {
  .star.large {
    width: 4px;
    height: 4px;

    &::before {
      width: 14px;
      height: 1.2px;
    }

    &::after {
      width: 1.2px;
      height: 14px;
    }
  }

  .star.medium {
    width: 3px;
    height: 3px;

    &::before {
      width: 10px;
      height: 1px;
    }

    &::after {
      width: 1px;
      height: 10px;
    }
  }

  .sparkle {
    width: 3px;
    height: 3px;
  }

  .floating-sparkle {
    width: 2px;
    height: 2px;
  }

  .main-crystal {
    font-size: 6rem;
  }
}

@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .floating-sparkle,
  .crystal-float,
  .text-glow,
  .moon-glow,
  .star-glow,
  .mystical-symbol,
  .main-crystal,
  .floating-sparkle-hero,
  .final-moon-icon,
  .service-display-icon,
  .premium-crown-icon,
  .testimonial-star,
  .testimonials-container::before {
    animation: none !important;
  }

  .star {
    opacity: 0.6;
  }

  .sparkle,
  .floating-sparkle {
    opacity: 0.4;
  }

  .service-icon {
    &:hover {
      transform: none !important;
    }
  }

  .final-cta-button:hover {
    transform: none !important;
  }

  .final-cta-section .grid > div:hover {
    transform: none !important;
  }

  .primary-cta,
  .secondary-cta,
  .service-tab,
  .testimonial-dot {
    transition: all 0.3s ease;
  }
}

button:focus-visible,
a:focus-visible {
  outline: 2px solid var(--star-color);
  outline-offset: 2px;
  border-radius: 4px;
  box-shadow: 0 0 0 4px rgba(180, 162, 253, 0.2);
}

.glass-effect {
  background: rgba(180, 162, 253, 0.1);
  backdrop-filter: blur(10px);
  border: 1px solid rgba(180, 162, 253, 0.2);
}

.magical-border {
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.4),
      transparent
    );
    transition: left 0.5s;
  }

  &:hover::before {
    left: 100%;
  }
}

.loading-shimmer {
  background: linear-gradient(
    90deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.3) 50%,
    rgba(180, 162, 253, 0.1) 100%
  );
  background-size: 200% 100%;
  animation: shimmer 1.5s infinite;
}

.navbar-container {
  display: grid;
  grid-template-columns: 1fr auto 1fr;
  align-items: center;
  gap: 1rem;
  position: relative;
  width: 100%;
  animation: fadeInDown 0.8s ease-out;

  &.scrolled {
    backdrop-filter: blur(10px);
    background-color: rgba(16, 8, 32, 0.9);
    border-bottom: 1px solid rgba(180, 162, 253, 0.2);
  }
}

.navbar-left {
  justify-self: start;
  display: flex;
  align-items: center;
}

.navbar-center {
  justify-self: center;
  display: flex;
  justify-content: center;
  align-items: center;
  position: relative;
  z-index: 10;
}

.navbar-right {
  justify-self: end;
  display: flex;
  align-items: center;
}

.logo-container {
  display: flex;
  align-items: center;
  justify-content: center;
  padding: 0.5rem;
  transition: all 0.3s ease;
}

.logo-image {
  height: 80px;
  width: auto;
  max-width: 120px;
  object-fit: contain;
  transition: all 0.3s ease;
  filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.3));

  &:hover {
    transform: scale(1.05);
    filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.5));
  }

  &.animate-glow {
    animation: logo-glow 4s ease-in-out infinite;
  }
}

.nav-link-active {
  color: #ffffff !important;
  position: relative;

  &::after {
    content: "";
    position: absolute;
    bottom: -4px;
    left: 0;
    right: 0;
    height: 2px;
    background: linear-gradient(90deg, transparent, #b4a2fd, transparent);
    border-radius: 1px;
  }
}

/* ========== RESPONSIVE DESIGN ========== */

/* Tablet y móvil grande */
@media (max-width: 1024px) {
  .navbar-container {
    grid-template-columns: 1fr auto 1fr;
    gap: 0.5rem;
  }

  .navbar-left,
  .navbar-right {
    font-size: 0.875rem;
  }

  .logo-image {
    height: 35px;
    max-width: 100px;
  }
}

/* Móvil */
@media (max-width: 768px) {
  .navbar-container {
    grid-template-columns: 1fr;
    grid-template-rows: auto auto auto;
    gap: 1rem;
    text-align: center;
  }

  .navbar-left,
  .navbar-center,
  .navbar-right {
    justify-self: center;
    grid-column: 1;
  }

  .navbar-center {
    order: 1;
    margin-bottom: 0.5rem;
  }

  .navbar-left {
    order: 2;
  }

  .navbar-right {
    order: 3;
    margin-top: 0.5rem;
  }

  .navbar-left > div {
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .navbar-right > div {
    justify-content: center;
    flex-wrap: wrap;
    gap: 0.5rem;
  }

  .logo-image {
    height: 70px !important;
    max-width: 150px !important;
  }
}

/* Móvil pequeño */
@media (max-width: 480px) {
  .navbar-container {
    padding: 1rem 0.5rem;
    gap: 0.75rem;
  }

  .navbar-left > div,
  .navbar-right > div {
    gap: 0.25rem;
  }

  .navbar-left a,
  .navbar-right a,
  .navbar-right button {
    padding: 0.375rem 0.75rem;
    font-size: 0.75rem;
  }

  .logo-image {
    height: 28px;
    max-width: 80px;
  }
}

.mystical-crystal-icon {
  font-size: 80px;
  background: linear-gradient(
    135deg,
    #e6e6fa 0%,
    #b4a2fd 25%,
    #9370db 50%,
    #8a2be2 75%,
    #6a5acd 100%
  );
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.6))
    drop-shadow(0 0 40px rgba(180, 162, 253, 0.3))
    drop-shadow(0 5px 15px rgba(180, 162, 253, 0.4));
  cursor: pointer;
  will-change: transform, filter;
  transform: translateZ(0);

  @media (min-width: 640px) {
    font-size: 100px;
  }

  @media (min-width: 1024px) {
    font-size: 120px;
  }

  @media (min-width: 1280px) {
    font-size: 140px;
  }

  @media (min-width: 1536px) {
    font-size: 280px;
  }
}

.crystal-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 60%;
  height: 60%;
  background: radial-gradient(
    circle,
    rgba(255, 255, 255, 0.6) 0%,
    rgba(180, 162, 253, 0.4) 30%,
    transparent 70%
  );
  border-radius: 50%;
  animation: mystical-pulse 3s ease-in-out infinite;
  z-index: -1;
  pointer-events: none;
}

.crystal-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 140%;
  height: 140%;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    rgba(180, 162, 253, 0.1) 40%,
    transparent 70%
  );
  border-radius: 50%;
  animation: gentle-float 8s ease-in-out infinite;
  z-index: -2;
  pointer-events: none;
}

.mystical-particles {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 1;
}

.particle {
  position: absolute;
  width: 3px;
  height: 3px;
  background: rgba(255, 255, 255, 0.9);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.8),
    0 0 12px rgba(180, 162, 253, 0.4);

  &::before,
  &::after {
    content: "";
    position: absolute;
    background: rgba(255, 255, 255, 0.7);
  }

  &::before {
    top: -4px;
    left: 50%;
    transform: translateX(-50%);
    width: 1px;
    height: 8px;
  }

  &::after {
    left: -4px;
    top: 50%;
    transform: translateY(-50%);
    width: 8px;
    height: 1px;
  }
}

.particle-1 {
  top: 10%;
  right: 20%;
  animation: sparkle 4s ease-in-out infinite;
  animation-delay: 0s;
}

.particle-2 {
  bottom: 15%;
  left: 15%;
  animation: sparkle 4s ease-in-out infinite;
  animation-delay: 1.3s;
  transform: scale(0.8);
}

.particle-3 {
  top: 70%;
  right: 10%;
  animation: sparkle 4s ease-in-out infinite;
  animation-delay: 2.6s;
  transform: scale(1.2);
}

.particle-4 {
  top: 30%;
  left: 5%;
  animation: sparkle 4s ease-in-out infinite;
  animation-delay: 3.9s;
  transform: scale(0.9);
}

.professional-moon {
  color: #e6e6fa;
  filter: drop-shadow(0 0 15px rgba(230, 230, 250, 0.6))
    drop-shadow(0 0 30px rgba(180, 162, 253, 0.3));
  animation: moon-pulse 6s ease-in-out infinite;
  transition: all 0.3s ease;

  &:hover {
    color: #ffffff;
    filter: drop-shadow(0 0 25px rgba(255, 255, 255, 0.8))
      drop-shadow(0 0 40px rgba(180, 162, 253, 0.5));
    transform: scale(1.1);
  }

  &:focus {
    outline: 3px solid rgba(180, 162, 253, 0.6);
    outline-offset: 4px;
    border-radius: 4px;
  }
}

.professional-star {
  color: #ffd700;
  filter: drop-shadow(0 0 15px rgba(255, 215, 0, 0.6))
    drop-shadow(0 0 30px rgba(255, 215, 0, 0.3));
  animation: star-twinkle 4s ease-in-out infinite;
  transition: all 0.3s ease;

  &:hover {
    color: #ffed4e;
    filter: drop-shadow(0 0 25px rgba(255, 237, 78, 0.8))
      drop-shadow(0 0 40px rgba(255, 215, 0, 0.5));
    transform: scale(1.1) rotate(10deg);
  }

  &:focus {
    outline: 3px solid rgba(180, 162, 253, 0.6);
    outline-offset: 4px;
    border-radius: 4px;
  }
}

.professional-sparkle {
  color: #b4a2fd;
  font-size: 1.5rem;
  animation: floating-sparkle 4s ease-in-out infinite;
  filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.6));

  &:hover {
    color: #ffffff;
    transform: scale(1.2) rotate(15deg);
  }
}

.mystical-orb-svg {
  width: 120px;
  height: 100px;
  filter: drop-shadow(0 0 20px rgba(180, 162, 253, 0.4))
    drop-shadow(0 0 40px rgba(180, 162, 253, 0.2));
  animation: crystal-float 6s ease-in-out infinite;
  transition: all 0.3s ease;
  cursor: pointer;

  &:hover {
    filter: drop-shadow(0 0 30px rgba(180, 162, 253, 0.6))
      drop-shadow(0 0 60px rgba(180, 162, 253, 0.3));
    transform: scale(1.05);
  }

  @media (min-width: 640px) {
    width: 150px;
    height: 150px;
  }

  @media (min-width: 1024px) {
    width: 200px;
    height: 200px;
  }

  @media (min-width: 1280px) {
    width: 240px;
    height: 240px;
  }

  @media (min-width: 1536px) {
    width: 280px;
    height: 280px;
  }
}

button {
  &.flex.items-center.gap-2,
  &.flex.items-center.gap-1 {
    i {
      transition: all 0.3s ease;
    }

    &:hover i {
      transform: translateX(2px);
    }

    .fa-arrow-right {
      &:hover {
        transform: translateX(4px);
      }
    }

    .fa-sign-in-alt {
      &:hover {
        transform: scale(1.1);
      }
    }

    .fa-rocket {
      &:hover {
        transform: scale(1.1) rotate(5deg);
      }
    }
  }
}

.mystical-crystal-icon:focus,
.professional-moon:focus,
.professional-star:focus {
  outline: 3px solid rgba(180, 162, 253, 0.6);
  outline-offset: 4px;
  border-radius: 4px;
}

.final-cta-button:focus {
  outline: 2px solid rgba(180, 162, 253, 0.6);
  outline-offset: 3px;
  border-radius: 4px;
}

.navbar-container-alt {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  width: 100%;
}

.navbar-center-alt {
  position: absolute;
  left: 50%;
  top: 50%;
  transform: translate(-50%, -50%);
  z-index: 10;
}

.navbar-left-alt,
.navbar-right-alt {
  flex: 1;
  display: flex;
  align-items: center;
}

.navbar-left-alt {
  justify-content: flex-start;
}

.navbar-right-alt {
  justify-content: flex-end;
}



================================================
File: app/features/welcome/welcome/welcome.component.ts
================================================
import {
  Component,
  signal,
  OnInit,
  OnDestroy,
  Inject,
  PLATFORM_ID,
} from '@angular/core';
import { CommonModule, isPlatformBrowser } from '@angular/common';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DeviceDetectionService } from '../../../core/services/device-detection.service';
import {
  Service,
  Testimonial,
  TrustIndicators,
  PricingInfo,
  WelcomeData,
  FinalCTA,
} from '../welcome-interfaces';

@Component({
  selector: 'app-welcome',
  standalone: true,
  imports: [CommonModule],
  templateUrl: './welcome.component.html',
  styleUrls: ['./welcome.component.scss'],
})
export class WelcomeComponent implements OnInit, OnDestroy {
  // ========================================
  // PROPIEDADES PRINCIPALES
  // ========================================

  activeService = signal<string>('tarot');
  currentTestimonial = signal<number>(0);

  private isBrowser: boolean;
  private destroy$ = new Subject<void>();
  isMobile = false;
  private testimonialInterval?: ReturnType<typeof setInterval>;

  // ========================================
  // DATOS DE LA APLICACIÓN
  // ========================================

  services = signal<Service[]>([
    {
      id: 'tarot',
      name: 'Tarot y Arcanos',
      icon: 'fas fa-eye',
      description: 'Lecturas personalizadas que revelan tu destino',
      features: [
        'Lecturas personalizadas diarias',
        'Interpretación de arcanos mayores y menores',
        'Spreads especializados para diferentes temas',
        'Consultas en vivo con tarotistas certificados',
        'Curso completo de lectura de tarot',
      ],
    },
    {
      id: 'astrology',
      name: 'Astrología Avanzada',
      icon: 'fas fa-star-and-crescent',
      description: 'Cartas astrales y predicciones cósmicas',
      features: [
        'Carta astral personalizada completa',
        'Predicciones basadas en tránsitos planetarios',
        'Compatibilidad astrológica',
        'Análisis de retorno solar anual',
        'Astrología predictiva y evolutiva',
      ],
    },
    {
      id: 'holistic',
      name: 'Terapias Holísticas',
      icon: 'fas fa-spa',
      description: 'Chakras, frecuencias y sanación energética',
      features: [
        'Equilibrio y sanación de chakras',
        'Terapias con frecuencias sonoras',
        'Meditaciones guiadas especializadas',
        'Trabajo con cristales y gemas',
        'Técnicas de reiki y sanación energética',
      ],
    },
    {
      id: 'lunar',
      name: 'Ciclos Lunares',
      icon: 'fas fa-moon',
      description: 'Rituales y ceremonias según las fases lunares',
      features: [
        'Calendario lunar personalizado',
        'Rituales para cada fase lunar',
        'Ceremonias de luna llena y nueva',
        'Manifestación lunar guiada',
        'Conexión con ciclos naturales',
      ],
    },
  ]);

  testimonials = signal<Testimonial[]>([
    {
      name: 'María Elena',
      text: 'Arcana cambió mi vida. Las lecturas son increíblemente precisas y el contenido premium vale cada centavo.',
      stars: 5,
      specialty: 'Tarot y Numerología',
    },
    {
      name: 'Carlos Mendoza',
      text: 'La comunidad es increíble y los cursos en vivo me han ayudado a desarrollar mis habilidades intuitivas.',
      stars: 5,
      specialty: 'Astrología y Chakras',
    },
    {
      name: 'Ana Sofía',
      text: 'Los rituales lunares y las meditaciones guiadas son exactamente lo que necesitaba para mi crecimiento espiritual.',
      stars: 5,
      specialty: 'Ceremonias Lunares',
    },
  ]);

  trustIndicators = signal<TrustIndicators>({
    members: '10,000',
    rating: '4.9',
  });

  premiumBenefits = signal<string[]>([
    'Acceso completo a todos los cursos y talleres',
    'Sesiones en vivo exclusivas con maestros',
    'Comunidad privada de practicantes avanzados',
    'Lecturas personalizadas ilimitadas',
    'Calendario lunar y rituales personalizados',
    'Soporte prioritario y consultas 1:1',
  ]);

  pricing = signal<PricingInfo>({
    amount: '$19.99',
    period: '/mes',
    trial: '7 días gratis',
    cancellation: 'Cancela cuando quieras',
  });

  welcomeData = signal<WelcomeData>({
    title: 'Despierta tu sabiduría interior',
    description:
      'Únete a miles de personas que han transformado sus vidas a través del tarot, astrología, terapias holísticas y rituales lunares. Tu despertar espiritual comienza aquí.',
  });

  finalCTA = signal<FinalCTA>({
    description:
      'Únete a miles de personas que ya han transformado sus vidas con Arcana. Comienza tu viaje místico hoy mismo.',
    buttonText: 'Comenzar Mi Transformación',
    disclaimer: '✨ 7 días gratis • Sin compromiso • Cancela cuando quieras',
  });

  constructor(
    private router: Router,
    @Inject(PLATFORM_ID) private platformId: Object,
    private deviceService: DeviceDetectionService
  ) {
    this.isBrowser = isPlatformBrowser(platformId);
  }

  // ========================================
  // INICIALIZACIÓN Y DESTRUCCIÓN
  // ========================================

  ngOnInit(): void {
    this.setupDeviceDetection();
    if (this.isBrowser) {
      this.startTestimonialRotation();
    }
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
    if (this.testimonialInterval) {
      clearInterval(this.testimonialInterval);
    }
  }

  private setupDeviceDetection(): void {
    this.deviceService.isMobile$
      .pipe(takeUntil(this.destroy$))
      .subscribe((isMobile) => {
        this.isMobile = isMobile;
        console.log(
          '📱 Device changed in Welcome:',
          isMobile ? 'Mobile' : 'Desktop'
        );
      });
  }

  // ========================================
  // GESTIÓN DE SERVICIOS
  // ========================================

  setActiveService(serviceId: string): void {
    const service = this.services().find((s) => s.id === serviceId);
    if (service) {
      this.activeService.set(serviceId);
    }
  }

  getActiveService(): Service {
    return (
      this.services().find((s) => s.id === this.activeService()) ||
      this.services()[0]
    );
  }

  // ========================================
  // GESTIÓN DE TESTIMONIALES
  // ========================================

  private startTestimonialRotation(): void {
    if (!this.isBrowser) return;

    this.testimonialInterval = setInterval(() => {
      const nextIndex =
        (this.currentTestimonial() + 1) % this.testimonials().length;
      this.currentTestimonial.set(nextIndex);
    }, 5000);
  }

  private stopTestimonialRotation(): void {
    if (this.testimonialInterval) {
      clearInterval(this.testimonialInterval);
      this.testimonialInterval = undefined;
    }
  }

  setCurrentTestimonial(index: number): void {
    if (index >= 0 && index < this.testimonials().length) {
      this.currentTestimonial.set(index);

      if (this.isBrowser) {
        this.stopTestimonialRotation();
        this.startTestimonialRotation();
      }
    }
  }

  getStarArray(stars: number): number[] {
    return Array(stars).fill(0);
  }

  // ========================================
  // NAVEGACIÓN
  // ========================================

  onNavigate(route: string): void {
    this.router.navigate([route]).catch((err) => {
      console.error('Error en navegación:', err);
    });
  }

  onLogin(): void {
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error al navegar a login:', err);
    });
  }

  onRegister(): void {
    this.router.navigate(['/auth/register']).catch((err) => {
      console.error('Error al navegar a registro:', err);
    });
  }

  // ========================================
  // ACCIONES DE CONVERSIÓN
  // ========================================

  onStartFreeTrial(): void {
    this.router
      .navigate(['/auth/register'], {
        queryParams: { trial: 'true', plan: 'premium' },
      })
      .catch((err) => {
        console.error('Error al navegar a prueba gratuita:', err);
      });
  }

  onViewPlans(): void {
    this.router.navigate(['/membership']).catch((err) => {
      console.error('Error al navegar a planes:', err);
    });
  }

  onStartPremium(): void {
    this.router
      .navigate(['/auth/register'], {
        queryParams: { plan: 'premium', source: 'services_section' },
      })
      .catch((err) => {
        console.error('Error al navegar a premium:', err);
      });
  }

  onStartTransformation(): void {
    this.router
      .navigate(['/auth/register'], {
        queryParams: { journey: 'transformation', source: 'final_cta' },
      })
      .catch((err) => {
        console.error('Error al navegar a transformación:', err);
      });
  }

  onViewDemo(): void {
    this.router
      .navigate(['/courses'], {
        queryParams: { filter: 'free' },
      })
      .catch((err) => {
        console.error('Error al navegar a demo:', err);
      });
  }

  onContactSupport(): void {
    if (this.isBrowser && window.location.hostname !== 'localhost') {
      this.router.navigate(['/support']).catch((err) => {
        console.error('Error al navegar a soporte:', err);
      });
    } else {
      alert('Función de soporte en desarrollo. Contacta a support@arcana.com');
    }
  }

  // ========================================
  // UTILIDADES
  // ========================================

  trackByServiceId(index: number, service: Service): string {
    return service.id;
  }

  trackByTestimonialIndex(index: number, testimonial: Testimonial): string {
    return `${testimonial.name}-${index}`;
  }
}



================================================
File: app/shared/.DS_Store
================================================
[Non-text file]


================================================
File: app/shared/directive/click-outside.directive.ts
================================================
import { Directive, ElementRef, EventEmitter, HostListener, Output } from '@angular/core';

@Directive({
  selector: '[appClickOutside]',
  standalone: true
})
export class ClickOutsideDirective {
  @Output() clickOutside = new EventEmitter<Event>();

  constructor(private elementRef: ElementRef) {}

  @HostListener('document:click', ['$event'])
  @HostListener('document:touchstart', ['$event'])
  onDocumentClick(event: Event): void {
    const target = event.target as HTMLElement;
    
    // Verificar si el click fue dentro del elemento
    if (!this.elementRef.nativeElement.contains(target)) {
      this.clickOutside.emit(event);
    }
  }

  @HostListener('document:keydown.escape', ['$event'])
  onEscapeKey(event: KeyboardEvent): void {
    this.clickOutside.emit(event);
  }
}


================================================
File: app/shared/header/header.component.html
================================================
<!-- Contenedor Principal del Header -->
<div
  class="min-h-16 w-full font-serif relative overflow-hidden header-mystical-bg"
>
  <!-- Fondo Animado con Estrellas -->
  <div class="fixed inset-0 pointer-events-none z-0">
    <!-- Estrellas Grandes -->
    <div
      class="star large"
      style="top: 8%; left: 12%; animation-delay: 0s"
    ></div>
    <div
      class="star large"
      style="top: 15%; left: 88%; animation-delay: 1.2s"
    ></div>
    <div
      class="star large"
      style="top: 25%; left: 5%; animation-delay: 2.1s"
    ></div>
    <div
      class="star large"
      style="top: 35%; left: 85%; animation-delay: 1.8s"
    ></div>
    <div
      class="star large"
      style="top: 55%; left: 15%; animation-delay: 2.8s"
    ></div>
    <div
      class="star large"
      style="top: 75%; left: 90%; animation-delay: 1.5s"
    ></div>

    <!-- Estrellas Medianas -->
    <div
      class="star medium"
      style="top: 12%; left: 45%; animation-delay: 0.8s"
    ></div>
    <div
      class="star medium"
      style="top: 18%; left: 65%; animation-delay: 2.2s"
    ></div>
    <div
      class="star medium"
      style="top: 28%; left: 32%; animation-delay: 1.1s"
    ></div>
    <div
      class="star medium"
      style="top: 38%; left: 72%; animation-delay: 3s"
    ></div>

    <!-- Estrellas Pequeñas -->
    <div
      class="star small"
      style="top: 6%; left: 25%; animation-delay: 1.4s"
    ></div>
    <div
      class="star small"
      style="top: 22%; left: 78%; animation-delay: 2.9s"
    ></div>
    <div
      class="star small"
      style="top: 42%; left: 8%; animation-delay: 0.3s"
    ></div>

    <!-- Destellos -->
    <div
      class="sparkle"
      style="top: 10%; left: 55%; animation-delay: 0.6s"
    ></div>
    <div
      class="sparkle"
      style="top: 30%; left: 85%; animation-delay: 2.4s"
    ></div>
    <div
      class="sparkle"
      style="top: 50%; left: 45%; animation-delay: 1.2s"
    ></div>
  </div>

  <!-- Gradiente Místico -->
  <div class="fixed inset-0 pointer-events-none z-1">
    <div class="mystical-gradient"></div>
  </div>

  <!-- Contenido Principal del Header -->
  <header
    class="header-mystical-container"
    [ngClass]="{ 'mobile-layout': isMobile }"
    style="border: 2px solid #423b51 !important"
  >
    <!-- DISEÑO PARA ESCRITORIO -->
    <ng-container *ngIf="!isMobile">
      <!-- Sección de Búsqueda -->
      <div class="search-mystical-section">
        <form
          class="search-mystical-form group"
          (submit)="onSearch($event)"
          role="search"
          aria-label="Buscar contenido místico"
        >
          <div class="search-input-container">
            <!-- Icono de Búsqueda -->
            <div class="search-icon-wrapper">
              <div class="mystical-search-icon-container">
                <i class="fas fa-search mystical-search-icon"></i>
                <div class="search-icon-glow"></div>
                <div class="search-icon-particles">
                  <div class="search-particle sp-1"></div>
                  <div class="search-particle sp-2"></div>
                </div>
              </div>
            </div>

            <!-- Campo de Búsqueda -->
            <input
              type="search"
              [(ngModel)]="searchQuery"
              name="search"
              placeholder="Buscar..."
              class="search-mystical-input"
              autocomplete="off"
              (input)="onSearchInput()"
            />

            <!-- Efectos Visuales del Input -->
            <div class="input-border"></div>
            <div class="input-glow"></div>

            <!-- Atajo de Teclado -->
            <div class="search-shortcut-mystical">
              <div class="shortcut-icon-wrapper">
                <i class="fas fa-magic shortcut-magic-icon"></i>
                <div class="shortcut-magic-glow"></div>
              </div>
              <kbd>⌘</kbd>
              <kbd>K</kbd>
            </div>
          </div>
        </form>
      </div>

      <!-- Botones de Acción y Perfil de Usuario -->
      <div class="actions-mystical-section">
        <!-- Botón de Mensajes -->
        <button
          class="action-btn-elegant messages-btn group"
          (click)="onMessagesClick()"
          [attr.aria-label]="'Mensajes (' + messageCount + ' nuevos)'"
        >
          <div class="icon-elegant-wrapper">
            <i class="fas fa-envelope icon-elegant"></i>
            <div class="icon-elegant-glow"></div>
          </div>
          <span
            *ngIf="messageCount > 0"
            class="badge-elegant messages-badge-elegant"
          >
            {{ messageCount > 99 ? "99+" : messageCount }}
          </span>
        </button>

        <!-- Botón de Notificaciones -->
        <button
          class="action-btn-elegant notifications-btn group"
          (click)="onNotificationsClick()"
          [attr.aria-label]="
            'Notificaciones (' + notificationCount + ' nuevas)'
          "
        >
          <div class="icon-elegant-wrapper">
            <i class="fas fa-bell icon-elegant"></i>
            <div class="icon-elegant-glow"></div>
          </div>
          <span
            *ngIf="notificationCount > 0"
            class="badge-elegant notifications-badge-elegant"
          >
            {{ notificationCount > 99 ? "99+" : notificationCount }}
          </span>
        </button>

        <!-- Perfil de Usuario -->
        <div class="user-mystical-profile group">
          <!-- Efectos de Destellos del Perfil -->
          <div class="profile-sparkles-professional">
            <i class="fas fa-sparkles profile-sparkle-1"></i>
            <i class="fas fa-star profile-sparkle-2"></i>
            <div class="profile-sparkle-trail ps-trail-1"></div>
            <div class="profile-sparkle-trail ps-trail-2"></div>
          </div>

          <!-- Avatar del Usuario -->
          <div class="avatar-mystical-container">
            <div class="avatar-mystical-frame">
              <div class="avatar-inner-glow"></div>
              <div class="avatar-outer-glow"></div>
              <div class="online-status-mystical">
                <div class="status-dot"></div>
                <div class="status-pulse"></div>
              </div>
            </div>
          </div>

          <!-- Información del Usuario -->
          <div class="user-info-mystical">
            <span class="user-name-mystical">{{ userProfile.name }}</span>
            <span class="user-email-mystical">{{ userProfile.email }}</span>
          </div>

          <!-- Flecha del Dropdown -->
          <div class="dropdown-arrow-mystical">
            <i class="fas fa-chevron-down arrow-mystical-icon"></i>
            <div class="arrow-mystical-glow"></div>
          </div>

          <!-- Menú Desplegable del Usuario -->
          <div class="profile-dropdown-mystical">
            <!-- Efectos de Fondo del Dropdown -->
            <div class="dropdown-bg-effects">
              <div class="dropdown-particle dp-1"></div>
              <div class="dropdown-particle dp-2"></div>
              <div class="dropdown-particle dp-3"></div>
            </div>

            <!-- Contenido del Dropdown -->
            <div class="dropdown-content-mystical">
              <!-- Información del Usuario en Dropdown -->
              <div class="dropdown-user-section">
                <div class="dropdown-avatar-small">
                  <div class="dropdown-avatar-glow"></div>
                </div>
                <div class="dropdown-user-info">
                  <span class="dropdown-user-name">{{ userProfile.name }}</span>
                  <span class="dropdown-user-email">{{
                    userProfile.email
                  }}</span>
                </div>
              </div>

              <!-- Separador -->
              <div class="dropdown-divider">
                <div class="divider-line"></div>
                <div class="divider-sparkle">
                  <i class="fas fa-sparkles"></i>
                </div>
              </div>

              <!-- Opciones del Menú -->
              <div class="dropdown-menu-options">
                <button class="dropdown-option" (click)="onEditProfile()">
                  <div class="option-icon-wrapper">
                    <i class="fas fa-user-edit option-icon"></i>
                    <div class="option-icon-glow"></div>
                  </div>
                  <span class="option-text">Editar Perfil</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>

                <button class="dropdown-option" (click)="onChangePassword()">
                  <div class="option-icon-wrapper">
                    <i class="fas fa-key option-icon"></i>
                    <div class="option-icon-glow"></div>
                  </div>
                  <span class="option-text">Cambiar Contraseña</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>

                <button class="dropdown-option" (click)="onSettings()">
                  <div class="option-icon-wrapper">
                    <i class="fas fa-cog option-icon"></i>
                    <div class="option-icon-glow"></div>
                  </div>
                  <span class="option-text">Configuración</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>

                <button class="dropdown-option" (click)="onSubscription()">
                  <div class="option-icon-wrapper">
                    <i class="fas fa-crown option-icon"></i>
                    <div class="option-icon-glow"></div>
                  </div>
                  <span class="option-text">Mi Suscripción</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>

                <button class="dropdown-option" (click)="onHelp()">
                  <div class="option-icon-wrapper">
                    <i class="fas fa-question-circle option-icon"></i>
                    <div class="option-icon-glow"></div>
                  </div>
                  <span class="option-text">Ayuda y Soporte</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>

                <!-- Separador antes del Logout -->
                <div class="dropdown-divider-simple">
                  <div class="divider-line-simple"></div>
                </div>

                <!-- Opción de Cerrar Sesión -->
                <button
                  class="dropdown-option logout-option"
                  (click)="onLogout()"
                >
                  <div class="option-icon-wrapper">
                    <i class="fas fa-sign-out-alt option-icon"></i>
                    <div class="option-icon-glow logout-glow"></div>
                  </div>
                  <span class="option-text">Cerrar Sesión</span>
                  <i class="fas fa-chevron-right option-arrow"></i>
                </button>
              </div>
            </div>
          </div>
        </div>
      </div>
    </ng-container>

    <!-- DISEÑO PARA MÓVIL -->
    <ng-container *ngIf="isMobile">
      <!-- Contenedor del Header Móvil -->
      <div class="mobile-header-container">
        <!-- Logo/Marca a la Izquierda -->
        <div class="mobile-brand-left">
          <div class="mobile-logo">
            <img
              [src]="logoUrl"
              alt="Arcana logo"
              class="mobile-logo-image"
              (error)="onLogoError($event)"
            />
            <span class="mobile-brand-text">Arcana</span>
          </div>
        </div>

        <!-- Acciones Móviles a la Derecha -->
        <div class="mobile-actions-right">
          <!-- Contenedor de Búsqueda Móvil -->
          <div
            class="mobile-search-container"
            [ngClass]="{ expanded: isSearchExpanded }"
          >
            <!-- Campo de Búsqueda Expandible -->
            <div
              *ngIf="isSearchExpanded"
              class="mobile-search-input-container"
              appClickOutside
              (clickOutside)="onSearchExpandedClickOutside()"
            >
              <input
                type="search"
                [(ngModel)]="searchQuery"
                name="search"
                placeholder="Buscar en Arcana..."
                class="mobile-search-input-field"
                autocomplete="off"
                (input)="onSearchInput()"
                #mobileSearchInput
              />
            </div>

            <!-- Botón de Búsqueda Móvil -->
            <button
              class="mobile-search-btn"
              [ngClass]="{ expanded: isSearchExpanded }"
              (click)="onMobileSearchClick()"
              (touchstart)="onMobileSearchTouch($event)"
              aria-label="Buscar"
            >
              <div class="mobile-search-icon-wrapper">
                <i class="fas fa-search mobile-search-icon"></i>
                <div class="mobile-search-icon-glow"></div>
              </div>
            </button>
          </div>

          <!-- Botón de Notificaciones Móvil -->
          <button
            class="mobile-action-btn notifications-btn"
            (click)="onNotificationsClick()"
            [attr.aria-label]="
              'Notificaciones (' + notificationCount + ' nuevas)'
            "
          >
            <div class="mobile-icon-wrapper">
              <i class="fas fa-bell mobile-icon"></i>
              <div class="mobile-icon-glow"></div>
            </div>
            <span
              *ngIf="notificationCount > 0"
              class="mobile-badge notifications-badge-elegant"
            >
              {{ notificationCount > 99 ? "99+" : notificationCount }}
            </span>
          </button>
        </div>
      </div>
    </ng-container>
  </header>
</div>



================================================
File: app/shared/header/header.component.scss
================================================
// ========================================
// VARIABLES CSS
// ========================================

:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --accent-color: #8b4513;
  --success-color: #32cd32;
  --warning-color: #daa520;
  --error-color: #ff6b6b;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.3);
  --input-bg: rgba(16, 8, 32, 0.6);
  --input-border: rgba(180, 162, 253, 0.6);
  --shadow-primary: 0 0 20px rgba(180, 162, 253, 0.3);
  --shadow-glow: 0 0 30px rgba(180, 162, 253, 0.5);
  --backdrop-blur: blur(20px);
}

// ========================================
// ANIMACIONES KEYFRAMES
// ========================================

@keyframes twinkle {
  0%,
  100% {
    opacity: 0.4;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.3);
  }
}

@keyframes sparkle {
  0%,
  100% {
    opacity: 0;
    transform: scale(0) rotate(0deg);
  }
  25% {
    opacity: 0.6;
    transform: scale(0.5) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: scale(0.5) rotate(270deg);
  }
}

@keyframes floating-sparkle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) scale(0.8) rotate(0deg);
  }
  25% {
    opacity: 0.8;
    transform: translateY(-15px) scale(1.2) rotate(90deg);
  }
  50% {
    opacity: 1;
    transform: translateY(-25px) scale(1) rotate(180deg);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) scale(1.1) rotate(270deg);
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.8);
  }
}

@keyframes mystical-particle-float {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(0.8);
  }
  25% {
    opacity: 0.7;
    transform: translateY(-10px) translateX(5px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-15px) translateX(-3px) scale(1.2);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-8px) translateX(8px) scale(0.9);
  }
}

@keyframes professional-sparkle-trail {
  0% {
    opacity: 0;
    transform: translateX(-20px) scale(0);
  }
  50% {
    opacity: 1;
    transform: translateX(0) scale(1);
  }
  100% {
    opacity: 0;
    transform: translateX(20px) scale(0);
  }
}

@keyframes badge-glow {
  0%,
  100% {
    box-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.6);
  }
}

// ========================================
// HOST STYLES
// ========================================

:host {
  display: block;
  width: 100%;
  font-family: serif;
}

// ========================================
// BACKGROUND ELEMENTS
// ========================================

.header-mystical-bg {
  background-color: #100820;
  color: #b4a2fd;
  overflow: visible;
}

.star {
  position: absolute;
  background: var(--primary-color);
  border-radius: 50%;
  box-shadow: 0 0 6px rgba(180, 162, 253, 0.6);

  &.large {
    width: 3px;
    height: 3px;
    animation: twinkle 4s ease-in-out infinite;
  }

  &.medium {
    width: 2px;
    height: 2px;
    animation: twinkle 3s ease-in-out infinite;
  }

  &.small {
    width: 1px;
    height: 1px;
    animation: twinkle 5s ease-in-out infinite;
  }
}

.sparkle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.8);
  border-radius: 50%;
  animation: sparkle 6s ease-in-out infinite;
}

.mystical-gradient {
  background: radial-gradient(
      ellipse at 20% 30%,
      rgba(180, 162, 253, 0.05) 0%,
      transparent 50%
    ),
    radial-gradient(
      ellipse at 80% 70%,
      rgba(180, 162, 253, 0.03) 0%,
      transparent 50%
    );
  width: 100%;
  height: 100%;
}

// ========================================
// HEADER CONTAINER PRINCIPAL
// ========================================

.header-mystical-container {
  position: relative;
  z-index: 10;
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  gap: 1rem;
  background: #100820;
  background-image: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.15) 0%,
    rgba(180, 162, 253, 0.08) 50%,
    rgba(180, 162, 253, 0.15) 100%
  );

  backdrop-filter: var(--backdrop-blur);
  border-radius: 1.5rem !important;
  -webkit-border-radius: 1.5rem !important;
  -moz-border-radius: 1.5rem !important;
  padding: 1rem 1.5rem;
  box-shadow: var(--shadow-primary);
  position: relative;
  overflow: hidden;

  border: 2px solid #423b51 !important;
  box-sizing: border-box !important;

  // Quitar el pseudo-elemento ::before problemático
  &::before {
    display: none;
  }

  &:hover {
    border-color: rgba(180, 162, 253, 0.5) !important;
    box-shadow: var(--shadow-glow);
    transition: all 0.3s ease;
  }
}

// ========================================
// DESKTOP SEARCH SECTION
// ========================================

.search-mystical-section {
  flex: 1;
  max-width: 400px;
  position: relative;
}

.search-mystical-form {
  position: relative;
  width: 100%;
}

.search-input-container {
  position: relative;
  display: flex;
  align-items: center;
  width: 100%;
}

.search-icon-wrapper {
  position: absolute;
  left: 1rem;
  z-index: 10;
}

.mystical-search-icon-container {
  position: relative;
  display: inline-block;
}

.mystical-search-icon {
  font-size: 1rem;
  color: var(--primary-color);
  animation: pulse-glow 4s ease-in-out infinite;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.4));
}

.search-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.5rem;
  height: 1.5rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.search-icon-particles {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 100%;
  height: 100%;
  pointer-events: none;
  z-index: 2;
}

.search-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.6);
  border-radius: 50%;
  animation: mystical-particle-float 5s ease-in-out infinite;
}

.sp-1 {
  top: -5px;
  left: 15px;
  animation-delay: 0s;
}

.sp-2 {
  top: 15px;
  left: -5px;
  animation-delay: 2.5s;
}

.search-mystical-input {
  width: 100%;
  padding: 1rem 4rem 1rem 3rem;
  background: var(--input-bg);
  border: 2px solid var(--input-border) !important;
  border-radius: 0.75rem !important;
  -webkit-border-radius: 0.75rem !important;
  -moz-border-radius: 0.75rem !important;
  color: var(--primary-color);
  font-size: 1rem;
  transition: all 0.3s ease;
  backdrop-filter: blur(10px);
  position: relative;
  z-index: 2;
  font-family: serif;
  background-clip: padding-box !important;

  &::placeholder {
    color: rgba(180, 162, 253, 0.5);
    font-style: italic;
  }

  &:focus {
    outline: none;
    border-color: var(--primary-color) !important;
    background: rgba(16, 8, 32, 0.8);
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.3) !important;
    font-style: normal;
  }
}

.input-border {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  border-radius: 0.75rem !important;
  -webkit-border-radius: 0.75rem !important;
  -moz-border-radius: 0.75rem !important;
  padding: 1px;
  background: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.4),
    transparent,
    rgba(180, 162, 253, 0.4)
  );
  mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  -webkit-mask: linear-gradient(#fff 0 0) content-box, linear-gradient(#fff 0 0);
  mask-composite: exclude;
  -webkit-mask-composite: xor;
  opacity: 0.4;
  transition: opacity 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.search-mystical-input:focus + .input-border {
  opacity: 1;
}

.input-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  pointer-events: none;
  z-index: 1;
}

.search-mystical-input:focus ~ .input-glow {
  width: 170%;
  height: 110%;
}

.search-shortcut-mystical {
  position: absolute;
  right: 1rem;
  display: flex;
  align-items: center;
  gap: 0.25rem;
  background: rgba(180, 162, 253, 0.1);
  border: 1px solid rgba(180, 162, 253, 0.2);
  border-radius: 0.375rem !important;
  -webkit-border-radius: 0.375rem !important;
  -moz-border-radius: 0.375rem !important;
  padding: 0.25rem 0.5rem;
  font-size: 0.75rem;
  color: var(--primary-color);
  z-index: 10;
}

.shortcut-icon-wrapper {
  position: relative;
  display: inline-block;
}

.shortcut-magic-icon {
  font-size: 0.75rem;
  color: var(--warning-color);
  animation: pulse-glow 5s ease-in-out infinite;
}

.shortcut-magic-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1rem;
  height: 1rem;
  background: radial-gradient(
    circle,
    rgba(218, 165, 32, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
}

// ========================================
// DESKTOP ACTIONS SECTION
// ========================================

.actions-mystical-section {
  display: flex;
  align-items: center;
  gap: 1rem;
  z-index: 15;
  position: relative;
}

.action-btn-elegant {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.75rem;
  height: 2.75rem;

  background: rgba(180, 162, 253, 0.08);
  backdrop-filter: blur(15px);
  border: 2px solid rgba(180, 162, 253, 0.3) !important;
  border-radius: 0.875rem !important;
  -webkit-border-radius: 0.875rem !important;
  -moz-border-radius: 0.875rem !important;

  cursor: pointer;
  transition: none;
  overflow: visible;
  background-clip: padding-box !important;

  &::before {
    display: none;
  }

  &:hover {
    background: rgba(180, 162, 253, 0.08);
    border-color: rgba(180, 162, 253, 0.4) !important;
    transform: none;
    box-shadow: none;
  }

  &:active {
    transform: none;
  }
}

.icon-elegant-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
}

.icon-elegant {
  font-size: 1.1rem;
  color: var(--primary-color);
  transition: all 0.4s ease;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));
  padding: 0.5rem;
  border-radius: 0.5rem !important;
  -webkit-border-radius: 0.5rem !important;
  -moz-border-radius: 0.5rem !important;
}

.icon-elegant-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.4s ease;
  z-index: 1;
  pointer-events: none;
}

.icon-elegant:hover + .icon-elegant-glow,
.icon-elegant:hover ~ .icon-elegant-glow {
  width: 2.5rem;
  height: 2.5rem;
}

.badge-elegant {
  position: absolute;
  top: -8px;
  right: -8px;

  display: flex;
  align-items: center;
  justify-content: center;

  min-width: 1.25rem;
  height: 1.25rem;
  padding: 0 0.375rem;

  color: #ffffff;
  font-size: 0.625rem;
  font-weight: 700;
  border-radius: 50px !important;
  -webkit-border-radius: 50px !important;
  -moz-border-radius: 50px !important;

  border: 2px solid rgba(16, 8, 32, 0.9);
  backdrop-filter: blur(10px);
  z-index: 50;

  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3), 0 2px 8px rgba(0, 0, 0, 0.2);
}

.messages-badge-elegant {
  background: linear-gradient(135deg, #00d4aa, #00b894);
  box-shadow: 0 4px 15px rgba(0, 212, 170, 0.4), 0 0 20px rgba(0, 212, 170, 0.2);
}

.notifications-badge-elegant {
  background: linear-gradient(135deg, #fdcb6e, #e84393);
  box-shadow: 0 4px 15px rgba(253, 203, 110, 0.4),
    0 0 20px rgba(232, 67, 147, 0.2);
}

.icon-elegant:hover ~ .badge-elegant {
  transform: scale(1.1);
  z-index: 51;
}

.icon-elegant:hover ~ .messages-badge-elegant {
  box-shadow: 0 6px 25px rgba(0, 212, 170, 0.6), 0 0 30px rgba(0, 212, 170, 0.3),
    0 2px 8px rgba(0, 0, 0, 0.2);
}

.icon-elegant:hover ~ .notifications-badge-elegant {
  box-shadow: 0 6px 25px rgba(253, 203, 110, 0.6),
    0 0 30px rgba(232, 67, 147, 0.3), 0 2px 8px rgba(0, 0, 0, 0.2);
}

.messages-btn {
  .icon-elegant {
    color: #00d4aa;

    &:hover {
      color: #ffffff;
      filter: drop-shadow(0 0 15px rgba(0, 212, 170, 0.8));
      background: rgba(0, 212, 170, 0.15);
      box-shadow: 0 4px 15px rgba(0, 212, 170, 0.3);
    }
  }

  .icon-elegant-glow {
    background: radial-gradient(
      circle,
      rgba(0, 212, 170, 0.3) 0%,
      transparent 70%
    );
  }
}

.notifications-btn {
  .icon-elegant {
    color: #fdcb6e;

    &:hover {
      color: #ffffff;
      filter: drop-shadow(0 0 15px rgba(253, 203, 110, 0.8));
      background: rgba(253, 203, 110, 0.15);
      box-shadow: 0 4px 15px rgba(253, 203, 110, 0.3);
    }
  }

  .icon-elegant-glow {
    background: radial-gradient(
      circle,
      rgba(253, 203, 110, 0.3) 0%,
      transparent 70%
    );
  }
}

// ========================================
// USER PROFILE SECTION
// ========================================

.user-mystical-profile {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.75rem;

  background: var(--glass-bg);
  backdrop-filter: blur(15px);
  border: 2px solid var(--glass-border) !important;
  border-radius: 1rem !important;
  -webkit-border-radius: 1rem !important;
  -moz-border-radius: 1rem !important;
  padding: 0.5rem 1rem;

  cursor: pointer;
  transition: all 0.3s ease;
  overflow: visible;
  z-index: 20;
  background-clip: padding-box !important;

  &:hover {
    background: rgba(180, 162, 253, 0.15);
    border-color: rgba(180, 162, 253, 0.5) !important;
    transform: translateY(-1px);
    box-shadow: var(--shadow-primary);
    z-index: 100000;
  }
}

.user-mystical-profile::after {
  content: "";
  position: absolute;
  top: 100%;
  left: 0;
  right: 0;
  height: 0.75rem;
  background: transparent;
  z-index: 5;
}

.profile-dropdown-mystical {
  position: absolute;
  top: calc(100% + 0.75rem);
  right: 0;
  width: 280px;

  background: rgba(16, 8, 32, 0.98);
  backdrop-filter: blur(25px);
  border: 2px solid rgba(180, 162, 253, 0.4) !important;
  border-radius: 1rem !important;
  -webkit-border-radius: 1rem !important;
  -moz-border-radius: 1rem !important;
  box-shadow: 0 25px 60px rgba(0, 0, 0, 0.8), 0 0 40px rgba(180, 162, 253, 0.4);

  opacity: 0;
  transform: translateY(-15px) scale(0.9);
  visibility: hidden;
  transition: all 0.4s cubic-bezier(0.4, 0, 0.2, 1);
  z-index: 99999;

  overflow: hidden !important;
  pointer-events: none;
  background-clip: padding-box !important;

  .user-mystical-profile:hover & {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
    pointer-events: auto;
  }

  &:hover {
    opacity: 1;
    transform: translateY(0) scale(1);
    visibility: visible;
    pointer-events: auto;
  }

  &::before {
    content: "";
    position: absolute;
    top: -9px;
    right: 1.5rem;
    width: 0;
    height: 0;
    border-left: 9px solid transparent;
    border-right: 9px solid transparent;
    border-bottom: 9px solid rgba(180, 162, 253, 0.4);
    z-index: 1;
  }

  &::after {
    content: "";
    position: absolute;
    top: -8px;
    right: 1.5rem;
    width: 0;
    height: 0;
    border-left: 9px solid transparent;
    border-right: 9px solid transparent;
    border-bottom: 9px solid rgba(16, 8, 32, 0.98);
    z-index: 2;
  }
}

.dropdown-bg-effects {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: 1;
}

.dropdown-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.6);
  border-radius: 50%;
  animation: mystical-particle-float 8s ease-in-out infinite;
}

.dp-1 {
  top: 20%;
  left: 15%;
  animation-delay: 0s;
}

.dp-2 {
  top: 60%;
  right: 20%;
  animation-delay: 3s;
}

.dp-3 {
  top: 80%;
  left: 70%;
  animation-delay: 6s;
}

.dropdown-content-mystical {
  position: relative;
  z-index: 2;
  padding: 1rem;
}

.dropdown-user-section {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: rgba(180, 162, 253, 0.08);
  border: 1px solid rgba(180, 162, 253, 0.15);
  border-radius: 0.75rem !important;
  -webkit-border-radius: 0.75rem !important;
  -moz-border-radius: 0.75rem !important;
  margin-bottom: 1rem;
}

.dropdown-avatar-small {
  position: relative;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50% !important;
  -webkit-border-radius: 50% !important;
  -moz-border-radius: 50% !important;
  overflow: hidden;
  flex-shrink: 0;
}

.dropdown-avatar-small img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border: 2px solid var(--primary-color);
  border-radius: 50% !important;
  -webkit-border-radius: 50% !important;
  -moz-border-radius: 50% !important;
}

.dropdown-avatar-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3rem;
  height: 3rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
  z-index: -1;
}

.dropdown-user-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.dropdown-user-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: #ffffff;
}

.dropdown-user-email {
  font-size: 0.75rem;
  color: rgba(180, 162, 253, 0.7);
}

.dropdown-divider {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 1rem 0;
}

.divider-line {
  flex: 1;
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.3),
    transparent
  );
}

.divider-sparkle {
  position: absolute;
  background: rgba(16, 8, 32, 0.9);
  padding: 0 0.5rem;
  color: var(--primary-color);
  font-size: 0.75rem;
  animation: pulse-glow 5s ease-in-out infinite;
}

.dropdown-divider-simple {
  margin: 0.75rem 0;
}

.divider-line-simple {
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.2),
    transparent
  );
}

.dropdown-menu-options {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.dropdown-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 0.5rem !important;
  -webkit-border-radius: 0.5rem !important;
  -moz-border-radius: 0.5rem !important;
  color: var(--primary-color);
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  width: 100%;

  &:hover {
    background: rgba(180, 162, 253, 0.1);
    border-color: rgba(180, 162, 253, 0.2);
    transform: translateX(4px);

    .option-text {
      color: #ffffff;
    }

    .option-arrow {
      transform: translateX(4px);
      opacity: 1;
    }
  }
}

.option-icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  background: rgba(180, 162, 253, 0.1);
  border-radius: 0.5rem !important;
  -webkit-border-radius: 0.5rem !important;
  -moz-border-radius: 0.5rem !important;
  flex-shrink: 0;
}

.option-icon {
  font-size: 0.875rem;
  color: var(--primary-color);
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}

.option-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  z-index: 1;
}

.dropdown-option:hover .option-icon-glow {
  width: 2.5rem;
  height: 2.5rem;
}

.dropdown-option:hover .option-icon {
  color: #ffffff;
  transform: scale(1.1);
}

.option-text {
  flex: 1;
  font-weight: 500;
  transition: all 0.3s ease;
}

.option-arrow {
  font-size: 0.75rem;
  opacity: 0.5;
  transition: all 0.3s ease;
}

.logout-option {
  margin-top: 0.5rem;

  &:hover {
    background: rgba(255, 107, 107, 0.1);
    border-color: rgba(255, 107, 107, 0.3);

    .option-icon {
      color: #ff6b6b;
    }

    .option-text {
      color: #ff6b6b;
    }
  }
}

.logout-glow {
  background: radial-gradient(
    circle,
    rgba(255, 107, 107, 0.4) 0%,
    transparent 70%
  );
}

.dropdown-option:hover {
  .fa-user-edit {
    color: #32cd32;
  }

  .fa-key {
    color: #daa520;
  }

  .fa-cog {
    color: #9370db;
  }

  .fa-crown {
    color: #ffd700;
  }

  .fa-question-circle {
    color: #20b2aa;
  }
}

.profile-sparkles-professional {
  position: absolute;
  top: -0.5rem;
  right: -0.5rem;
  width: 2rem;
  height: 2rem;
  pointer-events: none;
  z-index: 5;
}

.profile-sparkle-1,
.profile-sparkle-2 {
  position: absolute;
  animation: sparkle 3s ease-in-out infinite;
  filter: drop-shadow(0 0 4px rgba(255, 215, 0, 0.6));
}

.profile-sparkle-1 {
  top: 0;
  left: 0;
  font-size: 0.875rem;
  color: #ffd700;
  animation-delay: 0s;
}

.profile-sparkle-2 {
  bottom: 0;
  right: 0;
  font-size: 0.75rem;
  color: #ffffff;
  animation-delay: 1.5s;
}

.profile-sparkle-trail {
  position: absolute;
  top: 50%;
  left: 50%;
  width: 2px;
  height: 2px;
  background: rgba(255, 215, 0, 0.7);
  border-radius: 50%;
  animation: professional-sparkle-trail 2s ease-in-out infinite;
}

.ps-trail-1 {
  animation-delay: 0.5s;
  transform: translate(-50%, -50%) rotate(45deg);
}

.ps-trail-2 {
  animation-delay: 1s;
  transform: translate(-50%, -50%) rotate(-45deg);
}

.avatar-mystical-container {
  position: relative;
  display: inline-block;
}

.avatar-mystical-frame {
  position: relative;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50% !important;
  -webkit-border-radius: 50% !important;
  -moz-border-radius: 50% !important;
  overflow: hidden;
}

.avatar-mystical {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border: 2px solid var(--primary-color);
  border-radius: 50% !important;
  -webkit-border-radius: 50% !important;
  -moz-border-radius: 50% !important;
  transition: all 0.3s ease;
  position: relative;
  z-index: 3;
}

.user-mystical-profile:hover .avatar-mystical {
  border-color: #ffffff;
  transform: scale(1.05);
}

.avatar-inner-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 2rem;
  height: 2rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 3s ease-in-out infinite;
  z-index: 1;
}

.avatar-outer-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3rem;
  height: 3rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.15) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite reverse;
  z-index: 0;
}

.online-status-mystical {
  position: absolute;
  bottom: -2px;
  right: -2px;
  z-index: 4;
}

.status-dot {
  width: 0.75rem;
  height: 0.75rem;
  background: var(--success-color);
  border: 2px solid var(--secondary-color);
  border-radius: 50% !important;
  -webkit-border-radius: 50% !important;
  -moz-border-radius: 50% !important;
  position: relative;
  z-index: 2;
}

.status-pulse {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1rem;
  height: 1rem;
  background: rgba(50, 205, 50, 0.3);
  border-radius: 50%;
  animation: pulse-glow 2s ease-in-out infinite;
  z-index: 1;
}

.user-info-mystical {
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.user-name-mystical {
  font-size: 0.875rem;
  font-weight: 600;
  color: var(--primary-color);
  transition: all 0.3s ease;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.user-email-mystical {
  font-size: 0.75rem;
  color: rgba(180, 162, 253, 0.7);
  transition: all 0.3s ease;
  max-width: 120px;
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.user-mystical-profile:hover .user-name-mystical {
  color: #ffffff;
  text-shadow: 0 0 8px rgba(180, 162, 253, 0.6);
}

.user-mystical-profile:hover .user-email-mystical {
  color: rgba(255, 255, 255, 0.8);
}

.dropdown-arrow-mystical {
  position: relative;
  display: inline-block;
}

.arrow-mystical-icon {
  font-size: 0.875rem;
  color: var(--primary-color);
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}

.user-mystical-profile:hover .arrow-mystical-icon {
  color: #ffffff;
  transform: rotate(180deg);
}

.arrow-mystical-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 1.25rem;
  height: 1.25rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.2) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
  z-index: 1;
}

// ========================================
// MOBILE LAYOUT STYLES
// ========================================

.header-mystical-container.mobile-layout {
  justify-content: space-between;
  padding: 0.75rem 1rem;
  min-height: 60px;
}

.mobile-header-container {
  display: flex;
  align-items: center;
  justify-content: space-between;
  width: 100%;
  position: relative;
  z-index: 10;
  min-height: 50px;
}

.mobile-brand-left {
  display: flex;
  align-items: center;
  flex-shrink: 0;
  min-height: 40px;
}

.mobile-logo {
  display: flex;
  align-items: center;
  gap: 0.3rem;
  cursor: pointer;
  transition: all 0.3s ease;
  min-height: 40px;

  &:hover {
    opacity: 0.8;
    transform: scale(1.02);
  }
}

.mobile-logo-image {
  width: 50px;
  height: 50px;
  flex-shrink: 0;
  object-fit: contain;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));
  transition: all 0.3s ease;

  &:hover {
    filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.6));
  }
}

.mobile-brand-text {
  font-size: 1.125rem;
  font-weight: 600;
  color: var(--primary-color);
  font-family: serif;
  transition: all 0.3s ease;

  .mobile-logo:hover & {
    color: #ffffff;
    text-shadow: 0 0 8px rgba(180, 162, 253, 0.6);
  }
}

.mobile-actions-right {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  position: relative;
  z-index: 10;
  flex-shrink: 0;
}

.mobile-search-container {
  position: relative;
  display: flex;
  align-items: center;
  order: 1;

  &.expanded {
    .mobile-search-btn {
      transform: translateX(0);
      z-index: 12;
    }

    .mobile-search-input-container {
      width: 240px;
      opacity: 1;
      pointer-events: auto;
    }
  }
}

.mobile-search-input-container {
  position: absolute;
  right: 0;
  top: 50%;
  transform: translateY(-50%);
  width: 0;
  opacity: 0;
  pointer-events: none;

  background: var(--input-bg);
  border: 2px solid var(--input-border);
  border-radius: 0.75rem;

  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  overflow: hidden;
  z-index: 11;

  &:focus-within {
    border-color: var(--primary-color);
    box-shadow: 0 0 0 3px rgba(180, 162, 253, 0.3);
  }
}

.mobile-search-input-field {
  width: 100%;
  padding: 0.75rem 1rem 0.75rem 3rem;
  background: transparent;
  border: none;
  color: var(--primary-color);
  font-size: 1rem;
  font-family: serif;
  -webkit-text-size-adjust: 100%;
  -webkit-appearance: none;
  border-radius: 0;

  &::placeholder {
    color: rgba(180, 162, 253, 0.5);
    font-style: italic;
  }

  &:focus {
    outline: none;
    font-style: normal;
  }
}

.mobile-search-btn {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.75rem;
  height: 2.75rem;

  background: rgba(180, 162, 253, 0.08);
  backdrop-filter: blur(15px);
  border: 2px solid rgba(180, 162, 253, 0.3);
  border-radius: 0.875rem;

  cursor: pointer;
  transition: all 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  overflow: visible;
  z-index: 12;

  &:hover {
    background: rgba(180, 162, 253, 0.15);
    border-color: rgba(180, 162, 253, 0.4);
    transform: translateY(-1px);
  }

  &.expanded {
    background: rgba(180, 162, 253, 0.2);
    border-color: var(--primary-color);
    transform: translateX(-206px);

    .mobile-search-icon {
      color: #ffffff;
      transform: scale(1.1);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.8));
    }

    .mobile-search-icon-glow {
      width: 2.5rem;
      height: 2.5rem;
    }
  }
}

.mobile-search-icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
}

.mobile-search-icon {
  font-size: 1.1rem;
  color: var(--primary-color);
  transition: all 0.4s ease;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));
}

.mobile-search-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.4s ease;
  z-index: 1;
  pointer-events: none;
}

.mobile-action-btn {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2.75rem;
  height: 2.75rem;

  background: rgba(180, 162, 253, 0.08);
  backdrop-filter: blur(15px);
  border: 2px solid rgba(180, 162, 253, 0.3);
  border-radius: 0.875rem;

  cursor: pointer;
  transition: all 0.3s ease;
  overflow: visible;
  order: 2;

  &:hover {
    background: rgba(180, 162, 253, 0.15);
    border-color: rgba(180, 162, 253, 0.4);
    transform: translateY(-1px);
  }
}

.mobile-icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  z-index: 2;
}

.mobile-icon {
  font-size: 1.1rem;
  color: var(--primary-color);
  transition: all 0.4s ease;
  position: relative;
  z-index: 3;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));
}

.mobile-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.4s ease;
  z-index: 1;
  pointer-events: none;
}

.notifications-btn {
  .mobile-icon {
    color: #fdcb6e;
  }

  &:hover {
    .mobile-icon {
      color: #ffffff;
      transform: scale(1.1);
      filter: drop-shadow(0 0 12px rgba(253, 203, 110, 0.8));
    }

    .mobile-icon-glow {
      width: 2.5rem;
      height: 2.5rem;
      background: radial-gradient(
        circle,
        rgba(253, 203, 110, 0.4) 0%,
        transparent 70%
      );
    }
  }
}

.mobile-badge {
  position: absolute;
  top: -8px;
  right: -8px;

  display: flex;
  align-items: center;
  justify-content: center;

  min-width: 1.25rem;
  height: 1.25rem;
  padding: 0 0.375rem;

  color: #ffffff;
  font-size: 0.625rem;
  font-weight: 700;
  border-radius: 50px;

  border: 2px solid rgba(16, 8, 32, 0.9);
  backdrop-filter: blur(10px);
  z-index: 50;

  transition: all 0.3s ease;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.3), 0 2px 8px rgba(0, 0, 0, 0.2);
}

// ========================================
// RESPONSIVE MEDIA QUERIES
// ========================================

@media (max-width: 768px) {
  // Ocultar elementos desktop
  .search-mystical-section,
  .actions-mystical-section {
    display: none;
  }

  .user-info-mystical,
  .profile-sparkles-professional,
  .search-shortcut-mystical {
    display: none;
  }

  .profile-dropdown-mystical {
    width: 260px;
    right: -1rem;
  }

  .header-mystical-container {
    padding: 0.75rem 1rem;
    border-radius: 1rem !important;
    -webkit-border-radius: 1rem !important;
    -moz-border-radius: 1rem !important;
  }
}

@media (max-width: 480px) {
  .header-mystical-container {
    padding: 0.625rem 0.75rem;
  }

  .mobile-actions-right {
    gap: 0.5rem;
  }

  .mobile-action-btn,
  .mobile-search-btn {
    width: 2.5rem;
    height: 2.5rem;
  }

  .mobile-icon,
  .mobile-search-icon {
    font-size: 1rem;
  }

  .mobile-badge {
    min-width: 1rem;
    height: 1rem;
    font-size: 0.5rem;
    top: -4px;
    right: -4px;
  }

  .mobile-search-container.expanded {
    .mobile-search-input-container {
      width: 200px;
    }
  }

  .mobile-search-btn.expanded {
    transform: translateX(-168px);
  }

  .mobile-search-input-field {
    padding: 0.65rem 0.75rem 0.65rem 1rem;
    font-size: 1rem;
    -webkit-text-size-adjust: 100%;
    zoom: 1;
  }

  .mobile-brand-text {
    font-size: 1rem;
  }

  .mobile-logo-image {
    width: 35px !important;
    height: 35px !important;
  }
}

// ========================================
// ACCESSIBILITY & MOTION
// ========================================

@media (prefers-reduced-motion: reduce) {
  .star,
  .sparkle,
  .mystical-search-icon,
  .profile-sparkle-1,
  .profile-sparkle-2,
  .shortcut-magic-icon {
    animation: none !important;
  }

  .search-icon-glow,
  .icon-elegant-glow,
  .avatar-inner-glow,
  .avatar-outer-glow,
  .status-pulse,
  .arrow-mystical-glow,
  .badge-glow {
    animation: none !important;
  }

  .search-icon-particles .search-particle,
  .dropdown-particle {
    animation: none !important;
    opacity: 0.3 !important;
  }

  .profile-sparkle-trail {
    display: none !important;
  }

  .profile-dropdown-mystical {
    transition: opacity 0.2s ease, visibility 0.2s ease;
  }

  .dropdown-option:hover {
    transform: none !important;
  }

  .action-btn-elegant,
  .icon-elegant,
  .badge-elegant,
  .mobile-action-btn,
  .mobile-search-btn,
  .mobile-icon {
    transition: none !important;
  }

  .action-btn-elegant:hover,
  .mobile-action-btn:hover,
  .mobile-search-btn:hover {
    transform: none !important;
  }

  .mobile-search-container.expanded .mobile-search-btn {
    transform: none !important;
  }
}

.action-btn-elegant:focus-visible,
.search-mystical-input:focus-visible,
.user-mystical-profile:focus-visible,
.mobile-action-btn:focus-visible,
.mobile-search-btn:focus-visible,
.mobile-search-input-field:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}



================================================
File: app/shared/header/header.component.ts
================================================
import { Component, OnInit, OnDestroy } from '@angular/core';
import { CommonModule } from '@angular/common';
import { FormsModule } from '@angular/forms';
import { Router } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil } from 'rxjs/operators';
import { DeviceDetectionService } from '../../core/services/device-detection.service';
import { ClickOutsideDirective } from '../directive/click-outside.directive';

@Component({
  selector: 'app-header',
  standalone: true,
  imports: [CommonModule, FormsModule, ClickOutsideDirective],
  templateUrl: './header.component.html',
  styleUrls: ['./header.component.scss'],
})
export class HeaderComponent implements OnInit, OnDestroy {
  // ========================================
  // PROPIEDADES PRINCIPALES
  // ========================================

  searchQuery: string = '';
  notificationCount: number = 3;
  messageCount: number = 5;

  userProfile = {
    name: 'Usuario Arcana',
    email: 'usuario@arcana.com',
    avatar: '/assets/images/default-avatar.png',
  };

  // Logo URL para móvil
  logoUrl: string = '/assets/logo/logo-arcana.png';

  // ========================================
  // ESTADO DEL COMPONENTE
  // ========================================

  private destroy$ = new Subject<void>();
  private searchDebounceTimer?: ReturnType<typeof setTimeout>;
  private readonly SEARCH_DEBOUNCE_TIME = 300;

  // ========================================
  // PROPIEDADES MÓVILES
  // ========================================

  isMobile = false;
  isSearchExpanded = false;

  constructor(
    private router: Router,
    private deviceService: DeviceDetectionService
  ) {}

  ngOnInit(): void {
    this.loadUserProfile();
    this.setupKeyboardShortcuts();
    this.setupDeviceDetection();
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
    this.cleanupTimers();
    this.removeKeyboardShortcuts();
  }

  // ========================================
  // INICIALIZACIÓN
  // ========================================

  private loadUserProfile(): void {
    // En una aplicación real, cargarías el perfil del usuario desde un servicio
    // this.userService.getCurrentUser().subscribe(user => {
    //   this.userProfile = user;
    // });

    console.log('👤 Perfil de usuario cargado:', this.userProfile);
  }

  private setupDeviceDetection(): void {
    this.deviceService.isMobile$
      .pipe(takeUntil(this.destroy$))
      .subscribe((isMobile) => {
        this.isMobile = isMobile;
        if (!isMobile && this.isSearchExpanded) {
          this.isSearchExpanded = false;
        }
      });
  }

  private setupKeyboardShortcuts(): void {
    // Configurar atajos de teclado (Cmd+K para búsqueda)
    document.addEventListener(
      'keydown',
      this.handleKeyboardShortcuts.bind(this)
    );
  }

  private removeKeyboardShortcuts(): void {
    document.removeEventListener(
      'keydown',
      this.handleKeyboardShortcuts.bind(this)
    );
  }

  private handleKeyboardShortcuts(event: KeyboardEvent): void {
    // Cmd+K o Ctrl+K para activar búsqueda
    if ((event.metaKey || event.ctrlKey) && event.key === 'k') {
      event.preventDefault();
      this.focusSearchInput();
    }

    // Escape para limpiar búsqueda
    if (event.key === 'Escape') {
      this.clearSearch();
    }
  }

  // ========================================
  // FUNCIONALIDAD DE BÚSQUEDA
  // ========================================

  onSearch(event: Event): void {
    event.preventDefault();

    if (this.searchQuery.trim()) {
      console.log('🔍 Buscando:', this.searchQuery);
      this.performSearch(this.searchQuery.trim());
    }
  }

  onSearchInput(): void {
    // Debounce para búsqueda en tiempo real
    if (this.searchDebounceTimer) {
      clearTimeout(this.searchDebounceTimer);
    }

    this.searchDebounceTimer = setTimeout(() => {
      if (this.searchQuery.trim().length >= 2) {
        this.performLiveSearch(this.searchQuery.trim());
      }
    }, this.SEARCH_DEBOUNCE_TIME);
  }

  // ========================================
  // FUNCIONALIDAD MÓVIL - BÚSQUEDA EXPANDIBLE
  // ========================================

  onMobileSearchClick(): void {
    if (!this.isMobile) return;

    setTimeout(() => {
      if (this.isSearchExpanded) {
        this.isSearchExpanded = false;
        this.clearSearch();
      } else {
        this.isSearchExpanded = true;

        // Enfocar el input después de la animación
        setTimeout(() => {
          this.focusSearchInput();
        }, 300);
      }
    }, 50);
  }

  onMobileSearchTouch(event: TouchEvent): void {
    event.preventDefault(); // Evita zoom accidental, scroll, etc.
    event.stopPropagation();

    requestAnimationFrame(() => {
      if (this.isSearchExpanded) {
        this.isSearchExpanded = false;
        this.clearSearch();
      } else {
        this.isSearchExpanded = true;
        setTimeout(() => {
          this.focusSearchInput();
        }, 300);
      }
    });
  }

  onSearchExpandedClickOutside(): void {
    if (this.isMobile && this.isSearchExpanded) {
      this.isSearchExpanded = false;
      this.clearSearch();
    }
  }

  private performSearch(query: string): void {
    // Navegar a página de resultados
    this.router
      .navigate(['/search'], {
        queryParams: { q: query },
      })
      .catch((err) => {
        console.error('Error en navegación de búsqueda:', err);
      });
  }

  private performLiveSearch(query: string): void {
    // Implementar búsqueda en tiempo real si es necesario
    console.log('🔍 Búsqueda en vivo:', query);
  }

  private focusSearchInput(): void {
    const searchInput = document.querySelector(
      '.mystical-search-input, .mobile-search-input-field'
    ) as HTMLInputElement;
    if (searchInput) {
      searchInput.focus();
    }
  }

  private clearSearch(): void {
    this.searchQuery = '';
    const searchInput = document.querySelector(
      '.mystical-search-input, .mobile-search-input-field'
    ) as HTMLInputElement;
    if (searchInput && document.activeElement === searchInput) {
      searchInput.blur();
    }
  }

  // ========================================
  // FUNCIONALIDAD DE MENSAJES
  // ========================================

  onMessagesClick(): void {
    console.log('💌 Mensajes clickeados');

    // Navegar a la sección de mensajes
    this.router.navigate(['/messaging']).catch((err) => {
      console.error('Error al navegar a mensajes:', err);
    });
  }

  // ========================================
  // FUNCIONALIDAD DE NOTIFICACIONES
  // ========================================

  onNotificationsClick(): void {
    console.log('🔔 Notificaciones clickeadas');
    this.showNotificationsPanel();
  }

  private showNotificationsPanel(): void {
    // Implementar panel de notificaciones
    console.log('Mostrando panel de notificaciones...');

    // En una aplicación real:
    // this.notificationService.showPanel();
    // o abrir modal/sidebar de notificaciones
  }

  // ========================================
  // FUNCIONALIDAD DEL PERFIL DE USUARIO
  // ========================================

  onEditProfile(): void {
    console.log('✏️ Editar perfil clickeado');

    this.router.navigate(['/profile/edit']).catch((err) => {
      console.error('Error al navegar a editar perfil:', err);
    });
  }

  onChangePassword(): void {
    console.log('🔑 Cambiar contraseña clickeado');

    this.router.navigate(['/profile/change-password']).catch((err) => {
      console.error('Error al navegar a cambiar contraseña:', err);
    });
  }

  onSettings(): void {
    console.log('⚙️ Configuración clickeada');

    this.router.navigate(['/settings']).catch((err) => {
      console.error('Error al navegar a configuración:', err);
    });
  }

  onSubscription(): void {
    console.log('👑 Mi suscripción clickeada');

    this.router.navigate(['/subscriptions']).catch((err) => {
      console.error('Error al navegar a suscripción:', err);
    });
  }

  onHelp(): void {
    console.log('❓ Ayuda clickeada');

    this.router.navigate(['/help']).catch((err) => {
      console.error('Error al navegar a ayuda:', err);
    });
  }

  onLogout(): void {
    console.log('🚪 Logout clickeado');
    this.performLogout();
  }

  private performLogout(): void {
    // Limpiar datos de autenticación
    // this.authService.logout();

    // Limpiar almacenamiento local
    localStorage.removeItem('user_token');
    localStorage.removeItem('user_data');

    // Navegar a login
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error durante logout:', err);
    });
  }

  // ========================================
  // MANEJO DE ERRORES - SIMPLIFICADO
  // ========================================

  onImageError(event: any): void {
    // Cambiar a imagen por defecto si falla la carga - SIN TRACKING
    event.target.src = '/assets/images/default-avatar.png';
  }

  onLogoError(event: any): void {
    event.target.src = '/assets/logo/logo-arcana.png';
  }

  // ========================================
  // UTILIDADES Y HELPERS
  // ========================================

  private cleanupTimers(): void {
    if (this.searchDebounceTimer) {
      clearTimeout(this.searchDebounceTimer);
      this.searchDebounceTimer = undefined;
    }
  }

  // ========================================
  // GETTERS PARA TEMPLATE
  // ========================================

  get hasUnreadMessages(): boolean {
    return this.messageCount > 0;
  }

  get hasUnreadNotifications(): boolean {
    return this.notificationCount > 0;
  }

  get formattedMessageCount(): string {
    return this.messageCount > 99 ? '99+' : this.messageCount.toString();
  }

  get formattedNotificationCount(): string {
    return this.notificationCount > 99
      ? '99+'
      : this.notificationCount.toString();
  }

  get userInitials(): string {
    if (!this.userProfile.name) return 'UA';

    const names = this.userProfile.name.split(' ');
    if (names.length >= 2) {
      return `${names[0][0]}${names[1][0]}`.toUpperCase();
    }
    return names[0].substring(0, 2).toUpperCase();
  }

  get searchPlaceholder(): string {
    const placeholders = [
      'Busca tu destino en las estrellas...',
      'Explora los misterios del cosmos...',
      'Descubre secretos ancestrales...',
      'Encuentra tu camino místico...',
    ];

    // Rotar placeholder basado en la hora para variedad
    const hour = new Date().getHours();
    return placeholders[hour % placeholders.length];
  }

  // ========================================
  // MÉTODOS PARA FUTURAS FUNCIONALIDADES
  // ========================================

  updateMessageCount(count: number): void {
    this.messageCount = Math.max(0, count);
  }

  updateNotificationCount(count: number): void {
    this.notificationCount = Math.max(0, count);
  }

  updateUserProfile(profile: Partial<typeof this.userProfile>): void {
    this.userProfile = { ...this.userProfile, ...profile };
  }

  // Método para animar el header cuando hay nuevas notificaciones
  animateNewNotification(): void {
    const notificationBtn = document.querySelector('.notifications-mystical');
    if (notificationBtn) {
      notificationBtn.classList.add('pulse-animation');
      setTimeout(() => {
        notificationBtn.classList.remove('pulse-animation');
      }, 1000);
    }
  }

  // Método para animar el header cuando hay nuevos mensajes
  animateNewMessage(): void {
    const messageBtn = document.querySelector('.messages-mystical');
    if (messageBtn) {
      messageBtn.classList.add('pulse-animation');
      setTimeout(() => {
        messageBtn.classList.remove('pulse-animation');
      }, 1000);
    }
  }
}



================================================
File: app/shared/mobile-navigation/mobile-navigation.component.html
================================================
<!-- Contenedor Principal de Navegación Móvil -->
<div class="mobile-nav-container">
  <!-- Overlay de Fondo para Modales -->
  <div
    *ngIf="isMenuModalOpen || isUserModalOpen"
    class="modal-overlay"
    (click)="closeAllModals()"
  ></div>

  <!-- Modal del Menú Principal -->
  <div
    *ngIf="isMenuModalOpen"
    class="menu-modal"
    appClickOutside
    (clickOutside)="onMenuModalClickOutside()"
  >
    <!-- Header del Modal con Botón Cerrar -->
    <div class="menu-header">
      <button
        class="close-btn"
        (click)="closeAllModals()"
        aria-label="Cerrar menú"
      >
        <i class="fas fa-times"></i>
      </button>
    </div>

    <!-- Contenido del Menú -->
    <div class="menu-content">
      <!-- Logo de la Aplicación -->
      <div
        class="logo-container"
        [ngClass]="{ 'logo-active': isHomeActive }"
        (click)="onLogoClick()"
      >
        <img
          alt="Arcana logo"
          class="w-8 h-8 logo-image"
          [ngClass]="{ 'logo-image-active': isHomeActive }"
          height="32"
          [src]="logoUrl"
          width="32"
          (error)="onLogoError($event)"
        />
        <span
          class="font-semibold text-lg logo-text"
          [ngClass]="{ 'logo-text-active': isHomeActive }"
        >
          {{ appName }}
        </span>
      </div>

      <!-- Navegación Principal -->
      <nav class="flex flex-col gap-4 text-sm font-medium menu-sections">
        <!-- Secciones del Menú -->
        <div
          *ngFor="let section of menuSections; trackBy: trackBySection"
          class="menu-section"
        >
          <!-- Título de la Sección -->
          <h3 class="text-xs font-semibold text-gray-400 mb-2 section-title">
            {{ section.title }}
          </h3>

          <!-- Items de la Sección -->
          <div class="flex flex-col gap-1">
            <a
              *ngFor="let item of section.items; trackBy: trackByItem"
              [routerLink]="item.route || '/'"
              class="menu-item"
              [ngClass]="{ active: item.isActive }"
              (click)="onMenuItemClick(item)"
            >
              <!-- Icono del Item -->
              <i [class]="item.icon"></i>

              <!-- Texto del Item -->
              <span class="menu-text">{{ item.label }}</span>

              <!-- Badge (si existe) -->
              <span *ngIf="item.badge" class="ml-auto badge mystical-badge">
                {{ item.badge }}
              </span>
            </a>
          </div>
        </div>
      </nav>
    </div>
  </div>

  <!-- Modal del Usuario -->
  <div
    *ngIf="isUserModalOpen"
    class="user-modal"
    appClickOutside
    (clickOutside)="onUserModalClickOutside()"
  >
    <!-- Header del Modal de Usuario -->
    <div class="user-modal-header">
      <button
        class="close-btn"
        (click)="closeAllModals()"
        aria-label="Cerrar menú de usuario"
      >
        <i class="fas fa-times"></i>
      </button>
    </div>

    <!-- Contenido del Modal de Usuario -->
    <div class="user-modal-content">
      <!-- Efectos de Fondo del Modal -->
      <div class="dropdown-bg-effects">
        <div class="dropdown-particle dp-1"></div>
        <div class="dropdown-particle dp-2"></div>
        <div class="dropdown-particle dp-3"></div>
      </div>

      <!-- Información del Usuario -->
      <div class="dropdown-user-section">
        <div class="dropdown-avatar-small">
          <div class="dropdown-avatar-glow"></div>
        </div>
        <div class="dropdown-user-info">
          <span class="dropdown-user-name">{{ userProfile.name }}</span>
          <span class="dropdown-user-email">{{ userProfile.email }}</span>
        </div>
      </div>

      <!-- Separador -->
      <div class="dropdown-divider">
        <div class="divider-line"></div>
        <div class="divider-sparkle">
          <i class="fas fa-sparkles"></i>
        </div>
      </div>

      <!-- Opciones del Menú de Usuario -->
      <div class="dropdown-menu-options">
        <button class="dropdown-option" (click)="onEditProfile()">
          <div class="option-icon-wrapper">
            <i class="fas fa-user-edit option-icon"></i>
            <div class="option-icon-glow"></div>
          </div>
          <span class="option-text">Editar Perfil</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>

        <button class="dropdown-option" (click)="onChangePassword()">
          <div class="option-icon-wrapper">
            <i class="fas fa-key option-icon"></i>
            <div class="option-icon-glow"></div>
          </div>
          <span class="option-text">Cambiar Contraseña</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>

        <button class="dropdown-option" (click)="onSettings()">
          <div class="option-icon-wrapper">
            <i class="fas fa-cog option-icon"></i>
            <div class="option-icon-glow"></div>
          </div>
          <span class="option-text">Configuración</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>

        <button class="dropdown-option" (click)="onSubscription()">
          <div class="option-icon-wrapper">
            <i class="fas fa-crown option-icon"></i>
            <div class="option-icon-glow"></div>
          </div>
          <span class="option-text">Mi Suscripción</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>

        <button class="dropdown-option" (click)="onHelp()">
          <div class="option-icon-wrapper">
            <i class="fas fa-question-circle option-icon"></i>
            <div class="option-icon-glow"></div>
          </div>
          <span class="option-text">Ayuda y Soporte</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>

        <!-- Separador antes del Logout -->
        <div class="dropdown-divider-simple">
          <div class="divider-line-simple"></div>
        </div>

        <!-- Opción de Cerrar Sesión -->
        <button class="dropdown-option logout-option" (click)="onLogout()">
          <div class="option-icon-wrapper">
            <i class="fas fa-sign-out-alt option-icon"></i>
            <div class="option-icon-glow logout-glow"></div>
          </div>
          <span class="option-text">Cerrar Sesión</span>
          <i class="fas fa-chevron-right option-arrow"></i>
        </button>
      </div>
    </div>
  </div>

  <!-- Barra de Navegación Inferior -->
  <nav class="bottom-nav">
    <!-- Botón de Menú -->
    <button
      class="nav-btn text-gray-400"
      [ngClass]="{ active: isMenuModalOpen }"
      (click)="onMenuClick()"
      (touchstart)="onMenuTouch($event)"
      [style.z-index]="'99999'"
      [style.position]="'relative'"
      aria-label="Abrir menú"
    >
      <div class="nav-icon-wrapper">
        <i class="fas fa-bars nav-icon"></i>
        <div class="nav-icon-glow menu-glow"></div>
      </div>
      <span class="nav-label">Menú</span>
    </button>

    <!-- Botón de Inicio -->
    <button
      class="nav-btn nav-btn-home"
      [ngClass]="{ active: isHomeActive }"
      (click)="onHomeClick()"
      aria-label="Ir a inicio"
    >
      <div class="nav-icon-wrapper">
        <i class="fas fa-home nav-icon"></i>
        <div class="nav-icon-glow home-glow"></div>
      </div>
      <span class="nav-label">Inicio</span>
    </button>

    <!-- Botón de Usuario -->
    <button
      class="nav-btn"
      [ngClass]="{ active: isUserModalOpen }"
      (click)="onUserClick()"
      (touchstart)="onUserTouch($event)"
      aria-label="Menú de usuario"
    >
      <div class="nav-icon-wrapper">
        <i class="fas fa-user nav-icon"></i>
        <div class="nav-icon-glow user-glow"></div>
      </div>
      <span class="nav-label">Usuario</span>
    </button>
  </nav>
</div>



================================================
File: app/shared/mobile-navigation/mobile-navigation.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.3);
  --text-primary: rgba(180, 162, 253, 0.9);
  --text-secondary: rgba(180, 162, 253, 0.6);
  --shadow-subtle: 0 4px 20px rgba(180, 162, 253, 0.15);
  --backdrop-blur: blur(20px);
}

.mobile-nav-container {
  color: #9ca3af !important;

  * {
    color: inherit;
  }

  .nav-icon,
  .mystical-icon {
    color: var(--primary-color);
  }

  .dropdown-user-name {
    color: #ffffff !important;
  }

  .dropdown-user-email {
    color: rgba(180, 162, 253, 0.7) !important;
  }
}

@keyframes gentle-glow {
  0%,
  100% {
    box-shadow: 0 0 10px rgba(180, 162, 253, 0.2);
  }
  50% {
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.4);
  }
}

@keyframes slideDownFromTop {
  from {
    transform: translateY(-100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes soft-pulse {
  0%,
  100% {
    opacity: 0.6;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

@keyframes floating-particle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(0.8);
  }
  25% {
    opacity: 0.7;
    transform: translateY(-15px) translateX(5px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-20px) translateX(-3px) scale(1.2);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) translateX(8px) scale(0.9);
  }
}

@keyframes twinkling-star {
  0%,
  100% {
    opacity: 0.2;
    transform: scale(0.8) rotate(0deg);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.3) rotate(180deg);
  }
}

@keyframes mystical-shimmer {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  50% {
    opacity: 0.6;
  }
  100% {
    transform: translateX(100%);
    opacity: 0;
  }
}

@keyframes pulse-glow {
  0%,
  100% {
    text-shadow: 0 0 10px rgba(180, 162, 253, 0.3);
  }
  50% {
    text-shadow: 0 0 20px rgba(180, 162, 253, 0.8);
  }
}

@keyframes gentle-icon-glow {
  0%,
  100% {
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
    transform: scale(1);
  }
  50% {
    filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.8));
    transform: scale(1.02);
  }
}

@keyframes slideUpFromBottom {
  from {
    transform: translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

@keyframes slideUpFromRight {
  from {
    transform: translateX(100%);
    opacity: 0;
  }
  to {
    transform: translateX(0);
    opacity: 1;
  }
}

:host {
  font-family: serif;
}

.mobile-nav-container {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  z-index: 9999;
  font-family: serif;
}

.modal-overlay {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: rgba(16, 8, 32, 0.8);
  backdrop-filter: blur(10px);
  z-index: 9990;
  animation: fadeIn 0.3s ease;
}

@keyframes fadeIn {
  from {
    opacity: 0;
  }
  to {
    opacity: 1;
  }
}

.bottom-nav {
  display: flex;
  align-items: center;
  justify-content: space-around;
  padding: 0.75rem 1rem 1.5rem;
  background: #100820;
  background-image: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.1) 100%
  );
  backdrop-filter: var(--backdrop-blur);
  border-top: 2px solid var(--glass-border);
  box-shadow: 0 -4px 20px rgba(180, 162, 253, 0.15);
  position: relative;
  z-index: 9991;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at 20% 30%,
        rgba(180, 162, 253, 0.4) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 70% 60%,
        rgba(180, 162, 253, 0.3) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 45% 80%,
        rgba(180, 162, 253, 0.5) 1px,
        transparent 2px
      );
    background-size: 150px 150px, 120px 120px, 180px 180px;
    animation: floating-particle 20s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
    opacity: 0.4;
  }
}

.nav-btn {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.25rem;
  padding: 0.5rem;
  background: transparent;
  border: none;
  cursor: pointer;
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
  min-width: 60px;

  color: #9ca3af !important;

  &:hover {
    transform: translateY(-2px);
  }

  &.active {
    .nav-icon {
      color: #ffffff;
      transform: scale(1.2);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.8));
    }

    .nav-label {
      color: #ffffff;
      font-weight: 600;
    }

    .nav-icon-glow {
      width: 2.5rem;
      height: 2.5rem;
    }
  }
}

.nav-btn-home {
  &.active {
    .nav-icon {
      color: #ffd700;
      filter: drop-shadow(0 0 12px rgba(255, 215, 0, 0.8));
    }

    .home-glow {
      background: radial-gradient(
        circle,
        rgba(255, 215, 0, 0.4) 0%,
        transparent 70%
      );
    }
  }
}

.nav-icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
}

.nav-icon {
  font-size: 1.25rem;
  color: var(--primary-color);
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));
}

.nav-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  z-index: 1;
}

.home-glow {
  background: radial-gradient(
    circle,
    rgba(255, 215, 0, 0.4) 0%,
    transparent 70%
  );
}

.nav-label {
  font-size: 0.75rem;
  color: inherit;
  transition: all 0.3s ease;
  font-weight: 500;
}

.menu-modal {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100vh;
  height: 98dvh;
  background: #100820;
  background-image: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.1) 100%
  );
  backdrop-filter: var(--backdrop-blur);
  z-index: 9995;
  animation: slideDownFromTop 0.35s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  position: relative;
  color: #9ca3af !important;

  overscroll-behavior: auto;
  overscroll-behavior-y: auto;
  overflow: hidden;
  overflow-x: hidden;
  display: flex;
  flex-direction: column;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at 20% 30%,
        rgba(180, 162, 253, 0.4) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 70% 60%,
        rgba(180, 162, 253, 0.3) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 45% 80%,
        rgba(180, 162, 253, 0.5) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(180, 162, 253, 0.2) 1px,
        transparent 2px
      );
    background-size: 200px 200px, 150px 150px, 180px 180px, 220px 220px;
    background-position: 0px 0px, 50px 80px, 120px 20px, 200px 100px;
    animation: floating-particle 15s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
    opacity: 0.6;
  }

  &::after {
    content: "✦ ✧ ✦ ✧";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    color: rgba(180, 162, 253, 0.4);
    font-size: 8px;
    letter-spacing: 60px;
    line-height: 80px;
    text-align: center;
    animation: twinkling-star 6s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
    overflow: hidden;
  }
}

.menu-header {
  position: sticky !important;
  top: 0 !important; //CAMBIAR
  display: flex !important;
  align-items: center !important;
  justify-content: flex-end !important;

  padding: 1.5rem !important;
  padding-bottom: 2rem !important;
  padding-top: max(env(safe-area-inset-top, 0px), 1rem) !important;

  background: linear-gradient(
    180deg,
    rgba(16, 8, 32, 0.95) 0%,
    rgba(16, 8, 32, 0.8) 70%,
    transparent 100%
  ) !important;
  backdrop-filter: blur(20px) !important;

  z-index: 10 !important;

  animation: headerFadeIn 0.3s ease-out forwards !important;
}

@supports (-webkit-touch-callout: none) {
  .menu-header {
    -webkit-transform: translate3d(0, 0, 0) !important;
    transform: translate3d(0, 0, 0) !important;
  }
}

.close-btn {
  display: flex !important;
  align-items: center !important;
  justify-content: center !important;
  width: 2.5rem !important;
  height: 2.5rem !important;

  background: rgba(180, 162, 253, 0.15) !important;
  backdrop-filter: blur(15px) !important;

  border-radius: 0.75rem !important;

  color: var(--primary-color) !important;
  font-size: 1rem !important;
  cursor: pointer !important;

  position: relative !important;
  z-index: 10001 !important;

  transition: all 0.3s cubic-bezier(0.25, 0.46, 0.45, 0.94) !important;

  pointer-events: auto !important;
  opacity: 1 !important;
  visibility: visible !important;

  &:hover {
    background: rgba(180, 162, 253, 0.25) !important;
    border-color: rgba(180, 162, 253, 0.6) !important;
    color: #ffffff !important;
    transform: scale(1.05) !important;
  }

  &:active {
    transform: scale(0.95) !important;
  }
}

.menu-content {
  position: relative;
  z-index: 2;
  top: 0 !important;
  left: 0 !important;
  right: 0 !important;
  bottom: 0 !important;
  color: var(--text-primary);

  padding: 1rem 1.5rem 2rem;
  padding-bottom: 2rem !important;
  padding-left: 1.5rem !important;
  padding-right: 1.5rem !important;

  height: 0 !important;
  min-height: fit-content !important;

  display: flex;
  flex-direction: column;
  gap: 2rem;

  flex: 1 !important;
  overflow-y: auto !important;
  overflow-x: hidden !important;
  contain: layout style;

  overscroll-behavior: auto;
  overscroll-behavior-y: auto;

  -webkit-overflow-scrolling: touch !important;
  scroll-behavior: smooth !important;

  min-height: 0 !important;
  max-height: 100% !important;
}

.logo-container {
  padding: 1rem;
  background: rgba(16, 8, 32, 0.95);
  border: 1px solid var(--glass-border);
  border-radius: 1rem;
  backdrop-filter: blur(20px) !important;
  box-shadow: 0 4px 20px rgba(180, 162, 253, 0.2) !important;
  display: flex;
  gap: 0.75rem;
  margin-bottom: 2rem !important;
  position: relative;
  align-items: center;
  transition: all 0.3s ease;
  overflow: hidden;
  cursor: pointer;
  margin-top: 0 !important;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent
    );
    transform: translateX(-100%);
    animation: mystical-shimmer 8s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
  }

  &.logo-active {
    background: rgba(180, 162, 253, 0.2) !important;
    transform: scale(1.02);
    border-color: var(--primary-color);

    &::before {
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
      );
      animation: mystical-shimmer 3s ease-in-out infinite;
    }
  }

  .logo-image {
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.4));
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;

    &:hover {
      transform: scale(1.05);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.6));
    }
  }

  .logo-text {
    color: var(--primary-color);
    position: relative;
    z-index: 2;
  }
}

.menu-sections {
  display: flex;
  flex-direction: column;
  gap: 2rem;
  padding: 0 1rem;
}

.menu-section {
  .section-title {
    color: #9ca3af !important;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 1rem;
    position: relative;
    transition: all 0.3s ease;

    &:hover {
      color: rgba(180, 162, 253, 0.8) !important;
      text-shadow: 0 0 8px rgba(180, 162, 253, 0.2);
    }

    &::after {
      content: "";
      position: absolute;
      bottom: -0.25rem;
      left: 0;
      width: 30px;
      height: 1px;
      background: var(--primary-color);
      opacity: 0.5;
      transition: all 0.4s ease;
    }

    &:hover::after {
      width: 50px;
      opacity: 0.8;
      box-shadow: 0 0 5px rgba(180, 162, 253, 0.4);
    }
  }
}

.menu-items {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
}

.menu-item {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  border-radius: 0.75rem;
  margin-bottom: 0.25rem;
  color: #9ca3af !important;
  font-size: 0.9375rem;
  font-weight: 500;
  text-decoration: none;
  background: transparent;
  border: 1px solid transparent;
  transition: all 0.3s ease;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent
    );
    transition: left 0.5s ease;
    pointer-events: none;
  }

  &:hover {
    color: #ffffff !important;
    background: var(--glass-bg);
    transform: translateX(6px);
    box-shadow: 0 4px 15px rgba(180, 162, 253, 0.2);

    &::before {
      left: 100%;
    }

    .mystical-icon {
      transform: scale(1.15);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.8));
    }
  }

  &.active {
    color: #ffffff !important;
    background: rgba(180, 162, 253, 0.15);
    border-color: var(--primary-color);
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.3);

    &::before {
      content: "";
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 3px;
      height: 20px;
      background: linear-gradient(180deg, var(--primary-color), #ffffff);
      border-radius: 0 2px 2px 0;
      box-shadow: 0 0 8px var(--primary-color);
    }

    .mystical-icon {
      color: #e0a5a5;
      filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.6));
      animation: gentle-icon-glow 3s ease-in-out infinite;
    }
  }
}

.mystical-icon {
  font-size: 1.125rem !important;
  min-width: 24px !important;
  color: var(--primary-color);
  transition: all 0.4s ease;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));

  &.fa-route {
    color: #20b2aa !important;
  }

  &.fa-hat-wizard {
    color: #9370db !important;
  }

  &.fa-spa {
    color: #32cd32 !important;
  }

  &.fa-id-card-alt {
    color: #daa520 !important;
  }

  &.fa-moon {
    color: #e6e6fa !important;
  }

  &.fa-video {
    color: #ff6347 !important;
  }

  &.fa-gem {
    color: #ff69b4 !important;
  }

  &.fa-graduation-cap {
    color: #1e90ff !important;
  }

  &.fa-user-circle,
  &.fa-cog,
  &.fa-question-circle,
  &.fa-sign-out-alt {
    color: rgba(180, 162, 253, 0.8) !important;
  }
}

.menu-text {
  flex: 1;
  color: inherit;
}

.mystical-badge {
  background: linear-gradient(135deg, #daa520, #ffd700);
  color: #100820;
  font-size: 0.625rem;
  font-weight: 700;
  padding: 0.25rem 0.5rem;
  border-radius: 12px;
  border: 1px solid rgba(255, 215, 0, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    animation: mystical-shimmer 4s ease-in-out infinite;
    pointer-events: none;
  }

  &:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px rgba(218, 165, 32, 0.4);
  }
}

.user-modal {
  position: fixed;
  bottom: 120px;
  right: 1rem;
  width: 300px;
  max-height: 70vh;
  background: rgba(16, 8, 32, 0.98);
  backdrop-filter: blur(25px);
  border: 2px solid rgba(180, 162, 253, 0.4);
  border-radius: 1rem;
  box-shadow: 0 25px 60px rgba(0, 0, 0, 0.8), 0 0 40px rgba(180, 162, 253, 0.4);
  z-index: 9995;
  animation: slideUpFromRight 0.4s cubic-bezier(0.25, 0.46, 0.45, 0.94);
  overflow: hidden;

  color: #9ca3af !important;

  &::before {
    content: "";
    position: absolute;
    bottom: -9px;
    right: 1.5rem;
    width: 0;
    height: 0;
    border-left: 9px solid transparent;
    border-right: 9px solid transparent;
    border-top: 9px solid rgba(180, 162, 253, 0.4);
    z-index: 1;
  }

  &::after {
    content: "";
    position: absolute;
    bottom: -8px;
    right: 1.5rem;
    width: 0;
    height: 0;
    border-left: 9px solid transparent;
    border-right: 9px solid transparent;
    border-top: 9px solid rgba(16, 8, 32, 0.98);
    z-index: 2;
  }
}

.user-modal-header {
  position: sticky;
  top: 0;
  z-index: 10;
  display: flex;
  justify-content: flex-end;
  padding: 1rem;
  background: rgba(16, 8, 32, 0.9);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid var(--glass-border);
}

.user-modal-content {
  position: relative;
  z-index: 2;
  padding: 1rem;

  color: #9ca3af !important;
}

.dropdown-bg-effects {
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  pointer-events: none;
  z-index: 1;
}

.dropdown-particle {
  position: absolute;
  width: 2px;
  height: 2px;
  background: rgba(180, 162, 253, 0.6);
  border-radius: 50%;
  animation: floating-particle 8s ease-in-out infinite;
}

.dp-1 {
  top: 20%;
  left: 15%;
  animation-delay: 0s;
}

.dp-2 {
  top: 60%;
  right: 20%;
  animation-delay: 3s;
}

.dp-3 {
  top: 80%;
  left: 70%;
  animation-delay: 6s;
}

.dropdown-user-section {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: rgba(180, 162, 253, 0.08);
  border: 1px solid rgba(180, 162, 253, 0.15);
  border-radius: 0.75rem;
  margin-bottom: 1rem;
  position: relative;
  z-index: 2;
}

.dropdown-avatar-small {
  position: relative;
  width: 2.5rem;
  height: 2.5rem;
  border-radius: 50%;
  overflow: hidden;
  flex-shrink: 0;

  img {
    width: 100%;
    height: 100%;
    object-fit: cover;
    border: 2px solid var(--primary-color);
    border-radius: 50%;
  }
}

.dropdown-avatar-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 3rem;
  height: 3rem;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.3) 0%,
    transparent 70%
  );
  border-radius: 50%;
  animation: pulse-glow 4s ease-in-out infinite;
  z-index: -1;
}

.dropdown-user-info {
  flex: 1;
  display: flex;
  flex-direction: column;
  gap: 0.125rem;
}

.dropdown-user-name {
  font-size: 0.875rem;
  font-weight: 600;
  color: #ffffff !important;
}

.dropdown-user-email {
  font-size: 0.75rem;
  color: rgba(180, 162, 253, 0.7) !important;
}

.dropdown-divider {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  margin: 1rem 0;
}

.divider-line {
  flex: 1;
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.3),
    transparent
  );
}

.divider-sparkle {
  position: absolute;
  background: rgba(16, 8, 32, 0.9);
  padding: 0 0.5rem;
  color: var(--primary-color);
  font-size: 0.75rem;
  animation: pulse-glow 5s ease-in-out infinite;
}

.dropdown-divider-simple {
  margin: 0.75rem 0;
}

.divider-line-simple {
  height: 1px;
  background: linear-gradient(
    90deg,
    transparent,
    rgba(180, 162, 253, 0.2),
    transparent
  );
}

.dropdown-menu-options {
  display: flex;
  flex-direction: column;
  gap: 0.25rem;
  position: relative;
  z-index: 2;
}

.dropdown-option {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem;
  background: transparent;
  border: 1px solid transparent;
  border-radius: 0.5rem;
  color: #9ca3af !important;
  font-size: 0.875rem;
  cursor: pointer;
  transition: all 0.3s ease;
  text-align: left;
  width: 100%;

  &:hover {
    background: rgba(180, 162, 253, 0.1);
    border-color: rgba(180, 162, 253, 0.2);
    transform: translateX(4px);

    .option-text {
      color: #ffffff !important;
    }

    .option-arrow {
      transform: translateX(4px);
      opacity: 1;
    }
  }
}

.option-icon-wrapper {
  position: relative;
  display: flex;
  align-items: center;
  justify-content: center;
  width: 2rem;
  height: 2rem;
  background: rgba(180, 162, 253, 0.1);
  border-radius: 0.5rem;
  flex-shrink: 0;
}

.option-icon {
  font-size: 0.875rem;
  color: #f9f5ff;
  transition: all 0.3s ease;
  position: relative;
  z-index: 2;
}

.option-icon-glow {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
  width: 0;
  height: 0;
  background: radial-gradient(
    circle,
    rgba(180, 162, 253, 0.4) 0%,
    transparent 70%
  );
  border-radius: 50%;
  transition: all 0.3s ease;
  z-index: 1;
}

.dropdown-option:hover .option-icon-glow {
  width: 2.5rem;
  height: 2.5rem;
}

.dropdown-option:hover .option-icon {
  color: #ffffff;
  transform: scale(1.1);
}

.option-text {
  flex: 1;
  font-weight: 500;
  transition: all 0.3s ease;
  color: inherit;
}

.option-arrow {
  font-size: 0.75rem;
  opacity: 0.5;
  transition: all 0.3s ease;
  color: inherit;
}

.logout-option {
  margin-top: 0.5rem;

  &:hover {
    background: rgba(255, 107, 107, 0.1);
    border-color: rgba(255, 107, 107, 0.3);

    .option-icon {
      color: #ff6b6b;
    }

    .option-text {
      color: #ff6b6b !important;
    }
  }
}

.logout-glow {
  background: radial-gradient(
    circle,
    rgba(255, 107, 107, 0.4) 0%,
    transparent 70%
  );
}

.dropdown-option:hover {
  .fa-user-edit {
    color: #32cd32;
  }

  .fa-key {
    color: #daa520;
  }

  .fa-cog {
    color: #9370db;
  }

  .fa-crown {
    color: #ffd700;
  }

  .fa-question-circle {
    color: #20b2aa;
  }
}

.nav-icon {
  &.fa-bars {
    color: #9370db !important;
    filter: drop-shadow(0 0 6px rgba(147, 112, 219, 0.4)) !important;
  }

  &.fa-home {
    color: #ffd700 !important;
    filter: drop-shadow(0 0 6px rgba(255, 215, 0, 0.4)) !important;
  }

  &.fa-user {
    color: #20b2aa !important;
    filter: drop-shadow(0 0 6px rgba(32, 178, 170, 0.4)) !important;
  }
}

.nav-btn.active {
  .nav-icon {
    &.fa-bars {
      color: #ffffff !important;
      filter: drop-shadow(0 0 12px rgba(147, 112, 219, 0.8)) !important;
    }

    &.fa-home {
      color: #ffffff !important;
      filter: drop-shadow(0 0 12px rgba(255, 215, 0, 0.8)) !important;
    }

    &.fa-user {
      color: #ffffff !important;
      filter: drop-shadow(0 0 12px rgba(32, 178, 170, 0.8)) !important;
    }
  }
}

@media (max-width: 480px) {
  .user-modal {
    width: calc(100vw - 2rem);
    right: 1rem;
    left: 1rem;
  }

  .nav-btn {
    min-width: 50px;
    gap: 0.125rem;
  }

  .nav-icon {
    font-size: 1.125rem;
  }

  .nav-label {
    font-size: 0.6875rem;
  }

  .bottom-nav {
    padding: 0.625rem 0.75rem 1.25rem;
  }
}

@media (max-width: 360px) {
  .nav-label {
    display: none;
  }

  .nav-btn {
    gap: 0;
  }

  .dropdown-option {
    padding: 0.625rem;
    font-size: 0.8125rem;
  }

  .user-modal-content,
  .menu-content {
    padding: 1rem 0.75rem;
  }
}

.nav-btn:focus-visible,
.close-btn:focus-visible,
.dropdown-option:focus-visible,
.menu-item:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: opacity 0.2s ease !important;
  }

  .menu-modal,
  .user-modal {
    animation: none !important;
  }

  .nav-btn:hover,
  .dropdown-option:hover,
  .menu-item:hover {
    transform: none !important;
  }
}

@supports (-webkit-touch-callout: none) {
  .menu-modal {
    padding-top: max(env(safe-area-inset-top, 0px), 60px) !important;
  }
}

@supports not (-webkit-touch-callout: none) {
  .menu-modal {
    padding-top: 60px !important;
  }
}

@media screen and (min-height: 900px) and (max-width: 450px) {
  .menu-content {
    padding-top: 7rem !important;
  }
}

@media screen and (min-height: 800px) and (max-width: 450px) and (orientation: portrait) {
  .menu-content {
    padding-top: 6.5rem !important;
  }
}

@media screen and (max-height: 700px) {
  .menu-content {
    padding-top: 9rem !important;
  }
}

.menu-modal {
  display: flex;
  flex-direction: column;
  -webkit-overflow-scrolling: touch !important;
  max-height: 100vh !important;
  max-height: 100dvh !important;
}

.menu-content {
  flex: 1;
  overflow-y: auto !important;
  overscroll-behavior-y: auto !important;
  -webkit-overflow-scrolling: touch !important;
}

body.modal-open {
  overflow: hidden !important;
  position: fixed !important;
  width: 100% !important;
  height: 100% !important;
  overscroll-behavior: auto;
}



================================================
File: app/shared/mobile-navigation/mobile-navigation.component.ts
================================================
import { Component, OnInit, OnDestroy, AfterViewInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router, NavigationEnd } from '@angular/router';
import { Subject } from 'rxjs';
import { takeUntil, filter } from 'rxjs/operators';
import { DeviceDetectionService } from '../../core/services/device-detection.service';
import { MenuItem, MenuSection } from '../sidebar/sidebar-interfaces';
import { ClickOutsideDirective } from '../directive/click-outside.directive';

@Component({
  selector: 'app-mobile-navigation',
  standalone: true,
  imports: [CommonModule, RouterModule, ClickOutsideDirective],
  templateUrl: './mobile-navigation.component.html',
  styleUrls: ['./mobile-navigation.component.scss'],
})
export class MobileNavigationComponent implements OnInit, OnDestroy {
  private destroy$ = new Subject<void>();

  // Estados de los modales
  isMenuModalOpen = false;
  isUserModalOpen = false;

  // Estado de navegación
  isHomeActive = false;

  // Datos de usuario (igual que en header)
  userProfile = {
    name: 'Usuario Arcana',
    email: 'usuario@arcana.com',
    avatar: '/assets/images/default-avatar.png',
  };

  // Datos del menú (igual que en sidebar)
  appName = 'Arcana';
  logoUrl = '/assets/logo/logo-arcana.png';

  menuSections: MenuSection[] = [
    {
      title: 'OPCIONES',
      items: [
        {
          icon: 'fas fa-route mystical-icon',
          label: 'Camino Mágico',
          route: '/dashboard/camino-magico',
        },
        {
          icon: 'fas fa-hat-wizard mystical-icon',
          label: 'Magia y Esoterismo',
          route: '/dashboard/magia-esoterismo',
        },
        {
          icon: 'fas fa-spa mystical-icon',
          label: 'Holístico y Espiritualidad',
          route: '/dashboard/holistico-espiritualidad',
        },
        {
          icon: 'fas fa-id-card-alt mystical-icon',
          label: 'Tarot "Carta del Día"',
          route: '/dashboard/tarot',
        },
      ],
    },
    {
      title: 'SERVICIOS',
      items: [
        {
          icon: 'far fa-moon mystical-icon',
          label: 'Fases Lunares',
          route: '/dashboard/fases-lunares',
        },
        {
          icon: 'fas fa-video mystical-icon',
          label: 'Lecturas en Vivo',
          route: '/dashboard/en-vivo',
          badge: 'En vivo',
        },
        {
          icon: 'fas fa-gem mystical-icon',
          label: 'Tienda',
          route: '/dashboard/tienda',
        },
        {
          icon: 'fas fa-graduation-cap mystical-icon',
          label: 'Cursos y Talleres',
          route: '/dashboard/cursos-talleres',
        },
      ],
    },
  ];

  constructor(
    private deviceService: DeviceDetectionService,
    private router: Router
  ) {}

  ngOnInit(): void {
    this.checkCurrentRoute(this.router.url);

    // Escuchar cambios de ruta
    this.router.events
      .pipe(
        filter((event) => event instanceof NavigationEnd),
        takeUntil(this.destroy$)
      )
      .subscribe((event: NavigationEnd) => {
        this.checkCurrentRoute(event.urlAfterRedirects);
      });
  }

  ngOnDestroy(): void {
    this.destroy$.next();
    this.destroy$.complete();
  }

  // ========================================
  // NAVEGACIÓN Y RUTAS
  // ========================================

  private checkCurrentRoute(url: string): void {
    const homeRoutes = ['/dashboard', '/dashboard/home', '/dashboard/'];
    this.isHomeActive = homeRoutes.some(
      (route) =>
        url === route ||
        url.startsWith(route + '?') ||
        url.startsWith(route + '#')
    );

    if (this.isHomeActive) {
      this.clearActiveStates();
    } else {
      this.updateActiveStateBasedOnRoute(url);
    }
  }

  private updateActiveStateBasedOnRoute(url: string): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        if (item.route) {
          item.isActive = url.startsWith(item.route);
        }
      });
    });
  }

  private clearActiveStates(): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        item.isActive = false;
      });
    });
  }

  // ========================================
  // BOTTOM NAVIGATION ACTIONS
  // ========================================

  onMenuClick(): void {
    console.log('Menu click - Estado actual:', this.isMenuModalOpen);

    setTimeout(() => {
      if (this.isMenuModalOpen) {
        console.log('Cerrando menú...');
        this.closeAllModals();
        document.body.classList.remove('modal-open');
      } else {
        console.log('Abriendo menú...');
        this.isUserModalOpen = false;
        this.isMenuModalOpen = true;
        document.body.classList.add('modal-open');
      }

      if (typeof window !== 'undefined') {
        window.dispatchEvent(new Event('resize'));
      }
    }, 50);
  }

  onMenuTouch(event: TouchEvent): void {
    event.preventDefault();
    event.stopPropagation();

    requestAnimationFrame(() => {
      if (this.isMenuModalOpen) {
        this.closeAllModals();
      } else {
        this.isUserModalOpen = false;
        this.isMenuModalOpen = true;
      }
    });
  }

  onHomeClick(): void {
    this.closeAllModals();
    this.isHomeActive = true;
    this.clearActiveStates();
    this.router.navigate(['/dashboard/home']).catch((err) => {
      console.error('Error al navegar a home:', err);
    });
  }

  onUserClick(): void {
    console.log('User click - Estado actual:', this.isUserModalOpen);

    setTimeout(() => {
      if (this.isUserModalOpen) {
        this.closeAllModals();
        document.body.classList.remove('modal-open');
      } else {
        this.isMenuModalOpen = false;
        this.isUserModalOpen = true;
        // Bloquear scroll del body
        document.body.classList.add('modal-open');
      }

      if (typeof window !== 'undefined') {
        window.dispatchEvent(new Event('resize'));
      }
    }, 50);
  }

  onUserTouch(event: TouchEvent): void {
    event.preventDefault();
    event.stopPropagation();

    requestAnimationFrame(() => {
      if (this.isUserModalOpen) {
        this.closeAllModals();
      } else {
        this.isMenuModalOpen = false;
        this.isUserModalOpen = true;
      }
    });
  }

  // ========================================
  // MODAL ACTIONS
  // ========================================

  closeAllModals(): void {
    this.isMenuModalOpen = false;
    this.isUserModalOpen = false;

    //Restaurar scroll del body
    document.body.classList.remove('modal-open');

    setTimeout(() => {
      const body = document.body;
      body.style.overflow = 'auto';
      body.style.position = 'static';
      body.style.width = 'auto';
      body.style.height = 'auto';
    }, 100);
  }

  onMenuModalClickOutside(): void {
    this.isMenuModalOpen = false;
  }

  onUserModalClickOutside(): void {
    this.isUserModalOpen = false;
  }

  // ========================================
  // MENU ITEM ACTIONS
  // ========================================

  onMenuItemClick(item: MenuItem): void {
    console.log('Menu item clicked:', item.label);

    if (item.label === 'Cerrar Sesión') {
      this.handleLogout();
      return;
    }

    this.updateActiveState(item);
    this.isHomeActive = false;
    this.closeAllModals();
  }

  onLogoClick(): void {
    console.log('Logo clicked - redirecting to home');
    this.isHomeActive = true;
    this.clearActiveStates();
    this.router.navigate(['/dashboard/home']);
    this.closeAllModals();
  }

  private updateActiveState(selectedItem: MenuItem): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        item.isActive = item === selectedItem;
      });
    });
  }

  // ========================================
  // USER PROFILE ACTIONS
  // ========================================

  onEditProfile(): void {
    this.closeAllModals();
    this.router.navigate(['/profile/edit']).catch((err) => {
      console.error('Error al navegar a editar perfil:', err);
    });
  }

  onChangePassword(): void {
    this.closeAllModals();
    this.router.navigate(['/profile/change-password']).catch((err) => {
      console.error('Error al navegar a cambiar contraseña:', err);
    });
  }

  onSettings(): void {
    this.closeAllModals();
    this.router.navigate(['/settings']).catch((err) => {
      console.error('Error al navegar a configuración:', err);
    });
  }

  onSubscription(): void {
    this.closeAllModals();
    this.router.navigate(['/subscriptions']).catch((err) => {
      console.error('Error al navegar a suscripción:', err);
    });
  }

  onHelp(): void {
    this.closeAllModals();
    this.router.navigate(['/help']).catch((err) => {
      console.error('Error al navegar a ayuda:', err);
    });
  }

  onLogout(): void {
    this.closeAllModals();
    // Limpiar datos de autenticación
    localStorage.removeItem('user_token');
    localStorage.removeItem('user_data');
    // Navegar a login
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error durante logout:', err);
    });
  }

  private performLogout(): void {
    localStorage.removeItem('user_token');
    localStorage.removeItem('user_data');
    this.router.navigate(['/auth/login']).catch((err) => {
      console.error('Error durante logout:', err);
    });
    this.closeAllModals();
  }

  private handleLogout(): void {
    console.log('Logging out...');
    this.performLogout();
  }

  // ========================================
  // UTILITY METHODS
  // ========================================

  trackBySection(index: number, section: MenuSection): string {
    return section.title;
  }

  trackByItem(index: number, item: MenuItem): string {
    return item.label;
  }

  onLogoError(event: any): void {
    event.target.src = '/assets/logo/logo-arcana.png';
  }

  onImageError(event: any): void {
    event.target.src = '/assets/images/default-avatar.png';
  }

  get userInitials(): string {
    if (!this.userProfile.name) return 'UA';

    const names = this.userProfile.name.split(' ');
    if (names.length >= 2) {
      return `${names[0][0]}${names[1][0]}`.toUpperCase();
    }
    return names[0].substring(0, 2).toUpperCase();
  }
}



================================================
File: app/shared/sidebar/sidebar-interfaces.ts
================================================
export interface MenuItem {
  icon: string;
  label: string;
  route?: string;
  badge?: string;
  isActive?: boolean;
}

export interface MenuSection {
  title: string;
  items: MenuItem[];
}



================================================
File: app/shared/sidebar/sidebar.component.html
================================================
<!-- Contenedor Principal del Sidebar -->
<aside
  class="flex flex-col rounded-3xl w-full md:w-56 p-6 md:p-8 text-gray-400 select-none flex-shrink-0 sidebar-container"
  style="border: 2px solid #423b51 !important"
>
  <!-- Sección del Logo -->
  <div
    [class]="getLogoClasses()"
    [routerLink]="'/dashboard/home'"
    [ngClass]="{ 'logo-active': isHomeActive }"
    (click)="onLogoClick()"
  >
    <!-- Imagen del Logo -->
    <img
      alt="Arcana logo"
      class="w-8 h-8 logo-image"
      [ngClass]="{ 'logo-image-active': isHomeActive }"
      height="32"
      [src]="logoUrl"
      width="32"
      (error)="onLogoError($event)"
    />

    <!-- Texto del Logo -->
    <span
      class="font-semibold text-lg logo-text"
      [ngClass]="{ 'logo-text-active': isHomeActive }"
    >
      {{ appName }}
    </span>
  </div>

  <!-- Navegación Principal -->
  <nav class="flex flex-col gap-4 text-sm font-medium menu-sections">
    <!-- Secciones del Menú -->
    <div
      *ngFor="let section of menuSections; trackBy: trackBySection"
      class="menu-section"
    >
      <!-- Título de la Sección -->
      <h3 class="text-xs font-semibold text-gray-400 mb-2 section-title">
        {{ section.title }}
      </h3>

      <!-- Items del Menú -->
      <div class="flex flex-col gap-1">
        <a
          *ngFor="let item of section.items; trackBy: trackByItem"
          [routerLink]="item.route || '/'"
          [class]="getLinkClasses(item) + ' menu-item'"
          [ngClass]="{ active: item.isActive }"
          (click)="onMenuItemClick(item)"
        >
          <!-- Icono del Item -->
          <i [class]="item.icon"></i>

          <!-- Texto del Item -->
          <span class="menu-text">{{ item.label }}</span>

          <!-- Badge (si existe) -->
          <span *ngIf="item.badge" class="ml-auto badge mystical-badge">
            {{ item.badge }}
          </span>
        </a>
      </div>
    </div>
  </nav>
</aside>


================================================
File: app/shared/sidebar/sidebar.component.scss
================================================
:root {
  --primary-color: #b4a2fd;
  --secondary-color: #100820;
  --glass-bg: rgba(180, 162, 253, 0.1);
  --glass-border: rgba(180, 162, 253, 0.3);
  --text-primary: rgba(180, 162, 253, 0.9);
  --text-secondary: rgba(180, 162, 253, 0.6);
  --shadow-subtle: 0 4px 20px rgba(180, 162, 253, 0.15);
  --backdrop-blur: blur(20px);
}

@keyframes gentle-glow {
  0%,
  100% {
    box-shadow: 0 0 10px rgba(180, 162, 253, 0.2);
  }
  50% {
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.4);
  }
}

@keyframes soft-pulse {
  0%,
  100% {
    opacity: 0.6;
    transform: scale(1);
  }
  50% {
    opacity: 1;
    transform: scale(1.05);
  }
}

@keyframes floating-particle {
  0%,
  100% {
    opacity: 0.3;
    transform: translateY(0px) translateX(0px) scale(0.8);
  }
  25% {
    opacity: 0.7;
    transform: translateY(-15px) translateX(5px) scale(1);
  }
  50% {
    opacity: 1;
    transform: translateY(-20px) translateX(-3px) scale(1.2);
  }
  75% {
    opacity: 0.6;
    transform: translateY(-10px) translateX(8px) scale(0.9);
  }
}

@keyframes twinkling-star {
  0%,
  100% {
    opacity: 0.2;
    transform: scale(0.8) rotate(0deg);
  }
  50% {
    opacity: 0.8;
    transform: scale(1.3) rotate(180deg);
  }
}

@keyframes breathing-gradient {
  0%,
  100% {
    background-image: linear-gradient(
      135deg,
      rgba(180, 162, 253, 0.1) 0%,
      rgba(180, 162, 253, 0.05) 50%,
      rgba(180, 162, 253, 0.1) 100%
    );
  }
  50% {
    background-image: linear-gradient(
      135deg,
      rgba(180, 162, 253, 0.12) 0%,
      rgba(180, 162, 253, 0.07) 50%,
      rgba(180, 162, 253, 0.12) 100%
    );
  }
}

@keyframes subtle-glow-pulse {
  0%,
  100% {
    box-shadow: 0 0 5px rgba(180, 162, 253, 0.1);
  }
  50% {
    box-shadow: 0 0 15px rgba(180, 162, 253, 0.3);
  }
}

@keyframes mystical-shimmer {
  0% {
    transform: translateX(-100%);
    opacity: 0;
  }
  50% {
    opacity: 0.6;
  }
  100% {
    transform: translateX(100%);
    opacity: 0;
  }
}

@keyframes logo-glow-active {
  0%,
  100% {
    box-shadow: 0 0 15px rgba(180, 162, 253, 0.4), 0 0 25px rgba(180, 162, 253, 0.2);
  }
  50% {
    box-shadow: 0 0 25px rgba(180, 162, 253, 0.6), 0 0 35px rgba(180, 162, 253, 0.3);
  }
}

:host {
  font-family: serif;
}

.sidebar-container {
  position: relative;
  height: 100%;
  width: 280px;
  flex-shrink: 0;
  border-radius: 1.5rem !important;
  -webkit-border-radius: 1.5rem !important;
  -moz-border-radius: 1.5rem !important;

  background: #100820 !important;
  background-image: linear-gradient(
    135deg,
    rgba(180, 162, 253, 0.1) 0%,
    rgba(180, 162, 253, 0.05) 50%,
    rgba(180, 162, 253, 0.1) 100%
  ) !important;
  backdrop-filter: var(--backdrop-blur);
  border: 2px solid var(--glass-border) !important;
  box-shadow: var(--shadow-subtle);

  animation: breathing-gradient 8s ease-in-out infinite;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: radial-gradient(
        circle at 20% 30%,
        rgba(180, 162, 253, 0.4) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 70% 60%,
        rgba(180, 162, 253, 0.3) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 45% 80%,
        rgba(180, 162, 253, 0.5) 1px,
        transparent 2px
      ),
      radial-gradient(
        circle at 80% 20%,
        rgba(180, 162, 253, 0.2) 1px,
        transparent 2px
      );
    background-size: 200px 200px, 150px 150px, 180px 180px, 220px 220px;
    background-position: 0px 0px, 50px 80px, 120px 20px, 200px 100px;
    animation: floating-particle 15s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
    border-radius: 1.5rem;
    opacity: 0.6;
  }

  &::after {
    content: "✦ ✧ ✦ ✧";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    color: rgba(180, 162, 253, 0.4);
    font-size: 8px;
    letter-spacing: 60px;
    line-height: 80px;
    text-align: center;
    animation: twinkling-star 6s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
    overflow: hidden;
    border-radius: 1.5rem;
  }
}

.sidebar-container > * {
  position: relative;
  z-index: 3;
}

.logo-container {
  padding: 1rem;
  background: var(--glass-bg);
  border: 1px solid var(--glass-border);
  border-radius: 1rem !important;
  -webkit-border-radius: 1rem !important;
  -moz-border-radius: 1rem !important;
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent
    );
    transform: translateX(-100%);
    animation: mystical-shimmer 8s ease-in-out infinite;
    pointer-events: none;
    z-index: 1;
  }

  // Estado activo del logo
  &.logo-active {
    background: rgba(180, 162, 253, 0.2) !important;
    transform: scale(1.02);
    background: rgba(180, 162, 253, 0.15);
    border-color: var(--primary-color);

    &::before {
      background: linear-gradient(
        90deg,
        transparent,
        rgba(255, 255, 255, 0.2),
        transparent
      );
      animation: mystical-shimmer 3s ease-in-out infinite;
    }
  }

  .logo-image {
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.4));
    transition: all 0.3s ease;
    position: relative;
    z-index: 2;

    &:hover {
      transform: scale(1.05);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.6));
    }
  }
}

.menu-sections {
  padding: 0 1rem;
  gap: 2rem;
}

.menu-section {
  .section-title {
    color: var(--text-secondary) !important;
    font-size: 0.75rem;
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 1px;
    margin-bottom: 1rem;
    position: relative;
    transition: all 0.3s ease;

    &:hover {
      color: rgba(180, 162, 253, 0.8) !important;
      text-shadow: 0 0 8px rgba(180, 162, 253, 0.2);
    }

    &::after {
      content: "";
      position: absolute;
      bottom: -0.25rem;
      left: 0;
      width: 30px;
      height: 1px;
      background: var(--primary-color);
      opacity: 0.5;
      transition: all 0.4s ease;
    }

    &:hover::after {
      width: 50px;
      opacity: 0.8;
      box-shadow: 0 0 5px rgba(180, 162, 253, 0.4);
    }
  }
}

.menu-item {
  position: relative;
  display: flex;
  align-items: center;
  gap: 0.75rem;
  padding: 0.75rem 1rem;
  border-radius: 0.75rem !important;
  -webkit-border-radius: 0.75rem !important;
  -moz-border-radius: 0.75rem !important;
  margin-bottom: 0.25rem;

  color: var(--text-primary);
  font-size: 0.9375rem;
  font-weight: 500;
  text-decoration: none;

  background: transparent;
  border: 1px solid transparent;
  transition: all 0.3s ease;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(180, 162, 253, 0.1),
      transparent
    );
    transition: left 0.5s ease;
    pointer-events: none;
  }

  &:hover {
    color: #ffffff;
    background: var(--glass-bg);

    transform: translateX(6px);
    box-shadow: 0 4px 15px rgba(180, 162, 253, 0.2);

    &::before {
      left: 100%;
    }

    .mystical-icon {
      transform: scale(1.15);
      filter: drop-shadow(0 0 12px rgba(180, 162, 253, 0.8));
    }
  }

  &.active {
    color: #ffffff !important;
    background: rgba(180, 162, 253, 0.15);
    border-color: var(--primary-color);
    box-shadow: 0 0 20px rgba(180, 162, 253, 0.3);

    &::before {
      content: "";
      position: absolute;
      left: 0;
      top: 50%;
      transform: translateY(-50%);
      width: 3px;
      height: 20px;
      background: linear-gradient(180deg, var(--primary-color), #ffffff);
      border-radius: 0 2px 2px 0;
      box-shadow: 0 0 8px var(--primary-color);
    }

    .mystical-icon {
      color: #ffffff;
      filter: drop-shadow(0 0 10px rgba(180, 162, 253, 0.6));
      animation: gentle-icon-glow 3s ease-in-out infinite;
    }
  }
}

.mystical-icon {
  font-size: 1.125rem !important;
  min-width: 24px !important;
  color: var(--primary-color);
  transition: all 0.4s ease;
  filter: drop-shadow(0 0 6px rgba(180, 162, 253, 0.4));

  &.fa-route {
    color: #20b2aa;
  }

  &.fa-hat-wizard {
    color: #9370db;
  }

  &.fa-spa {
    color: #32cd32;
  }

  &.fa-id-card-alt {
    color: #daa520;
  }

  &.fa-moon {
    color: #e6e6fa;
  }

  &.fa-video {
    color: #ff6347;
  }

  &.fa-gem {
    color: #ff69b4;
  }

  &.fa-graduation-cap {
    color: #1e90ff;
  }

  &.fa-user-circle,
  &.fa-cog,
  &.fa-question-circle,
  &.fa-sign-out-alt {
    color: rgba(180, 162, 253, 0.8);
  }
}

@keyframes gentle-icon-glow {
  0%,
  100% {
    filter: drop-shadow(0 0 8px rgba(180, 162, 253, 0.6));
    transform: scale(1);
  }
  50% {
    filter: drop-shadow(0 0 15px rgba(180, 162, 253, 0.8));
    transform: scale(1.02);
  }
}

.mystical-badge {
  background: linear-gradient(135deg, #daa520, #ffd700) !important;
  color: #100820 !important;
  font-size: 0.625rem !important;
  font-weight: 700 !important;
  padding: 0.25rem 0.5rem !important;
  border-radius: 12px !important;
  -webkit-border-radius: 12px !important;
  -moz-border-radius: 12px !important;
  border: 1px solid rgba(255, 215, 0, 0.3);
  transition: all 0.3s ease;
  position: relative;
  overflow: hidden;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.3),
      transparent
    );
    animation: mystical-shimmer 4s ease-in-out infinite;
    pointer-events: none;
  }

  &:hover {
    transform: scale(1.05);
    box-shadow: 0 0 10px rgba(218, 165, 32, 0.4);
    animation: subtle-glow-pulse 1.5s ease-in-out infinite;
  }
}

.mystical-button {
  width: 100%;
  padding: 0.75rem;
  border-radius: 0.75rem !important;
  -webkit-border-radius: 0.75rem !important;
  -moz-border-radius: 0.75rem !important;
  position: relative;
  z-index: 2;
  overflow: hidden;

  background: var(--primary-color);
  color: #ffffff;
  font-weight: 700;
  font-size: 0.875rem;
  border: none;
  cursor: pointer;

  transition: all 0.3s ease;

  &::before {
    content: "";
    position: absolute;
    top: 0;
    left: -100%;
    width: 100%;
    height: 100%;
    background: linear-gradient(
      90deg,
      transparent,
      rgba(255, 255, 255, 0.1),
      transparent
    );
    animation: mystical-shimmer 6s ease-in-out infinite;
    pointer-events: none;
  }

  &:hover {
    background: linear-gradient(135deg, #ffffff, var(--primary-color));
    color: var(--secondary-color);
    transform: translateY(-1px);
    box-shadow: 0 4px 15px rgba(180, 162, 253, 0.3);
  }

  &:active {
    transform: translateY(0);
  }
}

.section-spacer {
  height: 2rem;
  position: relative;
  margin: 1rem 0;

  &::before {
    content: "";
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    width: 40px;
    height: 1px;
    background: rgba(180, 162, 253, 0.3);
  }
}

@media (max-width: 1200px) {
  .sidebar-container {
    width: 260px;
  }
}

@media (max-width: 992px) {
  .sidebar-container {
    width: 240px;
  }

  .menu-item {
    padding: 0.625rem 0.875rem;
    font-size: 0.875rem;
  }
}

@media (max-width: 768px) {
  .sidebar-container {
    width: 220px;
    height: calc(100vh - 1rem);
  }

  .menu-sections {
    padding: 0 0.75rem;
    gap: 1.5rem;
  }

  .logo-container {
    margin-bottom: 2rem;
    padding: 0.75rem;

    span {
      font-size: 1rem;
    }
  }
}

@media (max-width: 480px) {
  .sidebar-container {
    width: 200px;
    height: calc(100vh - 0.5rem);
  }

  .menu-item {
    padding: 0.5rem 0.625rem;
    font-size: 0.8125rem;
    gap: 0.5rem;

    &:hover {
      transform: translateX(2px);
    }

    i {
      font-size: 0.875rem;
      min-width: 16px;
    }
  }

  .mystical-badge {
    font-size: 0.5rem !important;
    padding: 0.1875rem 0.375rem !important;
  }

  .mystical-cta {
    display: none;
  }
}

@media (prefers-reduced-motion: reduce) {
  * {
    animation: none !important;
    transition: opacity 0.2s ease !important;
  }

  .menu-item:hover {
    transform: none !important;
  }
}

.menu-item:focus-visible,
.mystical-button:focus-visible {
  outline: 2px solid var(--primary-color);
  outline-offset: 2px;
}


================================================
File: app/shared/sidebar/sidebar.component.ts
================================================
import { Component, OnInit } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule, Router, NavigationEnd } from '@angular/router';
import { filter } from 'rxjs/operators';
import { MenuItem, MenuSection } from './sidebar-interfaces';

@Component({
  selector: 'app-sidebar',
  standalone: true,
  imports: [CommonModule, RouterModule],
  templateUrl: './sidebar.component.html',
  styleUrls: ['./sidebar.component.scss'],
})
export class SidebarComponent implements OnInit {
  
  // ========================================
  // PROPIEDADES PRINCIPALES
  // ========================================
  
  appName: string = 'Arcana';
  logoUrl: string = '/assets/logo/logo-arcana.png';
  isHomeActive: boolean = false;

  menuSections: MenuSection[] = [
    {
      title: 'OPCIONES',
      items: [
        {
          icon: 'fas fa-route mystical-icon',
          label: 'Camino Mágico',
          route: '/dashboard/camino-magico',
        },
        {
          icon: 'fas fa-hat-wizard mystical-icon',
          label: 'Magia y Esoterismo',
          route: '/dashboard/magia-esoterismo',
        },
        {
          icon: 'fas fa-spa mystical-icon',
          label: 'Holístico y Espiritualidad',
          route: '/dashboard/holistico-espiritualidad',
        },
        {
          icon: 'fas fa-id-card-alt mystical-icon',
          label: 'Tarot "Carta del Día"',
          route: '/dashboard/tarot',
        },
      ],
    },
    {
      title: 'SERVICIOS',
      items: [
        {
          icon: 'far fa-moon mystical-icon',
          label: 'Fases Lunares',
          route: '/dashboard/fases-lunares',
        },
        {
          icon: 'fas fa-video mystical-icon',
          label: 'Lecturas en Vivo',
          route: '/dashboard/en-vivo',
          badge: 'En vivo',
        },
        {
          icon: 'fas fa-gem mystical-icon',
          label: 'Tienda',
          route: '/dashboard/tienda',
        },
        {
          icon: 'fas fa-graduation-cap mystical-icon',
          label: 'Cursos y Talleres',
          route: '/dashboard/cursos-talleres',
        },
      ],
    },
  ];

  constructor(private router: Router) {}

  // ========================================
  // INICIALIZACIÓN
  // ========================================

  ngOnInit(): void {
    this.checkCurrentRoute(this.router.url);
    this.setupRouteListener();
  }

  private setupRouteListener(): void {
    this.router.events
      .pipe(filter(event => event instanceof NavigationEnd))
      .subscribe((event: NavigationEnd) => {
        this.checkCurrentRoute(event.urlAfterRedirects);
      });
  }

  // ========================================
  // GESTIÓN DE RUTAS Y ESTADOS
  // ========================================

  private checkCurrentRoute(url: string): void {
    const homeRoutes = ['/dashboard', '/dashboard/home', '/dashboard/'];
    this.isHomeActive = homeRoutes.some(route => 
      url === route || url.startsWith(route + '?') || url.startsWith(route + '#')
    );

    if (this.isHomeActive) {
      this.clearActiveStates();
    } else {
      this.updateActiveStateBasedOnRoute(url);
    }
  }

  private updateActiveStateBasedOnRoute(url: string): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        if (item.route) {
          item.isActive = url.startsWith(item.route);
        }
      });
    });
  }

  private clearActiveStates(): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        item.isActive = false;
      });
    });
  }

  private updateActiveState(selectedItem: MenuItem): void {
    this.menuSections.forEach((section) => {
      section.items.forEach((item) => {
        item.isActive = item === selectedItem;
      });
    });
  }

  // ========================================
  // ACCIONES DE NAVEGACIÓN
  // ========================================

  onMenuItemClick(item: MenuItem): void {
    console.log('Menu item clicked:', item.label);

    if (item.label === 'Cerrar Sesión') {
      this.handleLogout();
      return;
    }

    this.updateActiveState(item);
    this.isHomeActive = false;
  }

  onLogoClick(): void {
    console.log('Logo clicked - redirecting to home');
    this.isHomeActive = true;
    this.clearActiveStates();
  }

  // ========================================
  // GESTIÓN DE CLASES CSS
  // ========================================

  getLinkClasses(item: MenuItem): string {
    const baseClasses =
      'flex items-center gap-2 transition-colors duration-200 rounded-lg px-3 py-2';

    if (item.isActive) {
      return `${baseClasses} text-[#0f3e23] font-semibold bg-[#0f3e23]/10`;
    }

    return `${baseClasses} hover:text-[#0f3e23]`;
  }

  getLogoClasses(): string {
    const baseClasses = 'flex items-center gap-2 mb-5 logo-container cursor-pointer transition-all duration-300';
    
    if (this.isHomeActive) {
      return `${baseClasses} logo-active`;
    }
    
    return `${baseClasses} hover:opacity-80`;
  }

  // ========================================
  // UTILIDADES
  // ========================================

  trackBySection(index: number, section: MenuSection): string {
    return section.title;
  }

  trackByItem(index: number, item: MenuItem): string {
    return item.label;
  }

  onLogoError(event: any): void {
    event.target.src = '/assets/logo/logo-arcana.png';
  }

  // ========================================
  // GESTIÓN DE SESIÓN
  // ========================================

  private handleLogout(): void {
    console.log('Logging out...');
    // Implementar lógica de logout aquí
  }
}




